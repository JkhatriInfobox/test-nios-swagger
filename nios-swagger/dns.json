{
    "openapi": "3.0.0",
    "info": {
        "title": "Infoblox DNS API",
        "description": "OpenAPI specification for Infoblox NIOS WAPI DNS objects",
        "version": "2.13.6",
        "termsOfService": "https://www.infoblox.com",
        "contact": {
            "name": "Infoblox",
            "url": "https://www.infoblox.com"
        },
        "license": {
            "name": "Infoblox License",
            "url": "https://www.infoblox.com"
        }
    },
    "servers": [
        {
            "url": "/wapi/v2.13.6",
            "description": "NIOS WAPI server"
        }
    ],
    "tags": [
        {
            "name": "record_a",
            "description": "Operations for record:a objects"
        },
        {
            "name": "record_aaaa",
            "description": "Operations for record:aaaa objects"
        },
        {
            "name": "record_alias",
            "description": "Operations for record:alias objects"
        },
        {
            "name": "record_cname",
            "description": "Operations for record:cname objects"
        },
        {
            "name": "record_mx",
            "description": "Operations for record:mx objects"
        },
        {
            "name": "record_txt",
            "description": "Operations for record:txt objects"
        },
        {
            "name": "record_ptr",
            "description": "Operations for record:ptr objects"
        },
        {
            "name": "record_srv",
            "description": "Operations for record:srv objects"
        },
        {
            "name": "record_ns",
            "description": "Operations for record:ns objects"
        },
        {
            "name": "record_host",
            "description": "Operations for record:host objects"
        },
        {
            "name": "record_dname",
            "description": "Operations for record:dname objects"
        },
        {
            "name": "record_naptr",
            "description": "Operations for record:naptr objects"
        },
        {
            "name": "record_tlsa",
            "description": "Operations for record:tlsa objects"
        },
        {
            "name": "record_caa",
            "description": "Operations for record:caa objects"
        },
        {
            "name": "record_dhcid",
            "description": "Operations for record:dhcid objects"
        },
        {
            "name": "record_dnskey",
            "description": "Operations for record:dnskey objects"
        },
        {
            "name": "record_ds",
            "description": "Operations for record:ds objects"
        },
        {
            "name": "record_nsec",
            "description": "Operations for record:nsec objects"
        },
        {
            "name": "record_nsec3",
            "description": "Operations for record:nsec3 objects"
        },
        {
            "name": "record_nsec3param",
            "description": "Operations for record:nsec3param objects"
        },
        {
            "name": "record_rrsig",
            "description": "Operations for record:rrsig objects"
        },
        {
            "name": "record_unknown",
            "description": "Operations for record:unknown objects"
        },
        {
            "name": "record_host_ipv4addr",
            "description": "Operations for record:host_ipv4addr objects"
        },
        {
            "name": "record_host_ipv6addr",
            "description": "Operations for record:host_ipv6addr objects"
        },
        {
            "name": "record_dtclbdn",
            "description": "Operations for record:dtclbdn objects"
        },
        {
            "name": "zone_auth",
            "description": "Operations for zone_auth objects"
        },
        {
            "name": "zone_delegated",
            "description": "Operations for zone_delegated objects"
        },
        {
            "name": "zone_forward",
            "description": "Operations for zone_forward objects"
        },
        {
            "name": "zone_stub",
            "description": "Operations for zone_stub objects"
        },
        {
            "name": "zone_rp",
            "description": "Operations for zone_rp objects"
        },
        {
            "name": "zone_auth_discrepancy",
            "description": "Operations for zone_auth_discrepancy objects"
        },
        {
            "name": "allrecords",
            "description": "Operations for allrecords objects"
        },
        {
            "name": "recordnamepolicy",
            "description": "Operations for recordnamepolicy objects"
        },
        {
            "name": "dns64group",
            "description": "Operations for dns64group objects"
        },
        {
            "name": "allnsgroup",
            "description": "Operations for allnsgroup objects"
        },
        {
            "name": "ddns_principalcluster",
            "description": "Operations for ddns:principalcluster objects"
        },
        {
            "name": "ddns_principalcluster_group",
            "description": "Operations for ddns:principalcluster:group objects"
        },
        {
            "name": "orderedresponsepolicyzones",
            "description": "Operations for orderedresponsepolicyzones objects"
        },
        {
            "name": "sharedrecord_a",
            "description": "Operations for sharedrecord:a objects"
        },
        {
            "name": "sharedrecord_aaaa",
            "description": "Operations for sharedrecord:aaaa objects"
        },
        {
            "name": "sharedrecord_cname",
            "description": "Operations for sharedrecord:cname objects"
        },
        {
            "name": "sharedrecord_mx",
            "description": "Operations for sharedrecord:mx objects"
        },
        {
            "name": "sharedrecord_srv",
            "description": "Operations for sharedrecord:srv objects"
        },
        {
            "name": "sharedrecord_txt",
            "description": "Operations for sharedrecord:txt objects"
        },
        {
            "name": "sharedrecordgroup",
            "description": "Operations for sharedrecordgroup objects"
        },
        {
            "name": "view",
            "description": "Operations for view objects"
        }
    ],
    "paths": {
        "/record:a": {
            "get": {
                "tags": [
                    "record_a"
                ],
                "summary": "Retrieve record:a objects",
                "description": "Returns a list of record:a objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_a"
                ],
                "summary": "Create a record:a object",
                "description": "Creates a new record:a object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordA"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_a",
                "x-tf-datasource": "nios_dns_record_a",
                "x-sdk-default-ext-attrs": true,
                "x-sdk-post-function-call": [
                    "Ipv4addr"
                ],
                "x-tf-function-call": true
            }
        },
        "/record:a/{reference}": {
            "get": {
                "tags": [
                    "record_a"
                ],
                "summary": "Get a specific record:a object",
                "description": "Returns a specific record:a object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:a object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_a"
                ],
                "summary": "Update a record:a object",
                "description": "Updates a specific record:a object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:a object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordA"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_a"
                ],
                "summary": "Delete a record:a object",
                "description": "Deletes a specific record:a object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:a object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "remove_associated_ptr",
                        "in": "query",
                        "description": "Delete option that indicates whether the associated PTR records should be removed while deleting the specified A record.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:aaaa": {
            "get": {
                "tags": [
                    "record_aaaa"
                ],
                "summary": "Retrieve record:aaaa objects",
                "description": "Returns a list of record:aaaa objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_aaaa"
                ],
                "summary": "Create a record:aaaa object",
                "description": "Creates a new record:aaaa object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordAaaa"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_aaaa",
                "x-tf-datasource": "nios_dns_record_aaaa",
                "x-sdk-default-ext-attrs": true,
                "x-sdk-post-function-call": [
                    "Ipv6addr"
                ],
                "x-tf-function-call": true
            }
        },
        "/record:aaaa/{reference}": {
            "get": {
                "tags": [
                    "record_aaaa"
                ],
                "summary": "Get a specific record:aaaa object",
                "description": "Returns a specific record:aaaa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:aaaa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_aaaa"
                ],
                "summary": "Update a record:aaaa object",
                "description": "Updates a specific record:aaaa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:aaaa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordAaaa"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_aaaa"
                ],
                "summary": "Delete a record:aaaa object",
                "description": "Deletes a specific record:aaaa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:aaaa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "remove_associated_ptr",
                        "in": "query",
                        "description": "Delete option that indicates whether the associated PTR records should be removed while deleting the specified A record.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:alias": {
            "get": {
                "tags": [
                    "record_alias"
                ],
                "summary": "Retrieve record:alias objects",
                "description": "Returns a list of record:alias objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordAliasResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_alias"
                ],
                "summary": "Create a record:alias object",
                "description": "Creates a new record:alias object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordAlias"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordAliasResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_alias",
                "x-tf-datasource": "nios_dns_record_alias",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:alias/{reference}": {
            "get": {
                "tags": [
                    "record_alias"
                ],
                "summary": "Get a specific record:alias object",
                "description": "Returns a specific record:alias object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:alias object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordAliasResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_alias"
                ],
                "summary": "Update a record:alias object",
                "description": "Updates a specific record:alias object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:alias object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordAlias"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordAliasResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_alias"
                ],
                "summary": "Delete a record:alias object",
                "description": "Deletes a specific record:alias object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:alias object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:cname": {
            "get": {
                "tags": [
                    "record_cname"
                ],
                "summary": "Retrieve record:cname objects",
                "description": "Returns a list of record:cname objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_cname"
                ],
                "summary": "Create a record:cname object",
                "description": "Creates a new record:cname object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordCname"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_cname",
                "x-tf-datasource": "nios_dns_record_cname",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:cname/{reference}": {
            "get": {
                "tags": [
                    "record_cname"
                ],
                "summary": "Get a specific record:cname object",
                "description": "Returns a specific record:cname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:cname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_cname"
                ],
                "summary": "Update a record:cname object",
                "description": "Updates a specific record:cname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:cname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordCname"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_cname"
                ],
                "summary": "Delete a record:cname object",
                "description": "Deletes a specific record:cname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:cname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:mx": {
            "get": {
                "tags": [
                    "record_mx"
                ],
                "summary": "Retrieve record:mx objects",
                "description": "Returns a list of record:mx objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_mx"
                ],
                "summary": "Create a record:mx object",
                "description": "Creates a new record:mx object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordMx"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_mx",
                "x-tf-datasource": "nios_dns_record_mx",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:mx/{reference}": {
            "get": {
                "tags": [
                    "record_mx"
                ],
                "summary": "Get a specific record:mx object",
                "description": "Returns a specific record:mx object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:mx object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_mx"
                ],
                "summary": "Update a record:mx object",
                "description": "Updates a specific record:mx object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:mx object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordMx"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_mx"
                ],
                "summary": "Delete a record:mx object",
                "description": "Deletes a specific record:mx object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:mx object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:txt": {
            "get": {
                "tags": [
                    "record_txt"
                ],
                "summary": "Retrieve record:txt objects",
                "description": "Returns a list of record:txt objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_txt"
                ],
                "summary": "Create a record:txt object",
                "description": "Creates a new record:txt object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordTxt"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_txt",
                "x-tf-datasource": "nios_dns_record_txt",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:txt/{reference}": {
            "get": {
                "tags": [
                    "record_txt"
                ],
                "summary": "Get a specific record:txt object",
                "description": "Returns a specific record:txt object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:txt object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_txt"
                ],
                "summary": "Update a record:txt object",
                "description": "Updates a specific record:txt object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:txt object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordTxt"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_txt"
                ],
                "summary": "Delete a record:txt object",
                "description": "Deletes a specific record:txt object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:txt object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:ptr": {
            "get": {
                "tags": [
                    "record_ptr"
                ],
                "summary": "Retrieve record:ptr objects",
                "description": "Returns a list of record:ptr objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordPtrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_ptr"
                ],
                "summary": "Create a record:ptr object",
                "description": "Creates a new record:ptr object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordPtr"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordPtrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_ptr",
                "x-tf-datasource": "nios_dns_record_ptr",
                "x-sdk-default-ext-attrs": true,
                "x-sdk-post-function-call": [
                    "Ipv4addr"
                ],
                "x-tf-function-call": true
            }
        },
        "/record:ptr/{reference}": {
            "get": {
                "tags": [
                    "record_ptr"
                ],
                "summary": "Get a specific record:ptr object",
                "description": "Returns a specific record:ptr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ptr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordPtrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_ptr"
                ],
                "summary": "Update a record:ptr object",
                "description": "Updates a specific record:ptr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ptr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordPtr"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordPtrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_ptr"
                ],
                "summary": "Delete a record:ptr object",
                "description": "Deletes a specific record:ptr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ptr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:srv": {
            "get": {
                "tags": [
                    "record_srv"
                ],
                "summary": "Retrieve record:srv objects",
                "description": "Returns a list of record:srv objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_srv"
                ],
                "summary": "Create a record:srv object",
                "description": "Creates a new record:srv object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordSrv"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_srv",
                "x-tf-datasource": "nios_dns_record_srv",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:srv/{reference}": {
            "get": {
                "tags": [
                    "record_srv"
                ],
                "summary": "Get a specific record:srv object",
                "description": "Returns a specific record:srv object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:srv object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_srv"
                ],
                "summary": "Update a record:srv object",
                "description": "Updates a specific record:srv object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:srv object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordSrv"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_srv"
                ],
                "summary": "Delete a record:srv object",
                "description": "Deletes a specific record:srv object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:srv object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:ns": {
            "get": {
                "tags": [
                    "record_ns"
                ],
                "summary": "Retrieve record:ns objects",
                "description": "Returns a list of record:ns objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordNsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_ns"
                ],
                "summary": "Create a record:ns object",
                "description": "Creates a new record:ns object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordNs"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordNsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_ns",
                "x-tf-datasource": "nios_dns_record_ns"
            }
        },
        "/record:ns/{reference}": {
            "get": {
                "tags": [
                    "record_ns"
                ],
                "summary": "Get a specific record:ns object",
                "description": "Returns a specific record:ns object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ns object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordNsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_ns"
                ],
                "summary": "Update a record:ns object",
                "description": "Updates a specific record:ns object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ns object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordNs"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordNsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "record_ns"
                ],
                "summary": "Delete a record:ns object",
                "description": "Deletes a specific record:ns object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ns object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:host": {
            "get": {
                "tags": [
                    "record_host"
                ],
                "summary": "Retrieve record:host objects",
                "description": "Returns a list of record:host objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordHostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_host"
                ],
                "summary": "Create a record:host object",
                "description": "Creates a new record:host object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordHost"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordHostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_host",
                "x-tf-datasource": "nios_dns_record_host",
                "x-sdk-default-ext-attrs": true,
                "x-sdk-post-function-call": [
                    "Ipv4addr"
                ],
                "x-tf-function-call": true
            }
        },
        "/record:host/{reference}": {
            "get": {
                "tags": [
                    "record_host"
                ],
                "summary": "Get a specific record:host object",
                "description": "Returns a specific record:host object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:host object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordHostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_host"
                ],
                "summary": "Update a record:host object",
                "description": "Updates a specific record:host object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:host object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordHost"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordHostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_host"
                ],
                "summary": "Delete a record:host object",
                "description": "Deletes a specific record:host object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:host object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:dname": {
            "get": {
                "tags": [
                    "record_dname"
                ],
                "summary": "Retrieve record:dname objects",
                "description": "Returns a list of record:dname objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordDnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_dname"
                ],
                "summary": "Create a record:dname object",
                "description": "Creates a new record:dname object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordDname"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordDnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_dname",
                "x-tf-datasource": "nios_dns_record_dname",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:dname/{reference}": {
            "get": {
                "tags": [
                    "record_dname"
                ],
                "summary": "Get a specific record:dname object",
                "description": "Returns a specific record:dname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordDnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_dname"
                ],
                "summary": "Update a record:dname object",
                "description": "Updates a specific record:dname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordDname"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordDnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_dname"
                ],
                "summary": "Delete a record:dname object",
                "description": "Deletes a specific record:dname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:naptr": {
            "get": {
                "tags": [
                    "record_naptr"
                ],
                "summary": "Retrieve record:naptr objects",
                "description": "Returns a list of record:naptr objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordNaptrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_naptr"
                ],
                "summary": "Create a record:naptr object",
                "description": "Creates a new record:naptr object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordNaptr"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordNaptrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_naptr",
                "x-tf-datasource": "nios_dns_record_naptr",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:naptr/{reference}": {
            "get": {
                "tags": [
                    "record_naptr"
                ],
                "summary": "Get a specific record:naptr object",
                "description": "Returns a specific record:naptr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:naptr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordNaptrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_naptr"
                ],
                "summary": "Update a record:naptr object",
                "description": "Updates a specific record:naptr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:naptr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordNaptr"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordNaptrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_naptr"
                ],
                "summary": "Delete a record:naptr object",
                "description": "Deletes a specific record:naptr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:naptr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:tlsa": {
            "get": {
                "tags": [
                    "record_tlsa"
                ],
                "summary": "Retrieve record:tlsa objects",
                "description": "Returns a list of record:tlsa objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordTlsaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_tlsa"
                ],
                "summary": "Create a record:tlsa object",
                "description": "Creates a new record:tlsa object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordTlsa"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordTlsaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_tlsa",
                "x-tf-datasource": "nios_dns_record_tlsa",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:tlsa/{reference}": {
            "get": {
                "tags": [
                    "record_tlsa"
                ],
                "summary": "Get a specific record:tlsa object",
                "description": "Returns a specific record:tlsa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:tlsa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordTlsaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_tlsa"
                ],
                "summary": "Update a record:tlsa object",
                "description": "Updates a specific record:tlsa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:tlsa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordTlsa"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordTlsaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_tlsa"
                ],
                "summary": "Delete a record:tlsa object",
                "description": "Deletes a specific record:tlsa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:tlsa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:caa": {
            "get": {
                "tags": [
                    "record_caa"
                ],
                "summary": "Retrieve record:caa objects",
                "description": "Returns a list of record:caa objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordCaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_caa"
                ],
                "summary": "Create a record:caa object",
                "description": "Creates a new record:caa object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordCaa"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordCaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_caa",
                "x-tf-datasource": "nios_dns_record_caa",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:caa/{reference}": {
            "get": {
                "tags": [
                    "record_caa"
                ],
                "summary": "Get a specific record:caa object",
                "description": "Returns a specific record:caa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:caa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordCaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_caa"
                ],
                "summary": "Update a record:caa object",
                "description": "Updates a specific record:caa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:caa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordCaa"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordCaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_caa"
                ],
                "summary": "Delete a record:caa object",
                "description": "Deletes a specific record:caa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:caa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:dhcid": {
            "get": {
                "tags": [
                    "record_dhcid"
                ],
                "summary": "Retrieve record:dhcid objects",
                "description": "Returns a list of record:dhcid objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordDhcidResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:dhcid/{reference}": {
            "get": {
                "tags": [
                    "record_dhcid"
                ],
                "summary": "Get a specific record:dhcid object",
                "description": "Returns a specific record:dhcid object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dhcid object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordDhcidResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "record_dhcid"
                ],
                "summary": "Delete a record:dhcid object",
                "description": "Deletes a specific record:dhcid object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dhcid object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:dnskey": {
            "get": {
                "tags": [
                    "record_dnskey"
                ],
                "summary": "Retrieve record:dnskey objects",
                "description": "Returns a list of record:dnskey objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordDnskeyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:dnskey/{reference}": {
            "get": {
                "tags": [
                    "record_dnskey"
                ],
                "summary": "Get a specific record:dnskey object",
                "description": "Returns a specific record:dnskey object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dnskey object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordDnskeyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:ds": {
            "get": {
                "tags": [
                    "record_ds"
                ],
                "summary": "Retrieve record:ds objects",
                "description": "Returns a list of record:ds objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordDsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:ds/{reference}": {
            "get": {
                "tags": [
                    "record_ds"
                ],
                "summary": "Get a specific record:ds object",
                "description": "Returns a specific record:ds object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ds object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordDsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "record_ds"
                ],
                "summary": "Delete a record:ds object",
                "description": "Deletes a specific record:ds object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:ds object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:nsec": {
            "get": {
                "tags": [
                    "record_nsec"
                ],
                "summary": "Retrieve record:nsec objects",
                "description": "Returns a list of record:nsec objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordNsecResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:nsec/{reference}": {
            "get": {
                "tags": [
                    "record_nsec"
                ],
                "summary": "Get a specific record:nsec object",
                "description": "Returns a specific record:nsec object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:nsec object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordNsecResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:nsec3": {
            "get": {
                "tags": [
                    "record_nsec3"
                ],
                "summary": "Retrieve record:nsec3 objects",
                "description": "Returns a list of record:nsec3 objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordNsec3Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:nsec3/{reference}": {
            "get": {
                "tags": [
                    "record_nsec3"
                ],
                "summary": "Get a specific record:nsec3 object",
                "description": "Returns a specific record:nsec3 object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:nsec3 object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordNsec3Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:nsec3param": {
            "get": {
                "tags": [
                    "record_nsec3param"
                ],
                "summary": "Retrieve record:nsec3param objects",
                "description": "Returns a list of record:nsec3param objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordNsec3paramResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:nsec3param/{reference}": {
            "get": {
                "tags": [
                    "record_nsec3param"
                ],
                "summary": "Get a specific record:nsec3param object",
                "description": "Returns a specific record:nsec3param object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:nsec3param object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordNsec3paramResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:rrsig": {
            "get": {
                "tags": [
                    "record_rrsig"
                ],
                "summary": "Retrieve record:rrsig objects",
                "description": "Returns a list of record:rrsig objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordRrsigResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:rrsig/{reference}": {
            "get": {
                "tags": [
                    "record_rrsig"
                ],
                "summary": "Get a specific record:rrsig object",
                "description": "Returns a specific record:rrsig object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:rrsig object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordRrsigResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:unknown": {
            "get": {
                "tags": [
                    "record_unknown"
                ],
                "summary": "Retrieve record:unknown objects",
                "description": "Returns a list of record:unknown objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordUnknownResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "record_unknown"
                ],
                "summary": "Create a record:unknown object",
                "description": "Creates a new record:unknown object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordUnknown"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordUnknownResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_record_unknown",
                "x-tf-datasource": "nios_dns_record_unknown",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/record:unknown/{reference}": {
            "get": {
                "tags": [
                    "record_unknown"
                ],
                "summary": "Get a specific record:unknown object",
                "description": "Returns a specific record:unknown object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:unknown object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordUnknownResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_unknown"
                ],
                "summary": "Update a record:unknown object",
                "description": "Updates a specific record:unknown object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:unknown object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordUnknown"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordUnknownResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "record_unknown"
                ],
                "summary": "Delete a record:unknown object",
                "description": "Deletes a specific record:unknown object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:unknown object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:host_ipv4addr": {
            "get": {
                "tags": [
                    "record_host_ipv4addr"
                ],
                "summary": "Retrieve record:host_ipv4addr objects",
                "description": "Returns a list of record:host_ipv4addr objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordHostIpv4addrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:host_ipv4addr/{reference}": {
            "get": {
                "tags": [
                    "record_host_ipv4addr"
                ],
                "summary": "Get a specific record:host_ipv4addr object",
                "description": "Returns a specific record:host_ipv4addr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:host_ipv4addr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordHostIpv4addrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_host_ipv4addr"
                ],
                "summary": "Update a record:host_ipv4addr object",
                "description": "Updates a specific record:host_ipv4addr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:host_ipv4addr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordHostIpv4addr"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordHostIpv4addrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:host_ipv6addr": {
            "get": {
                "tags": [
                    "record_host_ipv6addr"
                ],
                "summary": "Retrieve record:host_ipv6addr objects",
                "description": "Returns a list of record:host_ipv6addr objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordHostIpv6addrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:host_ipv6addr/{reference}": {
            "get": {
                "tags": [
                    "record_host_ipv6addr"
                ],
                "summary": "Get a specific record:host_ipv6addr object",
                "description": "Returns a specific record:host_ipv6addr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:host_ipv6addr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordHostIpv6addrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_host_ipv6addr"
                ],
                "summary": "Update a record:host_ipv6addr object",
                "description": "Updates a specific record:host_ipv6addr object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:host_ipv6addr object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordHostIpv6addr"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordHostIpv6addrResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:dtclbdn": {
            "get": {
                "tags": [
                    "record_dtclbdn"
                ],
                "summary": "Retrieve record:dtclbdn objects",
                "description": "Returns a list of record:dtclbdn objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordDtclbdnResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/record:dtclbdn/{reference}": {
            "get": {
                "tags": [
                    "record_dtclbdn"
                ],
                "summary": "Get a specific record:dtclbdn object",
                "description": "Returns a specific record:dtclbdn object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dtclbdn object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordDtclbdnResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "record_dtclbdn"
                ],
                "summary": "Update a record:dtclbdn object",
                "description": "Updates a specific record:dtclbdn object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the record:dtclbdn object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordDtclbdn"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordDtclbdnResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            }
        },
        "/zone_auth": {
            "get": {
                "tags": [
                    "zone_auth"
                ],
                "summary": "Retrieve zone_auth objects",
                "description": "Returns a list of zone_auth objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListZoneAuthResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "zone_auth"
                ],
                "summary": "Create a zone_auth object",
                "description": "Creates a new zone_auth object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneAuth"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateZoneAuthResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_zone_auth",
                "x-tf-datasource": "nios_dns_zone_auth",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/zone_auth/{reference}": {
            "get": {
                "tags": [
                    "zone_auth"
                ],
                "summary": "Get a specific zone_auth object",
                "description": "Returns a specific zone_auth object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_auth object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetZoneAuthResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "zone_auth"
                ],
                "summary": "Update a zone_auth object",
                "description": "Updates a specific zone_auth object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_auth object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneAuth"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateZoneAuthResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "zone_auth"
                ],
                "summary": "Delete a zone_auth object",
                "description": "Deletes a specific zone_auth object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_auth object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "remove_subzones",
                        "in": "query",
                        "description": "Remove subzones delete option. Determines whether all child objects should be removed alongside with the parent zone or child objects should be assigned to another parental zone. By default child objects are deleted with the parent zone.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/zone_delegated": {
            "get": {
                "tags": [
                    "zone_delegated"
                ],
                "summary": "Retrieve zone_delegated objects",
                "description": "Returns a list of zone_delegated objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListZoneDelegatedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "zone_delegated"
                ],
                "summary": "Create a zone_delegated object",
                "description": "Creates a new zone_delegated object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneDelegated"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateZoneDelegatedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_zone_delegated",
                "x-tf-datasource": "nios_dns_zone_delegated",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/zone_delegated/{reference}": {
            "get": {
                "tags": [
                    "zone_delegated"
                ],
                "summary": "Get a specific zone_delegated object",
                "description": "Returns a specific zone_delegated object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_delegated object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetZoneDelegatedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "zone_delegated"
                ],
                "summary": "Update a zone_delegated object",
                "description": "Updates a specific zone_delegated object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_delegated object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneDelegated"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateZoneDelegatedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "zone_delegated"
                ],
                "summary": "Delete a zone_delegated object",
                "description": "Deletes a specific zone_delegated object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_delegated object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/zone_forward": {
            "get": {
                "tags": [
                    "zone_forward"
                ],
                "summary": "Retrieve zone_forward objects",
                "description": "Returns a list of zone_forward objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListZoneForwardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "zone_forward"
                ],
                "summary": "Create a zone_forward object",
                "description": "Creates a new zone_forward object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneForward"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateZoneForwardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_zone_forward",
                "x-tf-datasource": "nios_dns_zone_forward",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/zone_forward/{reference}": {
            "get": {
                "tags": [
                    "zone_forward"
                ],
                "summary": "Get a specific zone_forward object",
                "description": "Returns a specific zone_forward object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_forward object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetZoneForwardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "zone_forward"
                ],
                "summary": "Update a zone_forward object",
                "description": "Updates a specific zone_forward object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_forward object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneForward"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateZoneForwardResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "zone_forward"
                ],
                "summary": "Delete a zone_forward object",
                "description": "Deletes a specific zone_forward object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_forward object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/zone_stub": {
            "get": {
                "tags": [
                    "zone_stub"
                ],
                "summary": "Retrieve zone_stub objects",
                "description": "Returns a list of zone_stub objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListZoneStubResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "zone_stub"
                ],
                "summary": "Create a zone_stub object",
                "description": "Creates a new zone_stub object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneStub"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateZoneStubResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_zone_stub",
                "x-tf-datasource": "nios_dns_zone_stub",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/zone_stub/{reference}": {
            "get": {
                "tags": [
                    "zone_stub"
                ],
                "summary": "Get a specific zone_stub object",
                "description": "Returns a specific zone_stub object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_stub object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetZoneStubResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "zone_stub"
                ],
                "summary": "Update a zone_stub object",
                "description": "Updates a specific zone_stub object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_stub object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneStub"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateZoneStubResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "zone_stub"
                ],
                "summary": "Delete a zone_stub object",
                "description": "Deletes a specific zone_stub object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_stub object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/zone_rp": {
            "get": {
                "tags": [
                    "zone_rp"
                ],
                "summary": "Retrieve zone_rp objects",
                "description": "Returns a list of zone_rp objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListZoneRpResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "zone_rp"
                ],
                "summary": "Create a zone_rp object",
                "description": "Creates a new zone_rp object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneRp"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateZoneRpResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_zone_rp",
                "x-tf-datasource": "nios_dns_zone_rp",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/zone_rp/{reference}": {
            "get": {
                "tags": [
                    "zone_rp"
                ],
                "summary": "Get a specific zone_rp object",
                "description": "Returns a specific zone_rp object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_rp object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetZoneRpResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "zone_rp"
                ],
                "summary": "Update a zone_rp object",
                "description": "Updates a specific zone_rp object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_rp object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ZoneRp"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateZoneRpResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "zone_rp"
                ],
                "summary": "Delete a zone_rp object",
                "description": "Deletes a specific zone_rp object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_rp object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/zone_auth_discrepancy": {
            "get": {
                "tags": [
                    "zone_auth_discrepancy"
                ],
                "summary": "Retrieve zone_auth_discrepancy objects",
                "description": "Returns a list of zone_auth_discrepancy objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListZoneAuthDiscrepancyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/zone_auth_discrepancy/{reference}": {
            "get": {
                "tags": [
                    "zone_auth_discrepancy"
                ],
                "summary": "Get a specific zone_auth_discrepancy object",
                "description": "Returns a specific zone_auth_discrepancy object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the zone_auth_discrepancy object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetZoneAuthDiscrepancyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/allrecords": {
            "get": {
                "tags": [
                    "allrecords"
                ],
                "summary": "Retrieve allrecords objects",
                "description": "Returns a list of allrecords objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAllrecordsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/allrecords/{reference}": {
            "get": {
                "tags": [
                    "allrecords"
                ],
                "summary": "Get a specific allrecords object",
                "description": "Returns a specific allrecords object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the allrecords object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllrecordsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/recordnamepolicy": {
            "get": {
                "tags": [
                    "recordnamepolicy"
                ],
                "summary": "Retrieve recordnamepolicy objects",
                "description": "Returns a list of recordnamepolicy objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecordnamepolicyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "recordnamepolicy"
                ],
                "summary": "Create a recordnamepolicy object",
                "description": "Creates a new recordnamepolicy object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Recordnamepolicy"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRecordnamepolicyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_recordnamepolicy",
                "x-tf-datasource": "nios_dns_recordnamepolicy"
            }
        },
        "/recordnamepolicy/{reference}": {
            "get": {
                "tags": [
                    "recordnamepolicy"
                ],
                "summary": "Get a specific recordnamepolicy object",
                "description": "Returns a specific recordnamepolicy object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the recordnamepolicy object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecordnamepolicyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "recordnamepolicy"
                ],
                "summary": "Update a recordnamepolicy object",
                "description": "Updates a specific recordnamepolicy object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the recordnamepolicy object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Recordnamepolicy"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecordnamepolicyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "recordnamepolicy"
                ],
                "summary": "Delete a recordnamepolicy object",
                "description": "Deletes a specific recordnamepolicy object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the recordnamepolicy object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/dns64group": {
            "get": {
                "tags": [
                    "dns64group"
                ],
                "summary": "Retrieve dns64group objects",
                "description": "Returns a list of dns64group objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListDns64groupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "dns64group"
                ],
                "summary": "Create a dns64group object",
                "description": "Creates a new dns64group object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dns64group"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateDns64groupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_dns64group",
                "x-tf-datasource": "nios_dns_dns64group",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/dns64group/{reference}": {
            "get": {
                "tags": [
                    "dns64group"
                ],
                "summary": "Get a specific dns64group object",
                "description": "Returns a specific dns64group object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the dns64group object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDns64groupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "dns64group"
                ],
                "summary": "Update a dns64group object",
                "description": "Updates a specific dns64group object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the dns64group object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Dns64group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDns64groupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "dns64group"
                ],
                "summary": "Delete a dns64group object",
                "description": "Deletes a specific dns64group object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the dns64group object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/allnsgroup": {
            "get": {
                "tags": [
                    "allnsgroup"
                ],
                "summary": "Retrieve allnsgroup objects",
                "description": "Returns a list of allnsgroup objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAllnsgroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/allnsgroup/{reference}": {
            "get": {
                "tags": [
                    "allnsgroup"
                ],
                "summary": "Get a specific allnsgroup object",
                "description": "Returns a specific allnsgroup object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the allnsgroup object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllnsgroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/ddns:principalcluster": {
            "get": {
                "tags": [
                    "ddns_principalcluster"
                ],
                "summary": "Retrieve ddns:principalcluster objects",
                "description": "Returns a list of ddns:principalcluster objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListDdnsPrincipalclusterResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ddns_principalcluster"
                ],
                "summary": "Create a ddns:principalcluster object",
                "description": "Creates a new ddns:principalcluster object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DdnsPrincipalcluster"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateDdnsPrincipalclusterResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_ddns_principalcluster",
                "x-tf-datasource": "nios_dns_ddns_principalcluster"
            }
        },
        "/ddns:principalcluster/{reference}": {
            "get": {
                "tags": [
                    "ddns_principalcluster"
                ],
                "summary": "Get a specific ddns:principalcluster object",
                "description": "Returns a specific ddns:principalcluster object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the ddns:principalcluster object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDdnsPrincipalclusterResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ddns_principalcluster"
                ],
                "summary": "Update a ddns:principalcluster object",
                "description": "Updates a specific ddns:principalcluster object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the ddns:principalcluster object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DdnsPrincipalcluster"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDdnsPrincipalclusterResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ddns_principalcluster"
                ],
                "summary": "Delete a ddns:principalcluster object",
                "description": "Deletes a specific ddns:principalcluster object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the ddns:principalcluster object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/ddns:principalcluster:group": {
            "get": {
                "tags": [
                    "ddns_principalcluster_group"
                ],
                "summary": "Retrieve ddns:principalcluster:group objects",
                "description": "Returns a list of ddns:principalcluster:group objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListDdnsPrincipalclusterGroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ddns_principalcluster_group"
                ],
                "summary": "Create a ddns:principalcluster:group object",
                "description": "Creates a new ddns:principalcluster:group object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateDdnsPrincipalclusterGroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_ddns_principalcluster_group",
                "x-tf-datasource": "nios_dns_ddns_principalcluster_group"
            }
        },
        "/ddns:principalcluster:group/{reference}": {
            "get": {
                "tags": [
                    "ddns_principalcluster_group"
                ],
                "summary": "Get a specific ddns:principalcluster:group object",
                "description": "Returns a specific ddns:principalcluster:group object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the ddns:principalcluster:group object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDdnsPrincipalclusterGroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ddns_principalcluster_group"
                ],
                "summary": "Update a ddns:principalcluster:group object",
                "description": "Updates a specific ddns:principalcluster:group object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the ddns:principalcluster:group object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDdnsPrincipalclusterGroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ddns_principalcluster_group"
                ],
                "summary": "Delete a ddns:principalcluster:group object",
                "description": "Deletes a specific ddns:principalcluster:group object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the ddns:principalcluster:group object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/orderedresponsepolicyzones": {
            "get": {
                "tags": [
                    "orderedresponsepolicyzones"
                ],
                "summary": "Retrieve orderedresponsepolicyzones objects",
                "description": "Returns a list of orderedresponsepolicyzones objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListOrderedresponsepolicyzonesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/orderedresponsepolicyzones/{reference}": {
            "get": {
                "tags": [
                    "orderedresponsepolicyzones"
                ],
                "summary": "Get a specific orderedresponsepolicyzones object",
                "description": "Returns a specific orderedresponsepolicyzones object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the orderedresponsepolicyzones object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrderedresponsepolicyzonesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "orderedresponsepolicyzones"
                ],
                "summary": "Update a orderedresponsepolicyzones object",
                "description": "Updates a specific orderedresponsepolicyzones object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the orderedresponsepolicyzones object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Orderedresponsepolicyzones"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateOrderedresponsepolicyzonesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/sharedrecord:a": {
            "get": {
                "tags": [
                    "sharedrecord_a"
                ],
                "summary": "Retrieve sharedrecord:a objects",
                "description": "Returns a list of sharedrecord:a objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSharedrecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "sharedrecord_a"
                ],
                "summary": "Create a sharedrecord:a object",
                "description": "Creates a new sharedrecord:a object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordA"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSharedrecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_sharedrecord_a",
                "x-tf-datasource": "nios_dns_sharedrecord_a",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/sharedrecord:a/{reference}": {
            "get": {
                "tags": [
                    "sharedrecord_a"
                ],
                "summary": "Get a specific sharedrecord:a object",
                "description": "Returns a specific sharedrecord:a object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:a object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharedrecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "sharedrecord_a"
                ],
                "summary": "Update a sharedrecord:a object",
                "description": "Updates a specific sharedrecord:a object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:a object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordA"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSharedrecordAResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "sharedrecord_a"
                ],
                "summary": "Delete a sharedrecord:a object",
                "description": "Deletes a specific sharedrecord:a object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:a object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/sharedrecord:aaaa": {
            "get": {
                "tags": [
                    "sharedrecord_aaaa"
                ],
                "summary": "Retrieve sharedrecord:aaaa objects",
                "description": "Returns a list of sharedrecord:aaaa objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSharedrecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "sharedrecord_aaaa"
                ],
                "summary": "Create a sharedrecord:aaaa object",
                "description": "Creates a new sharedrecord:aaaa object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordAaaa"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSharedrecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_sharedrecord_aaaa",
                "x-tf-datasource": "nios_dns_sharedrecord_aaaa",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/sharedrecord:aaaa/{reference}": {
            "get": {
                "tags": [
                    "sharedrecord_aaaa"
                ],
                "summary": "Get a specific sharedrecord:aaaa object",
                "description": "Returns a specific sharedrecord:aaaa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:aaaa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharedrecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "sharedrecord_aaaa"
                ],
                "summary": "Update a sharedrecord:aaaa object",
                "description": "Updates a specific sharedrecord:aaaa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:aaaa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordAaaa"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSharedrecordAaaaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "sharedrecord_aaaa"
                ],
                "summary": "Delete a sharedrecord:aaaa object",
                "description": "Deletes a specific sharedrecord:aaaa object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:aaaa object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/sharedrecord:cname": {
            "get": {
                "tags": [
                    "sharedrecord_cname"
                ],
                "summary": "Retrieve sharedrecord:cname objects",
                "description": "Returns a list of sharedrecord:cname objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSharedrecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "sharedrecord_cname"
                ],
                "summary": "Create a sharedrecord:cname object",
                "description": "Creates a new sharedrecord:cname object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordCname"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSharedrecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_sharedrecord_cname",
                "x-tf-datasource": "nios_dns_sharedrecord_cname",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/sharedrecord:cname/{reference}": {
            "get": {
                "tags": [
                    "sharedrecord_cname"
                ],
                "summary": "Get a specific sharedrecord:cname object",
                "description": "Returns a specific sharedrecord:cname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:cname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharedrecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "sharedrecord_cname"
                ],
                "summary": "Update a sharedrecord:cname object",
                "description": "Updates a specific sharedrecord:cname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:cname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordCname"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSharedrecordCnameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "sharedrecord_cname"
                ],
                "summary": "Delete a sharedrecord:cname object",
                "description": "Deletes a specific sharedrecord:cname object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:cname object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/sharedrecord:mx": {
            "get": {
                "tags": [
                    "sharedrecord_mx"
                ],
                "summary": "Retrieve sharedrecord:mx objects",
                "description": "Returns a list of sharedrecord:mx objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSharedrecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "sharedrecord_mx"
                ],
                "summary": "Create a sharedrecord:mx object",
                "description": "Creates a new sharedrecord:mx object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordMx"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSharedrecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_sharedrecord_mx",
                "x-tf-datasource": "nios_dns_sharedrecord_mx",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/sharedrecord:mx/{reference}": {
            "get": {
                "tags": [
                    "sharedrecord_mx"
                ],
                "summary": "Get a specific sharedrecord:mx object",
                "description": "Returns a specific sharedrecord:mx object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:mx object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharedrecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "sharedrecord_mx"
                ],
                "summary": "Update a sharedrecord:mx object",
                "description": "Updates a specific sharedrecord:mx object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:mx object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordMx"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSharedrecordMxResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "sharedrecord_mx"
                ],
                "summary": "Delete a sharedrecord:mx object",
                "description": "Deletes a specific sharedrecord:mx object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:mx object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/sharedrecord:srv": {
            "get": {
                "tags": [
                    "sharedrecord_srv"
                ],
                "summary": "Retrieve sharedrecord:srv objects",
                "description": "Returns a list of sharedrecord:srv objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSharedrecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "sharedrecord_srv"
                ],
                "summary": "Create a sharedrecord:srv object",
                "description": "Creates a new sharedrecord:srv object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordSrv"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSharedrecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_sharedrecord_srv",
                "x-tf-datasource": "nios_dns_sharedrecord_srv",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/sharedrecord:srv/{reference}": {
            "get": {
                "tags": [
                    "sharedrecord_srv"
                ],
                "summary": "Get a specific sharedrecord:srv object",
                "description": "Returns a specific sharedrecord:srv object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:srv object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharedrecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "sharedrecord_srv"
                ],
                "summary": "Update a sharedrecord:srv object",
                "description": "Updates a specific sharedrecord:srv object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:srv object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordSrv"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSharedrecordSrvResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "sharedrecord_srv"
                ],
                "summary": "Delete a sharedrecord:srv object",
                "description": "Deletes a specific sharedrecord:srv object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:srv object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/sharedrecord:txt": {
            "get": {
                "tags": [
                    "sharedrecord_txt"
                ],
                "summary": "Retrieve sharedrecord:txt objects",
                "description": "Returns a list of sharedrecord:txt objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSharedrecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "sharedrecord_txt"
                ],
                "summary": "Create a sharedrecord:txt object",
                "description": "Creates a new sharedrecord:txt object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordTxt"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSharedrecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_sharedrecord_txt",
                "x-tf-datasource": "nios_dns_sharedrecord_txt",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/sharedrecord:txt/{reference}": {
            "get": {
                "tags": [
                    "sharedrecord_txt"
                ],
                "summary": "Get a specific sharedrecord:txt object",
                "description": "Returns a specific sharedrecord:txt object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:txt object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharedrecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "sharedrecord_txt"
                ],
                "summary": "Update a sharedrecord:txt object",
                "description": "Updates a specific sharedrecord:txt object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:txt object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SharedrecordTxt"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSharedrecordTxtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "sharedrecord_txt"
                ],
                "summary": "Delete a sharedrecord:txt object",
                "description": "Deletes a specific sharedrecord:txt object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecord:txt object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/sharedrecordgroup": {
            "get": {
                "tags": [
                    "sharedrecordgroup"
                ],
                "summary": "Retrieve sharedrecordgroup objects",
                "description": "Returns a list of sharedrecordgroup objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSharedrecordgroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "sharedrecordgroup"
                ],
                "summary": "Create a sharedrecordgroup object",
                "description": "Creates a new sharedrecordgroup object",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sharedrecordgroup"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Object created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSharedrecordgroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-tf-resource": "nios_dns_sharedrecordgroup",
                "x-tf-datasource": "nios_dns_sharedrecordgroup",
                "x-sdk-default-ext-attrs": true
            }
        },
        "/sharedrecordgroup/{reference}": {
            "get": {
                "tags": [
                    "sharedrecordgroup"
                ],
                "summary": "Get a specific sharedrecordgroup object",
                "description": "Returns a specific sharedrecordgroup object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecordgroup object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSharedrecordgroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "sharedrecordgroup"
                ],
                "summary": "Update a sharedrecordgroup object",
                "description": "Updates a specific sharedrecordgroup object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecordgroup object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Sharedrecordgroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSharedrecordgroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            },
            "delete": {
                "tags": [
                    "sharedrecordgroup"
                ],
                "summary": "Delete a sharedrecordgroup object",
                "description": "Deletes a specific sharedrecordgroup object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the sharedrecordgroup object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/view": {
            "get": {
                "tags": [
                    "view"
                ],
                "summary": "Retrieve view objects",
                "description": "Returns a list of view objects matching the search criteria",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/MaxResults"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    },
                    {
                        "$ref": "#/components/parameters/Paging"
                    },
                    {
                        "$ref": "#/components/parameters/PageId"
                    },
                    {
                        "$ref": "#/components/parameters/filters"
                    },
                    {
                        "$ref": "#/components/parameters/ExtAttrFilters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListViewResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/view/{reference}": {
            "get": {
                "tags": [
                    "view"
                ],
                "summary": "Get a specific view object",
                "description": "Returns a specific view object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the view object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetViewResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "view"
                ],
                "summary": "Update a view object",
                "description": "Updates a specific view object by reference",
                "parameters": [
                    {
                        "name": "reference",
                        "in": "path",
                        "description": "Reference of the view object",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFields"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnFieldsPlus"
                    },
                    {
                        "$ref": "#/components/parameters/ReturnAsObject"
                    }
                ],
                "requestBody": {
                    "description": "Object data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/View"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Object updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateViewResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ],
                "x-sdk-default-ext-attrs": true
            }
        }
    },
    "components": {
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "scheme": "basic"
            }
        },
        "parameters": {
            "ReturnFields": {
                "name": "_return_fields",
                "in": "query",
                "description": "Enter the field names followed by comma",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ReturnFieldsPlus": {
                "name": "_return_fields+",
                "in": "query",
                "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "MaxResults": {
                "name": "_max_results",
                "in": "query",
                "description": "Enter the number of results to be fetched",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                }
            },
            "ReturnAsObject": {
                "name": "_return_as_object",
                "in": "query",
                "description": "Select 1 if result is required as an object",
                "required": false,
                "schema": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            },
            "Paging": {
                "name": "_paging",
                "in": "query",
                "description": "Control paging of results",
                "required": false,
                "schema": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            },
            "PageId": {
                "name": "_page_id",
                "in": "query",
                "description": "Page id for retrieving next page of results",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ProxySearch": {
                "name": "_proxy_search",
                "in": "query",
                "description": "Search Grid members for data",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "Schema": {
                "name": "_schema",
                "in": "query",
                "description": "Return schema for this object type",
                "required": false,
                "schema": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            },
            "SchemaVersion": {
                "name": "_schema_version",
                "in": "query",
                "description": "Schema version to use",
                "required": false,
                "schema": {
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                }
            },
            "GetDoc": {
                "name": "_get_doc",
                "in": "query",
                "description": "Return documentation with schema",
                "required": false,
                "schema": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            },
            "SchemaSearchable": {
                "name": "_schema_searchable",
                "in": "query",
                "description": "Return searchable fields with schema",
                "required": false,
                "schema": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                }
            },
            "Inheritance": {
                "name": "_inheritance",
                "in": "query",
                "description": "If this option is set to True, fields which support inheritance, will display data properly.",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "filters": {
                "name": "filters",
                "in": "query",
                "schema": {
                    "type": "object",
                    "additionalProperties": true
                },
                "style": "form",
                "explode": false
            },
            "ExtAttrFilters": {
                "name": "extattrfilter",
                "in": "query",
                "schema": {
                    "type": "object",
                    "additionalProperties": true
                },
                "style": "form",
                "explode": false
            },
            "Method": {
                "name": "_method",
                "in": "query",
                "description": "Enter the method type for the request",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "Body": {
                "name": "body",
                "in": "query",
                "schema": {
                    "type": "object"
                }
            }
        },
        "schemas": {
            "ExtAttrs": {
                "type": "object",
                "properties": {
                    "value": {
                        "description": "The value of the extensible attribute."
                    }
                },
                "required": [
                    "value"
                ],
                "description": "Extensible attributes associated with the object."
            },
            "RecordA": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordAAwsRte53RecordInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordACloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "discovered_data": {
                        "$ref": "#/components/schemas/RecordADiscoveredData"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for an A record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "ipv4addr": {
                        "description": "The IPv4 Address of the record.",
                        "oneOf": [
                            {
                                "type": "string",
                                "title": "network"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "_object_function": {
                                        "type": "string"
                                    },
                                    "_parameters": {
                                        "type": "object"
                                    },
                                    "_result_field": {
                                        "type": "string"
                                    },
                                    "_object": {
                                        "type": "string"
                                    },
                                    "_object_parameters": {
                                        "type": "object"
                                    }
                                }
                            }
                        ]
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "ms_ad_user_data": {
                        "$ref": "#/components/schemas/RecordAMsAdUserData"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for A record in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "remove_associated_ptr": {
                        "type": "boolean",
                        "description": "Delete option that indicates whether the associated PTR records should be removed while deleting the specified A record.",
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordAAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordACloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordacloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordacloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "RecordADiscoveredData": {
                "type": "object",
                "properties": {
                    "device_model": {
                        "type": "string",
                        "description": "The model name of the end device in the vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_model"
                    },
                    "device_port_name": {
                        "type": "string",
                        "description": "The system name of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_name"
                    },
                    "device_port_type": {
                        "type": "string",
                        "description": "The hardware type of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_type"
                    },
                    "device_type": {
                        "type": "string",
                        "description": "The type of end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_type"
                    },
                    "device_vendor": {
                        "type": "string",
                        "description": "The vendor name of the end host.",
                        "readOnly": true,
                        "example": "Example device_vendor"
                    },
                    "discovered_name": {
                        "type": "string",
                        "description": "The name of the network device associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example discovered_name"
                    },
                    "discoverer": {
                        "type": "string",
                        "description": "Specifies whether the IP address was discovered by a NetMRI or NIOS discovery process.",
                        "readOnly": true,
                        "example": "Example discoverer"
                    },
                    "duid": {
                        "type": "string",
                        "description": "For IPv6 address only. The DHCP unique identifier of the discovered host. This is an optional field, and data might not be included.",
                        "readOnly": true,
                        "example": "Example duid"
                    },
                    "first_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was first discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_no": {
                        "type": "integer",
                        "description": "The port redundant group number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_state": {
                        "type": "string",
                        "description": "The status for the IP address within port redundant group.",
                        "enum": [
                            "VIP",
                            "ACTIVE",
                            "STANDBY",
                            "NEGOTIATION"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_state"
                    },
                    "iprg_type": {
                        "type": "string",
                        "description": "The port redundant group type.",
                        "enum": [
                            "HSRP",
                            "VRRP"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_type"
                    },
                    "last_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was last discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "mac_address": {
                        "type": "string",
                        "description": "The discovered MAC address for the host. This is the unique identifier of a network device. The discovery acquires the MAC address for hosts that are located on the same network as the Grid member that is running the discovery. This can also be the MAC address of a virtual entity on a specified vSphere server.",
                        "readOnly": true,
                        "example": "Example mac_address"
                    },
                    "mgmt_ip_address": {
                        "type": "string",
                        "description": "The management IP address of the end host that has more than one IP.",
                        "readOnly": true,
                        "example": "Example mgmt_ip_address"
                    },
                    "netbios_name": {
                        "type": "string",
                        "description": "The name returned in the NetBIOS reply or the name you manually register for the discovered host.",
                        "readOnly": true,
                        "example": "Example netbios_name"
                    },
                    "network_component_description": {
                        "type": "string",
                        "description": "A textual description of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_description"
                    },
                    "network_component_ip": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_ip"
                    },
                    "network_component_model": {
                        "type": "string",
                        "description": "Model name of the switch port connected to the end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example network_component_model"
                    },
                    "network_component_name": {
                        "type": "string",
                        "description": "If a reverse lookup was successful for the IP address associated with this switch, the host name is displayed in this field.",
                        "readOnly": true,
                        "example": "Example network_component_name"
                    },
                    "network_component_port_description": {
                        "type": "string",
                        "description": "A textual description of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_description"
                    },
                    "network_component_port_name": {
                        "type": "string",
                        "description": "The name of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_name"
                    },
                    "network_component_port_number": {
                        "type": "string",
                        "description": "The number of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_number"
                    },
                    "network_component_type": {
                        "type": "string",
                        "description": "Identifies the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_type"
                    },
                    "network_component_vendor": {
                        "type": "string",
                        "description": "The vendor name of the switch port connected to the end host.",
                        "readOnly": true,
                        "example": "Example network_component_vendor"
                    },
                    "open_ports": {
                        "type": "string",
                        "description": "The list of opened ports on the IP address, represented as: \"TCP: 21,22,23 UDP: 137,139\". Limited to max total 1000 ports.",
                        "readOnly": true,
                        "example": "Example open_ports"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system of the detected host or virtual entity. The OS can be one of the following: * Microsoft for all discovered hosts that have a non-null value in the MAC addresses using the NetBIOS discovery method. * A value that a TCP discovery returns. * The OS of a virtual entity on a vSphere server.",
                        "readOnly": true,
                        "example": "Example os"
                    },
                    "port_duplex": {
                        "type": "string",
                        "description": "The negotiated or operational duplex setting of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_duplex"
                    },
                    "port_link_status": {
                        "type": "string",
                        "description": "The link status of the switch port connected to the end device. Indicates whether it is connected.",
                        "readOnly": true,
                        "example": "Example port_link_status"
                    },
                    "port_speed": {
                        "type": "string",
                        "description": "The interface speed, in Mbps, of the switch port.",
                        "readOnly": true,
                        "example": "Example port_speed"
                    },
                    "port_status": {
                        "type": "string",
                        "description": "The operational status of the switch port. Indicates whether the port is up or down.",
                        "readOnly": true,
                        "example": "Example port_status"
                    },
                    "port_type": {
                        "type": "string",
                        "description": "The type of switch port.",
                        "readOnly": true,
                        "example": "Example port_type"
                    },
                    "port_vlan_description": {
                        "type": "string",
                        "description": "The description of the VLAN of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_vlan_description"
                    },
                    "port_vlan_name": {
                        "type": "string",
                        "description": "The name of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_name"
                    },
                    "port_vlan_number": {
                        "type": "string",
                        "description": "The ID of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_number"
                    },
                    "v_adapter": {
                        "type": "string",
                        "description": "The name of the physical network adapter through which the virtual entity is connected to the appliance.",
                        "readOnly": true,
                        "example": "Example v_adapter"
                    },
                    "v_cluster": {
                        "type": "string",
                        "description": "The name of the VMware cluster to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_cluster"
                    },
                    "v_datacenter": {
                        "type": "string",
                        "description": "The name of the vSphere datacenter or container to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_datacenter"
                    },
                    "v_entity_name": {
                        "type": "string",
                        "description": "The name of the virtual entity.",
                        "readOnly": true,
                        "example": "Example v_entity_name"
                    },
                    "v_entity_type": {
                        "type": "string",
                        "description": "The virtual entity type. This can be blank or one of the following: Virtual Machine, Virtual Host, or Virtual Center. Virtual Center represents a VMware vCenter server.",
                        "readOnly": true,
                        "example": "Example v_entity_type"
                    },
                    "v_host": {
                        "type": "string",
                        "description": "The name of the VMware server on which the virtual entity was discovered.",
                        "readOnly": true,
                        "example": "Example v_host"
                    },
                    "v_switch": {
                        "type": "string",
                        "description": "The name of the switch to which the virtual entity is connected.",
                        "readOnly": true,
                        "example": "Example v_switch"
                    },
                    "vmi_name": {
                        "type": "string",
                        "description": "Name of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_name"
                    },
                    "vmi_id": {
                        "type": "string",
                        "description": "ID of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_id"
                    },
                    "vlan_port_group": {
                        "type": "string",
                        "description": "Port group which the virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vlan_port_group"
                    },
                    "vswitch_name": {
                        "type": "string",
                        "description": "Name of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_name"
                    },
                    "vswitch_id": {
                        "type": "string",
                        "description": "ID of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_id"
                    },
                    "vswitch_type": {
                        "type": "string",
                        "description": "Type of the virtual switch: standard or distributed.",
                        "enum": [
                            "Unknown",
                            "Standard",
                            "Distributed"
                        ],
                        "readOnly": true,
                        "example": "Example vswitch_type"
                    },
                    "vswitch_ipv6_enabled": {
                        "type": "boolean",
                        "description": "Indicates the virtual switch has IPV6 enabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "vport_name": {
                        "type": "string",
                        "description": "Name of the network adapter on the virtual switch connected with the virtual machine.",
                        "readOnly": true,
                        "example": "Example vport_name"
                    },
                    "vport_mac_address": {
                        "type": "string",
                        "description": "MAC address of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_mac_address"
                    },
                    "vport_link_status": {
                        "type": "string",
                        "description": "Link status of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_link_status"
                    },
                    "vport_conf_speed": {
                        "type": "string",
                        "description": "Configured speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_conf_speed"
                    },
                    "vport_conf_mode": {
                        "type": "string",
                        "description": "Configured mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_conf_mode"
                    },
                    "vport_speed": {
                        "type": "string",
                        "description": "Actual speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_speed"
                    },
                    "vport_mode": {
                        "type": "string",
                        "description": "Actual mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_mode"
                    },
                    "vswitch_segment_type": {
                        "type": "string",
                        "description": "Type of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_type"
                    },
                    "vswitch_segment_name": {
                        "type": "string",
                        "description": "Name of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_name"
                    },
                    "vswitch_segment_id": {
                        "type": "string",
                        "description": "ID of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_id"
                    },
                    "vswitch_segment_port_group": {
                        "type": "string",
                        "description": "Port group of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_port_group"
                    },
                    "vswitch_available_ports_count": {
                        "type": "integer",
                        "description": "Numer of available ports reported by the virtual switch on which the virtual machine/vport connected to.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vswitch_tep_type": {
                        "type": "string",
                        "description": "Type of virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_type"
                    },
                    "vswitch_tep_ip": {
                        "type": "string",
                        "description": "IP address of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_ip"
                    },
                    "vswitch_tep_port_group": {
                        "type": "string",
                        "description": "Port group of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_port_group"
                    },
                    "vswitch_tep_vlan": {
                        "type": "string",
                        "description": "VLAN of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_vlan"
                    },
                    "vswitch_tep_dhcp_server": {
                        "type": "string",
                        "description": "DHCP server of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_dhcp_server"
                    },
                    "vswitch_tep_multicast": {
                        "type": "string",
                        "description": "Muticast address of the virtual tunnel endpoint (VTEP) in the virtual swtich.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_multicast"
                    },
                    "vmhost_ip_address": {
                        "type": "string",
                        "description": "IP address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_ip_address"
                    },
                    "vmhost_name": {
                        "type": "string",
                        "description": "Name of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_name"
                    },
                    "vmhost_mac_address": {
                        "type": "string",
                        "description": "MAC address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_mac_address"
                    },
                    "vmhost_subnet_cidr": {
                        "type": "integer",
                        "description": "CIDR subnet of the physical node on which the virtual machine is hosted.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vmhost_nic_names": {
                        "type": "string",
                        "description": "List of all physical port names used by the virtual switch on the physical node on which the virtual machine is hosted. Represented as: \"eth1,eth2,eth3\".",
                        "readOnly": true,
                        "example": "Example vmhost_nic_names"
                    },
                    "vmi_tenant_id": {
                        "type": "string",
                        "description": "ID of the tenant which virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vmi_tenant_id"
                    },
                    "cmp_type": {
                        "type": "string",
                        "description": "If the IP is coming from a Cloud environment, the Cloud Management Platform type.",
                        "readOnly": true,
                        "example": "Example cmp_type"
                    },
                    "vmi_ip_type": {
                        "type": "string",
                        "description": "Discovered IP address type.",
                        "readOnly": true,
                        "example": "Example vmi_ip_type"
                    },
                    "vmi_private_address": {
                        "type": "string",
                        "description": "Private IP address of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_private_address"
                    },
                    "vmi_is_public_address": {
                        "type": "boolean",
                        "description": "Indicates whether the IP address is a public address.",
                        "readOnly": true,
                        "example": false
                    },
                    "cisco_ise_ssid": {
                        "type": "string",
                        "description": "The Cisco ISE SSID.",
                        "readOnly": true,
                        "example": "Example cisco_ise_ssid"
                    },
                    "cisco_ise_endpoint_profile": {
                        "type": "string",
                        "description": "The Endpoint Profile created in Cisco ISE.",
                        "readOnly": true,
                        "example": "Example cisco_ise_endpoint_profile"
                    },
                    "cisco_ise_session_state": {
                        "type": "string",
                        "description": "The Cisco ISE connection session state.",
                        "enum": [
                            "AUTHENTICATED",
                            "AUTHENTICATING",
                            "DISCONNECTED",
                            "POSTURED",
                            "STARTED"
                        ],
                        "readOnly": true,
                        "example": "Example cisco_ise_session_state"
                    },
                    "cisco_ise_security_group": {
                        "type": "string",
                        "description": "The Cisco ISE security group name.",
                        "readOnly": true,
                        "example": "Example cisco_ise_security_group"
                    },
                    "task_name": {
                        "type": "string",
                        "description": "The name of the discovery task.",
                        "readOnly": true,
                        "example": "Example task_name"
                    },
                    "network_component_location": {
                        "type": "string",
                        "description": "Location of the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_location"
                    },
                    "network_component_contact": {
                        "type": "string",
                        "description": "Contact information from the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_contact"
                    },
                    "device_location": {
                        "type": "string",
                        "description": "Location of device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_location"
                    },
                    "device_contact": {
                        "type": "string",
                        "description": "Contact information from device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_contact"
                    },
                    "ap_name": {
                        "type": "string",
                        "description": "Discovered name of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_name"
                    },
                    "ap_ip_address": {
                        "type": "string",
                        "description": "Discovered IP address of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ip_address"
                    },
                    "ap_ssid": {
                        "type": "string",
                        "description": "Service set identifier (SSID) associated with Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ssid"
                    },
                    "bridge_domain": {
                        "type": "string",
                        "description": "Discovered bridge domain.",
                        "readOnly": true,
                        "example": "Example bridge_domain"
                    },
                    "endpoint_groups": {
                        "type": "string",
                        "description": "A comma-separated list of the discovered endpoint groups.",
                        "readOnly": true,
                        "example": "Example endpoint_groups"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Discovered tenant.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "vrf_name": {
                        "type": "string",
                        "description": "The name of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_name"
                    },
                    "vrf_description": {
                        "type": "string",
                        "description": "Description of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_description"
                    },
                    "vrf_rd": {
                        "type": "string",
                        "description": "Route distinguisher of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_rd"
                    },
                    "bgp_as": {
                        "type": "integer",
                        "description": "The BGP autonomous system number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordAMsAdUserData": {
                "type": "object",
                "properties": {
                    "active_users_count": {
                        "type": "integer",
                        "description": "The number of active users.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "ListRecordAResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordA__ objects.",
                        "type": "array",
                        "title": "ListRecordAResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordA"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordA__ objects.",
                        "type": "object",
                        "title": "ListRecordAResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordA"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordAResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordA__ in object format.",
                        "type": "object",
                        "title": "CreateRecordAResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordA"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordA__.",
                        "type": "string",
                        "title": "CreateRecordAResponse"
                    }
                ]
            },
            "GetRecordAResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordA"
                    },
                    {
                        "description": "The response format to retrieve __RecordA__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordAResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordA"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordAResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordA__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordAResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordA"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordA__ .",
                        "type": "string",
                        "title": "UpdateRecordAResponse"
                    }
                ]
            },
            "RecordAaaa": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordAaaaAwsRte53RecordInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordAaaaCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "discovered_data": {
                        "$ref": "#/components/schemas/RecordAaaaDiscoveredData"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for an AAAA record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "ipv6addr": {
                        "description": "The IPv6 Address of the record.",
                        "oneOf": [
                            {
                                "type": "string",
                                "title": "network"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "_object_function": {
                                        "type": "string"
                                    },
                                    "_parameters": {
                                        "type": "object"
                                    },
                                    "_result_field": {
                                        "type": "string"
                                    },
                                    "_object": {
                                        "type": "string"
                                    },
                                    "_object_parameters": {
                                        "type": "object"
                                    }
                                }
                            }
                        ]
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "ms_ad_user_data": {
                        "$ref": "#/components/schemas/RecordAaaaMsAdUserData"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the AAAA record in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "remove_associated_ptr": {
                        "type": "boolean",
                        "description": "Delete option that indicates whether the associated PTR records should be removed while deleting the specified A record.",
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordAaaaAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordAaaaCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordaaaacloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordaaaacloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "RecordAaaaDiscoveredData": {
                "type": "object",
                "properties": {
                    "device_model": {
                        "type": "string",
                        "description": "The model name of the end device in the vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_model"
                    },
                    "device_port_name": {
                        "type": "string",
                        "description": "The system name of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_name"
                    },
                    "device_port_type": {
                        "type": "string",
                        "description": "The hardware type of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_type"
                    },
                    "device_type": {
                        "type": "string",
                        "description": "The type of end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_type"
                    },
                    "device_vendor": {
                        "type": "string",
                        "description": "The vendor name of the end host.",
                        "readOnly": true,
                        "example": "Example device_vendor"
                    },
                    "discovered_name": {
                        "type": "string",
                        "description": "The name of the network device associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example discovered_name"
                    },
                    "discoverer": {
                        "type": "string",
                        "description": "Specifies whether the IP address was discovered by a NetMRI or NIOS discovery process.",
                        "readOnly": true,
                        "example": "Example discoverer"
                    },
                    "duid": {
                        "type": "string",
                        "description": "For IPv6 address only. The DHCP unique identifier of the discovered host. This is an optional field, and data might not be included.",
                        "readOnly": true,
                        "example": "Example duid"
                    },
                    "first_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was first discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_no": {
                        "type": "integer",
                        "description": "The port redundant group number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_state": {
                        "type": "string",
                        "description": "The status for the IP address within port redundant group.",
                        "enum": [
                            "VIP",
                            "ACTIVE",
                            "STANDBY",
                            "NEGOTIATION"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_state"
                    },
                    "iprg_type": {
                        "type": "string",
                        "description": "The port redundant group type.",
                        "enum": [
                            "HSRP",
                            "VRRP"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_type"
                    },
                    "last_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was last discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "mac_address": {
                        "type": "string",
                        "description": "The discovered MAC address for the host. This is the unique identifier of a network device. The discovery acquires the MAC address for hosts that are located on the same network as the Grid member that is running the discovery. This can also be the MAC address of a virtual entity on a specified vSphere server.",
                        "readOnly": true,
                        "example": "Example mac_address"
                    },
                    "mgmt_ip_address": {
                        "type": "string",
                        "description": "The management IP address of the end host that has more than one IP.",
                        "readOnly": true,
                        "example": "Example mgmt_ip_address"
                    },
                    "netbios_name": {
                        "type": "string",
                        "description": "The name returned in the NetBIOS reply or the name you manually register for the discovered host.",
                        "readOnly": true,
                        "example": "Example netbios_name"
                    },
                    "network_component_description": {
                        "type": "string",
                        "description": "A textual description of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_description"
                    },
                    "network_component_ip": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_ip"
                    },
                    "network_component_model": {
                        "type": "string",
                        "description": "Model name of the switch port connected to the end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example network_component_model"
                    },
                    "network_component_name": {
                        "type": "string",
                        "description": "If a reverse lookup was successful for the IP address associated with this switch, the host name is displayed in this field.",
                        "readOnly": true,
                        "example": "Example network_component_name"
                    },
                    "network_component_port_description": {
                        "type": "string",
                        "description": "A textual description of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_description"
                    },
                    "network_component_port_name": {
                        "type": "string",
                        "description": "The name of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_name"
                    },
                    "network_component_port_number": {
                        "type": "string",
                        "description": "The number of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_number"
                    },
                    "network_component_type": {
                        "type": "string",
                        "description": "Identifies the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_type"
                    },
                    "network_component_vendor": {
                        "type": "string",
                        "description": "The vendor name of the switch port connected to the end host.",
                        "readOnly": true,
                        "example": "Example network_component_vendor"
                    },
                    "open_ports": {
                        "type": "string",
                        "description": "The list of opened ports on the IP address, represented as: \"TCP: 21,22,23 UDP: 137,139\". Limited to max total 1000 ports.",
                        "readOnly": true,
                        "example": "Example open_ports"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system of the detected host or virtual entity. The OS can be one of the following: * Microsoft for all discovered hosts that have a non-null value in the MAC addresses using the NetBIOS discovery method. * A value that a TCP discovery returns. * The OS of a virtual entity on a vSphere server.",
                        "readOnly": true,
                        "example": "Example os"
                    },
                    "port_duplex": {
                        "type": "string",
                        "description": "The negotiated or operational duplex setting of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_duplex"
                    },
                    "port_link_status": {
                        "type": "string",
                        "description": "The link status of the switch port connected to the end device. Indicates whether it is connected.",
                        "readOnly": true,
                        "example": "Example port_link_status"
                    },
                    "port_speed": {
                        "type": "string",
                        "description": "The interface speed, in Mbps, of the switch port.",
                        "readOnly": true,
                        "example": "Example port_speed"
                    },
                    "port_status": {
                        "type": "string",
                        "description": "The operational status of the switch port. Indicates whether the port is up or down.",
                        "readOnly": true,
                        "example": "Example port_status"
                    },
                    "port_type": {
                        "type": "string",
                        "description": "The type of switch port.",
                        "readOnly": true,
                        "example": "Example port_type"
                    },
                    "port_vlan_description": {
                        "type": "string",
                        "description": "The description of the VLAN of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_vlan_description"
                    },
                    "port_vlan_name": {
                        "type": "string",
                        "description": "The name of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_name"
                    },
                    "port_vlan_number": {
                        "type": "string",
                        "description": "The ID of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_number"
                    },
                    "v_adapter": {
                        "type": "string",
                        "description": "The name of the physical network adapter through which the virtual entity is connected to the appliance.",
                        "readOnly": true,
                        "example": "Example v_adapter"
                    },
                    "v_cluster": {
                        "type": "string",
                        "description": "The name of the VMware cluster to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_cluster"
                    },
                    "v_datacenter": {
                        "type": "string",
                        "description": "The name of the vSphere datacenter or container to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_datacenter"
                    },
                    "v_entity_name": {
                        "type": "string",
                        "description": "The name of the virtual entity.",
                        "readOnly": true,
                        "example": "Example v_entity_name"
                    },
                    "v_entity_type": {
                        "type": "string",
                        "description": "The virtual entity type. This can be blank or one of the following: Virtual Machine, Virtual Host, or Virtual Center. Virtual Center represents a VMware vCenter server.",
                        "readOnly": true,
                        "example": "Example v_entity_type"
                    },
                    "v_host": {
                        "type": "string",
                        "description": "The name of the VMware server on which the virtual entity was discovered.",
                        "readOnly": true,
                        "example": "Example v_host"
                    },
                    "v_switch": {
                        "type": "string",
                        "description": "The name of the switch to which the virtual entity is connected.",
                        "readOnly": true,
                        "example": "Example v_switch"
                    },
                    "vmi_name": {
                        "type": "string",
                        "description": "Name of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_name"
                    },
                    "vmi_id": {
                        "type": "string",
                        "description": "ID of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_id"
                    },
                    "vlan_port_group": {
                        "type": "string",
                        "description": "Port group which the virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vlan_port_group"
                    },
                    "vswitch_name": {
                        "type": "string",
                        "description": "Name of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_name"
                    },
                    "vswitch_id": {
                        "type": "string",
                        "description": "ID of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_id"
                    },
                    "vswitch_type": {
                        "type": "string",
                        "description": "Type of the virtual switch: standard or distributed.",
                        "enum": [
                            "Unknown",
                            "Standard",
                            "Distributed"
                        ],
                        "readOnly": true,
                        "example": "Example vswitch_type"
                    },
                    "vswitch_ipv6_enabled": {
                        "type": "boolean",
                        "description": "Indicates the virtual switch has IPV6 enabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "vport_name": {
                        "type": "string",
                        "description": "Name of the network adapter on the virtual switch connected with the virtual machine.",
                        "readOnly": true,
                        "example": "Example vport_name"
                    },
                    "vport_mac_address": {
                        "type": "string",
                        "description": "MAC address of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_mac_address"
                    },
                    "vport_link_status": {
                        "type": "string",
                        "description": "Link status of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_link_status"
                    },
                    "vport_conf_speed": {
                        "type": "string",
                        "description": "Configured speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_conf_speed"
                    },
                    "vport_conf_mode": {
                        "type": "string",
                        "description": "Configured mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_conf_mode"
                    },
                    "vport_speed": {
                        "type": "string",
                        "description": "Actual speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_speed"
                    },
                    "vport_mode": {
                        "type": "string",
                        "description": "Actual mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_mode"
                    },
                    "vswitch_segment_type": {
                        "type": "string",
                        "description": "Type of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_type"
                    },
                    "vswitch_segment_name": {
                        "type": "string",
                        "description": "Name of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_name"
                    },
                    "vswitch_segment_id": {
                        "type": "string",
                        "description": "ID of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_id"
                    },
                    "vswitch_segment_port_group": {
                        "type": "string",
                        "description": "Port group of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_port_group"
                    },
                    "vswitch_available_ports_count": {
                        "type": "integer",
                        "description": "Numer of available ports reported by the virtual switch on which the virtual machine/vport connected to.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vswitch_tep_type": {
                        "type": "string",
                        "description": "Type of virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_type"
                    },
                    "vswitch_tep_ip": {
                        "type": "string",
                        "description": "IP address of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_ip"
                    },
                    "vswitch_tep_port_group": {
                        "type": "string",
                        "description": "Port group of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_port_group"
                    },
                    "vswitch_tep_vlan": {
                        "type": "string",
                        "description": "VLAN of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_vlan"
                    },
                    "vswitch_tep_dhcp_server": {
                        "type": "string",
                        "description": "DHCP server of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_dhcp_server"
                    },
                    "vswitch_tep_multicast": {
                        "type": "string",
                        "description": "Muticast address of the virtual tunnel endpoint (VTEP) in the virtual swtich.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_multicast"
                    },
                    "vmhost_ip_address": {
                        "type": "string",
                        "description": "IP address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_ip_address"
                    },
                    "vmhost_name": {
                        "type": "string",
                        "description": "Name of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_name"
                    },
                    "vmhost_mac_address": {
                        "type": "string",
                        "description": "MAC address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_mac_address"
                    },
                    "vmhost_subnet_cidr": {
                        "type": "integer",
                        "description": "CIDR subnet of the physical node on which the virtual machine is hosted.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vmhost_nic_names": {
                        "type": "string",
                        "description": "List of all physical port names used by the virtual switch on the physical node on which the virtual machine is hosted. Represented as: \"eth1,eth2,eth3\".",
                        "readOnly": true,
                        "example": "Example vmhost_nic_names"
                    },
                    "vmi_tenant_id": {
                        "type": "string",
                        "description": "ID of the tenant which virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vmi_tenant_id"
                    },
                    "cmp_type": {
                        "type": "string",
                        "description": "If the IP is coming from a Cloud environment, the Cloud Management Platform type.",
                        "readOnly": true,
                        "example": "Example cmp_type"
                    },
                    "vmi_ip_type": {
                        "type": "string",
                        "description": "Discovered IP address type.",
                        "readOnly": true,
                        "example": "Example vmi_ip_type"
                    },
                    "vmi_private_address": {
                        "type": "string",
                        "description": "Private IP address of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_private_address"
                    },
                    "vmi_is_public_address": {
                        "type": "boolean",
                        "description": "Indicates whether the IP address is a public address.",
                        "readOnly": true,
                        "example": false
                    },
                    "cisco_ise_ssid": {
                        "type": "string",
                        "description": "The Cisco ISE SSID.",
                        "readOnly": true,
                        "example": "Example cisco_ise_ssid"
                    },
                    "cisco_ise_endpoint_profile": {
                        "type": "string",
                        "description": "The Endpoint Profile created in Cisco ISE.",
                        "readOnly": true,
                        "example": "Example cisco_ise_endpoint_profile"
                    },
                    "cisco_ise_session_state": {
                        "type": "string",
                        "description": "The Cisco ISE connection session state.",
                        "enum": [
                            "AUTHENTICATED",
                            "AUTHENTICATING",
                            "DISCONNECTED",
                            "POSTURED",
                            "STARTED"
                        ],
                        "readOnly": true,
                        "example": "Example cisco_ise_session_state"
                    },
                    "cisco_ise_security_group": {
                        "type": "string",
                        "description": "The Cisco ISE security group name.",
                        "readOnly": true,
                        "example": "Example cisco_ise_security_group"
                    },
                    "task_name": {
                        "type": "string",
                        "description": "The name of the discovery task.",
                        "readOnly": true,
                        "example": "Example task_name"
                    },
                    "network_component_location": {
                        "type": "string",
                        "description": "Location of the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_location"
                    },
                    "network_component_contact": {
                        "type": "string",
                        "description": "Contact information from the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_contact"
                    },
                    "device_location": {
                        "type": "string",
                        "description": "Location of device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_location"
                    },
                    "device_contact": {
                        "type": "string",
                        "description": "Contact information from device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_contact"
                    },
                    "ap_name": {
                        "type": "string",
                        "description": "Discovered name of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_name"
                    },
                    "ap_ip_address": {
                        "type": "string",
                        "description": "Discovered IP address of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ip_address"
                    },
                    "ap_ssid": {
                        "type": "string",
                        "description": "Service set identifier (SSID) associated with Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ssid"
                    },
                    "bridge_domain": {
                        "type": "string",
                        "description": "Discovered bridge domain.",
                        "readOnly": true,
                        "example": "Example bridge_domain"
                    },
                    "endpoint_groups": {
                        "type": "string",
                        "description": "A comma-separated list of the discovered endpoint groups.",
                        "readOnly": true,
                        "example": "Example endpoint_groups"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Discovered tenant.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "vrf_name": {
                        "type": "string",
                        "description": "The name of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_name"
                    },
                    "vrf_description": {
                        "type": "string",
                        "description": "Description of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_description"
                    },
                    "vrf_rd": {
                        "type": "string",
                        "description": "Route distinguisher of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_rd"
                    },
                    "bgp_as": {
                        "type": "integer",
                        "description": "The BGP autonomous system number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordAaaaMsAdUserData": {
                "type": "object",
                "properties": {
                    "active_users_count": {
                        "type": "integer",
                        "description": "The number of active users.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "ListRecordAaaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordAaaa__ objects.",
                        "type": "array",
                        "title": "ListRecordAaaaResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordAaaa"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordAaaa__ objects.",
                        "type": "object",
                        "title": "ListRecordAaaaResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordAaaa"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordAaaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordAaaa__ in object format.",
                        "type": "object",
                        "title": "CreateRecordAaaaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordAaaa"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordAaaa__.",
                        "type": "string",
                        "title": "CreateRecordAaaaResponse"
                    }
                ]
            },
            "GetRecordAaaaResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordAaaa"
                    },
                    {
                        "description": "The response format to retrieve __RecordAaaa__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordAaaaResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordAaaa"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordAaaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordAaaa__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordAaaaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordAaaa"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordAaaa__ .",
                        "type": "string",
                        "title": "UpdateRecordAaaaResponse"
                    }
                ]
            },
            "RecordAlias": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordAliasAwsRte53RecordInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordAliasCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator.",
                        "enum": [
                            "STATIC"
                        ],
                        "example": "Example creator"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for an Alias record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_target_name": {
                        "type": "string",
                        "description": "Target name in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_target_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for an Alias record in FQDN format. This value can be in unicode format. Regular expression search is not supported for unicode values.",
                        "example": "Example name"
                    },
                    "target_name": {
                        "type": "string",
                        "description": "Target name in FQDN format. This value can be in unicode format.",
                        "example": "Example target_name"
                    },
                    "target_type": {
                        "type": "string",
                        "description": "Target type.",
                        "enum": [
                            "A",
                            "AAAA",
                            "MX",
                            "NAPTR",
                            "PTR",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "example": "Example target_type"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordAliasAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordAliasCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordaliascloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordaliascloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordAliasResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordAlias__ objects.",
                        "type": "array",
                        "title": "ListRecordAliasResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordAlias"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordAlias__ objects.",
                        "type": "object",
                        "title": "ListRecordAliasResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordAlias"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordAliasResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordAlias__ in object format.",
                        "type": "object",
                        "title": "CreateRecordAliasResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordAlias"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordAlias__.",
                        "type": "string",
                        "title": "CreateRecordAliasResponse"
                    }
                ]
            },
            "GetRecordAliasResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordAlias"
                    },
                    {
                        "description": "The response format to retrieve __RecordAlias__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordAliasResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordAlias"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordAliasResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordAlias__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordAliasResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordAlias"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordAlias__ .",
                        "type": "string",
                        "title": "UpdateRecordAliasResponse"
                    }
                ]
            },
            "RecordCname": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordCnameAwsRte53RecordInfo"
                    },
                    "canonical": {
                        "type": "string",
                        "description": "Canonical name in FQDN format. This value can be in unicode format.",
                        "example": "Example canonical"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordCnameCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_canonical": {
                        "type": "string",
                        "description": "Canonical name in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_canonical"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for the CNAME record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for a CNAME record in FQDN format. This value can be in unicode format. Regular expression search is not supported for unicode values.",
                        "example": "Example name"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordCnameAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordCnameCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordcnamecloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordcnamecloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordCnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordCname__ objects.",
                        "type": "array",
                        "title": "ListRecordCnameResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordCname"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordCname__ objects.",
                        "type": "object",
                        "title": "ListRecordCnameResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordCname"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordCnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordCname__ in object format.",
                        "type": "object",
                        "title": "CreateRecordCnameResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordCname"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordCname__.",
                        "type": "string",
                        "title": "CreateRecordCnameResponse"
                    }
                ]
            },
            "GetRecordCnameResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordCname"
                    },
                    {
                        "description": "The response format to retrieve __RecordCname__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordCnameResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordCname"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordCnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordCname__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordCnameResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordCname"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordCname__ .",
                        "type": "string",
                        "title": "UpdateRecordCnameResponse"
                    }
                ]
            },
            "RecordMx": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordMxAwsRte53RecordInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordMxCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_mail_exchanger": {
                        "type": "string",
                        "description": "The Mail exchanger name in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_mail_exchanger"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for a MX record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "mail_exchanger": {
                        "type": "string",
                        "description": "Mail exchanger name in FQDN format. This value can be in unicode format.",
                        "example": "Example mail_exchanger"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the MX record in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "preference": {
                        "type": "integer",
                        "description": "Preference value, 0 to 65535 (inclusive) in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordMxAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordMxCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordmxcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordmxcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordMxResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordMx__ objects.",
                        "type": "array",
                        "title": "ListRecordMxResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordMx"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordMx__ objects.",
                        "type": "object",
                        "title": "ListRecordMxResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordMx"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordMxResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordMx__ in object format.",
                        "type": "object",
                        "title": "CreateRecordMxResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordMx"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordMx__.",
                        "type": "string",
                        "title": "CreateRecordMxResponse"
                    }
                ]
            },
            "GetRecordMxResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordMx"
                    },
                    {
                        "description": "The response format to retrieve __RecordMx__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordMxResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordMx"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordMxResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordMx__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordMxResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordMx"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordMx__ .",
                        "type": "string",
                        "title": "UpdateRecordMxResponse"
                    }
                ]
            },
            "RecordTxt": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordTxtAwsRte53RecordInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordTxtCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for a TXT record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the TXT record in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text associated with the record. It can contain up to 255 bytes per substring, up to a total of 512 bytes. To enter leading, trailing, or embedded spaces in the text, add double quotes (&#92;\" &#92;\") around the text to preserve the spaces.",
                        "example": "Example text"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordTxtAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordTxtCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordtxtcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordtxtcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordTxtResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordTxt__ objects.",
                        "type": "array",
                        "title": "ListRecordTxtResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordTxt"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordTxt__ objects.",
                        "type": "object",
                        "title": "ListRecordTxtResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordTxt"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordTxtResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordTxt__ in object format.",
                        "type": "object",
                        "title": "CreateRecordTxtResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordTxt"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordTxt__.",
                        "type": "string",
                        "title": "CreateRecordTxtResponse"
                    }
                ]
            },
            "GetRecordTxtResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordTxt"
                    },
                    {
                        "description": "The response format to retrieve __RecordTxt__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordTxtResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordTxt"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordTxtResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordTxt__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordTxtResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordTxt"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordTxt__ .",
                        "type": "string",
                        "title": "UpdateRecordTxtResponse"
                    }
                ]
            },
            "RecordPtr": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordPtrAwsRte53RecordInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordPtrCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "discovered_data": {
                        "$ref": "#/components/schemas/RecordPtrDiscoveredData"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for a DNS PTR record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_ptrdname": {
                        "type": "string",
                        "description": "The domain name of the DNS PTR record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_ptrdname"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "ipv4addr": {
                        "description": "The IPv4 Address of the record.",
                        "oneOf": [
                            {
                                "type": "string",
                                "title": "network"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "_object_function": {
                                        "type": "string"
                                    },
                                    "_parameters": {
                                        "type": "object"
                                    },
                                    "_result_field": {
                                        "type": "string"
                                    },
                                    "_object": {
                                        "type": "string"
                                    },
                                    "_object_parameters": {
                                        "type": "object"
                                    }
                                }
                            }
                        ]
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the record.",
                        "example": "Example ipv6addr"
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "ms_ad_user_data": {
                        "$ref": "#/components/schemas/RecordPtrMsAdUserData"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS PTR record in FQDN format.",
                        "example": "Example name"
                    },
                    "ptrdname": {
                        "type": "string",
                        "description": "The domain name of the DNS PTR record in FQDN format.",
                        "example": "Example ptrdname"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, that the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "Name of the DNS View in which the record resides, for example \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. For example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordPtrAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordPtrCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordptrcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordptrcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "RecordPtrDiscoveredData": {
                "type": "object",
                "properties": {
                    "device_model": {
                        "type": "string",
                        "description": "The model name of the end device in the vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_model"
                    },
                    "device_port_name": {
                        "type": "string",
                        "description": "The system name of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_name"
                    },
                    "device_port_type": {
                        "type": "string",
                        "description": "The hardware type of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_type"
                    },
                    "device_type": {
                        "type": "string",
                        "description": "The type of end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_type"
                    },
                    "device_vendor": {
                        "type": "string",
                        "description": "The vendor name of the end host.",
                        "readOnly": true,
                        "example": "Example device_vendor"
                    },
                    "discovered_name": {
                        "type": "string",
                        "description": "The name of the network device associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example discovered_name"
                    },
                    "discoverer": {
                        "type": "string",
                        "description": "Specifies whether the IP address was discovered by a NetMRI or NIOS discovery process.",
                        "readOnly": true,
                        "example": "Example discoverer"
                    },
                    "duid": {
                        "type": "string",
                        "description": "For IPv6 address only. The DHCP unique identifier of the discovered host. This is an optional field, and data might not be included.",
                        "readOnly": true,
                        "example": "Example duid"
                    },
                    "first_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was first discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_no": {
                        "type": "integer",
                        "description": "The port redundant group number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_state": {
                        "type": "string",
                        "description": "The status for the IP address within port redundant group.",
                        "enum": [
                            "VIP",
                            "ACTIVE",
                            "STANDBY",
                            "NEGOTIATION"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_state"
                    },
                    "iprg_type": {
                        "type": "string",
                        "description": "The port redundant group type.",
                        "enum": [
                            "HSRP",
                            "VRRP"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_type"
                    },
                    "last_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was last discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "mac_address": {
                        "type": "string",
                        "description": "The discovered MAC address for the host. This is the unique identifier of a network device. The discovery acquires the MAC address for hosts that are located on the same network as the Grid member that is running the discovery. This can also be the MAC address of a virtual entity on a specified vSphere server.",
                        "readOnly": true,
                        "example": "Example mac_address"
                    },
                    "mgmt_ip_address": {
                        "type": "string",
                        "description": "The management IP address of the end host that has more than one IP.",
                        "readOnly": true,
                        "example": "Example mgmt_ip_address"
                    },
                    "netbios_name": {
                        "type": "string",
                        "description": "The name returned in the NetBIOS reply or the name you manually register for the discovered host.",
                        "readOnly": true,
                        "example": "Example netbios_name"
                    },
                    "network_component_description": {
                        "type": "string",
                        "description": "A textual description of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_description"
                    },
                    "network_component_ip": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_ip"
                    },
                    "network_component_model": {
                        "type": "string",
                        "description": "Model name of the switch port connected to the end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example network_component_model"
                    },
                    "network_component_name": {
                        "type": "string",
                        "description": "If a reverse lookup was successful for the IP address associated with this switch, the host name is displayed in this field.",
                        "readOnly": true,
                        "example": "Example network_component_name"
                    },
                    "network_component_port_description": {
                        "type": "string",
                        "description": "A textual description of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_description"
                    },
                    "network_component_port_name": {
                        "type": "string",
                        "description": "The name of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_name"
                    },
                    "network_component_port_number": {
                        "type": "string",
                        "description": "The number of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_number"
                    },
                    "network_component_type": {
                        "type": "string",
                        "description": "Identifies the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_type"
                    },
                    "network_component_vendor": {
                        "type": "string",
                        "description": "The vendor name of the switch port connected to the end host.",
                        "readOnly": true,
                        "example": "Example network_component_vendor"
                    },
                    "open_ports": {
                        "type": "string",
                        "description": "The list of opened ports on the IP address, represented as: \"TCP: 21,22,23 UDP: 137,139\". Limited to max total 1000 ports.",
                        "readOnly": true,
                        "example": "Example open_ports"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system of the detected host or virtual entity. The OS can be one of the following: * Microsoft for all discovered hosts that have a non-null value in the MAC addresses using the NetBIOS discovery method. * A value that a TCP discovery returns. * The OS of a virtual entity on a vSphere server.",
                        "readOnly": true,
                        "example": "Example os"
                    },
                    "port_duplex": {
                        "type": "string",
                        "description": "The negotiated or operational duplex setting of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_duplex"
                    },
                    "port_link_status": {
                        "type": "string",
                        "description": "The link status of the switch port connected to the end device. Indicates whether it is connected.",
                        "readOnly": true,
                        "example": "Example port_link_status"
                    },
                    "port_speed": {
                        "type": "string",
                        "description": "The interface speed, in Mbps, of the switch port.",
                        "readOnly": true,
                        "example": "Example port_speed"
                    },
                    "port_status": {
                        "type": "string",
                        "description": "The operational status of the switch port. Indicates whether the port is up or down.",
                        "readOnly": true,
                        "example": "Example port_status"
                    },
                    "port_type": {
                        "type": "string",
                        "description": "The type of switch port.",
                        "readOnly": true,
                        "example": "Example port_type"
                    },
                    "port_vlan_description": {
                        "type": "string",
                        "description": "The description of the VLAN of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_vlan_description"
                    },
                    "port_vlan_name": {
                        "type": "string",
                        "description": "The name of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_name"
                    },
                    "port_vlan_number": {
                        "type": "string",
                        "description": "The ID of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_number"
                    },
                    "v_adapter": {
                        "type": "string",
                        "description": "The name of the physical network adapter through which the virtual entity is connected to the appliance.",
                        "readOnly": true,
                        "example": "Example v_adapter"
                    },
                    "v_cluster": {
                        "type": "string",
                        "description": "The name of the VMware cluster to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_cluster"
                    },
                    "v_datacenter": {
                        "type": "string",
                        "description": "The name of the vSphere datacenter or container to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_datacenter"
                    },
                    "v_entity_name": {
                        "type": "string",
                        "description": "The name of the virtual entity.",
                        "readOnly": true,
                        "example": "Example v_entity_name"
                    },
                    "v_entity_type": {
                        "type": "string",
                        "description": "The virtual entity type. This can be blank or one of the following: Virtual Machine, Virtual Host, or Virtual Center. Virtual Center represents a VMware vCenter server.",
                        "readOnly": true,
                        "example": "Example v_entity_type"
                    },
                    "v_host": {
                        "type": "string",
                        "description": "The name of the VMware server on which the virtual entity was discovered.",
                        "readOnly": true,
                        "example": "Example v_host"
                    },
                    "v_switch": {
                        "type": "string",
                        "description": "The name of the switch to which the virtual entity is connected.",
                        "readOnly": true,
                        "example": "Example v_switch"
                    },
                    "vmi_name": {
                        "type": "string",
                        "description": "Name of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_name"
                    },
                    "vmi_id": {
                        "type": "string",
                        "description": "ID of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_id"
                    },
                    "vlan_port_group": {
                        "type": "string",
                        "description": "Port group which the virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vlan_port_group"
                    },
                    "vswitch_name": {
                        "type": "string",
                        "description": "Name of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_name"
                    },
                    "vswitch_id": {
                        "type": "string",
                        "description": "ID of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_id"
                    },
                    "vswitch_type": {
                        "type": "string",
                        "description": "Type of the virtual switch: standard or distributed.",
                        "enum": [
                            "Unknown",
                            "Standard",
                            "Distributed"
                        ],
                        "readOnly": true,
                        "example": "Example vswitch_type"
                    },
                    "vswitch_ipv6_enabled": {
                        "type": "boolean",
                        "description": "Indicates the virtual switch has IPV6 enabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "vport_name": {
                        "type": "string",
                        "description": "Name of the network adapter on the virtual switch connected with the virtual machine.",
                        "readOnly": true,
                        "example": "Example vport_name"
                    },
                    "vport_mac_address": {
                        "type": "string",
                        "description": "MAC address of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_mac_address"
                    },
                    "vport_link_status": {
                        "type": "string",
                        "description": "Link status of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_link_status"
                    },
                    "vport_conf_speed": {
                        "type": "string",
                        "description": "Configured speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_conf_speed"
                    },
                    "vport_conf_mode": {
                        "type": "string",
                        "description": "Configured mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_conf_mode"
                    },
                    "vport_speed": {
                        "type": "string",
                        "description": "Actual speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_speed"
                    },
                    "vport_mode": {
                        "type": "string",
                        "description": "Actual mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_mode"
                    },
                    "vswitch_segment_type": {
                        "type": "string",
                        "description": "Type of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_type"
                    },
                    "vswitch_segment_name": {
                        "type": "string",
                        "description": "Name of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_name"
                    },
                    "vswitch_segment_id": {
                        "type": "string",
                        "description": "ID of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_id"
                    },
                    "vswitch_segment_port_group": {
                        "type": "string",
                        "description": "Port group of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_port_group"
                    },
                    "vswitch_available_ports_count": {
                        "type": "integer",
                        "description": "Numer of available ports reported by the virtual switch on which the virtual machine/vport connected to.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vswitch_tep_type": {
                        "type": "string",
                        "description": "Type of virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_type"
                    },
                    "vswitch_tep_ip": {
                        "type": "string",
                        "description": "IP address of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_ip"
                    },
                    "vswitch_tep_port_group": {
                        "type": "string",
                        "description": "Port group of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_port_group"
                    },
                    "vswitch_tep_vlan": {
                        "type": "string",
                        "description": "VLAN of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_vlan"
                    },
                    "vswitch_tep_dhcp_server": {
                        "type": "string",
                        "description": "DHCP server of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_dhcp_server"
                    },
                    "vswitch_tep_multicast": {
                        "type": "string",
                        "description": "Muticast address of the virtual tunnel endpoint (VTEP) in the virtual swtich.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_multicast"
                    },
                    "vmhost_ip_address": {
                        "type": "string",
                        "description": "IP address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_ip_address"
                    },
                    "vmhost_name": {
                        "type": "string",
                        "description": "Name of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_name"
                    },
                    "vmhost_mac_address": {
                        "type": "string",
                        "description": "MAC address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_mac_address"
                    },
                    "vmhost_subnet_cidr": {
                        "type": "integer",
                        "description": "CIDR subnet of the physical node on which the virtual machine is hosted.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vmhost_nic_names": {
                        "type": "string",
                        "description": "List of all physical port names used by the virtual switch on the physical node on which the virtual machine is hosted. Represented as: \"eth1,eth2,eth3\".",
                        "readOnly": true,
                        "example": "Example vmhost_nic_names"
                    },
                    "vmi_tenant_id": {
                        "type": "string",
                        "description": "ID of the tenant which virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vmi_tenant_id"
                    },
                    "cmp_type": {
                        "type": "string",
                        "description": "If the IP is coming from a Cloud environment, the Cloud Management Platform type.",
                        "readOnly": true,
                        "example": "Example cmp_type"
                    },
                    "vmi_ip_type": {
                        "type": "string",
                        "description": "Discovered IP address type.",
                        "readOnly": true,
                        "example": "Example vmi_ip_type"
                    },
                    "vmi_private_address": {
                        "type": "string",
                        "description": "Private IP address of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_private_address"
                    },
                    "vmi_is_public_address": {
                        "type": "boolean",
                        "description": "Indicates whether the IP address is a public address.",
                        "readOnly": true,
                        "example": false
                    },
                    "cisco_ise_ssid": {
                        "type": "string",
                        "description": "The Cisco ISE SSID.",
                        "readOnly": true,
                        "example": "Example cisco_ise_ssid"
                    },
                    "cisco_ise_endpoint_profile": {
                        "type": "string",
                        "description": "The Endpoint Profile created in Cisco ISE.",
                        "readOnly": true,
                        "example": "Example cisco_ise_endpoint_profile"
                    },
                    "cisco_ise_session_state": {
                        "type": "string",
                        "description": "The Cisco ISE connection session state.",
                        "enum": [
                            "AUTHENTICATED",
                            "AUTHENTICATING",
                            "DISCONNECTED",
                            "POSTURED",
                            "STARTED"
                        ],
                        "readOnly": true,
                        "example": "Example cisco_ise_session_state"
                    },
                    "cisco_ise_security_group": {
                        "type": "string",
                        "description": "The Cisco ISE security group name.",
                        "readOnly": true,
                        "example": "Example cisco_ise_security_group"
                    },
                    "task_name": {
                        "type": "string",
                        "description": "The name of the discovery task.",
                        "readOnly": true,
                        "example": "Example task_name"
                    },
                    "network_component_location": {
                        "type": "string",
                        "description": "Location of the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_location"
                    },
                    "network_component_contact": {
                        "type": "string",
                        "description": "Contact information from the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_contact"
                    },
                    "device_location": {
                        "type": "string",
                        "description": "Location of device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_location"
                    },
                    "device_contact": {
                        "type": "string",
                        "description": "Contact information from device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_contact"
                    },
                    "ap_name": {
                        "type": "string",
                        "description": "Discovered name of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_name"
                    },
                    "ap_ip_address": {
                        "type": "string",
                        "description": "Discovered IP address of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ip_address"
                    },
                    "ap_ssid": {
                        "type": "string",
                        "description": "Service set identifier (SSID) associated with Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ssid"
                    },
                    "bridge_domain": {
                        "type": "string",
                        "description": "Discovered bridge domain.",
                        "readOnly": true,
                        "example": "Example bridge_domain"
                    },
                    "endpoint_groups": {
                        "type": "string",
                        "description": "A comma-separated list of the discovered endpoint groups.",
                        "readOnly": true,
                        "example": "Example endpoint_groups"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Discovered tenant.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "vrf_name": {
                        "type": "string",
                        "description": "The name of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_name"
                    },
                    "vrf_description": {
                        "type": "string",
                        "description": "Description of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_description"
                    },
                    "vrf_rd": {
                        "type": "string",
                        "description": "Route distinguisher of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_rd"
                    },
                    "bgp_as": {
                        "type": "integer",
                        "description": "The BGP autonomous system number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordPtrMsAdUserData": {
                "type": "object",
                "properties": {
                    "active_users_count": {
                        "type": "integer",
                        "description": "The number of active users.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "ListRecordPtrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordPtr__ objects.",
                        "type": "array",
                        "title": "ListRecordPtrResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordPtr"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordPtr__ objects.",
                        "type": "object",
                        "title": "ListRecordPtrResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordPtr"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordPtrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordPtr__ in object format.",
                        "type": "object",
                        "title": "CreateRecordPtrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordPtr"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordPtr__.",
                        "type": "string",
                        "title": "CreateRecordPtrResponse"
                    }
                ]
            },
            "GetRecordPtrResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordPtr"
                    },
                    {
                        "description": "The response format to retrieve __RecordPtr__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordPtrResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordPtr"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordPtrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordPtr__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordPtrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordPtr"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordPtr__ .",
                        "type": "string",
                        "title": "UpdateRecordPtrResponse"
                    }
                ]
            },
            "RecordSrv": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aws_rte53_record_info": {
                        "$ref": "#/components/schemas/RecordSrvAwsRte53RecordInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordSrvCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for an SRV record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_target": {
                        "type": "string",
                        "description": "The name for a SRV record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_target"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "A name in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target of the SRV record in FQDN format. This value can be in unicode format.",
                        "example": "Example target"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time to Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight of the SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordSrvAwsRte53RecordInfo": {
                "type": "object",
                "properties": {
                    "alias_target_dns_name": {
                        "type": "string",
                        "description": "DNS name of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_dns_name"
                    },
                    "alias_target_hosted_zone_id": {
                        "type": "string",
                        "description": "Hosted zone ID of the alias target.",
                        "readOnly": true,
                        "example": "Example alias_target_hosted_zone_id"
                    },
                    "alias_target_evaluate_target_health": {
                        "type": "boolean",
                        "description": "Indicates if Amazon Route 53 evaluates the health of the alias target.",
                        "readOnly": true,
                        "example": false
                    },
                    "failover": {
                        "type": "string",
                        "description": "Indicates whether this is the primary or secondary resource record for Amazon Route 53 failover routing.",
                        "enum": [
                            "PRIMARY",
                            "SECONDARY"
                        ],
                        "readOnly": true,
                        "example": "Example failover"
                    },
                    "geolocation_continent_code": {
                        "type": "string",
                        "description": "Continent code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_continent_code"
                    },
                    "geolocation_country_code": {
                        "type": "string",
                        "description": "Country code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_country_code"
                    },
                    "geolocation_subdivision_code": {
                        "type": "string",
                        "description": "Subdivision code for Amazon Route 53 geolocation routing.",
                        "readOnly": true,
                        "example": "Example geolocation_subdivision_code"
                    },
                    "health_check_id": {
                        "type": "string",
                        "description": "ID of the health check that Amazon Route 53 performs for this resource record.",
                        "readOnly": true,
                        "example": "Example health_check_id"
                    },
                    "region": {
                        "type": "string",
                        "description": "Amazon EC2 region where this resource record resides for latency routing.",
                        "readOnly": true,
                        "example": "Example region"
                    },
                    "set_identifier": {
                        "type": "string",
                        "description": "An identifier that differentiates records with the same DNS name and type for weighted, latency, geolocation, and failover routing.",
                        "readOnly": true,
                        "example": "Example set_identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Amazon Route 53 resource record.",
                        "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "MX",
                            "NS",
                            "PTR",
                            "SOA",
                            "SPF",
                            "SRV",
                            "TXT"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Value that determines the portion of traffic for this record in weighted routing. The range is from 0 to 255.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordSrvCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordsrvcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordsrvcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordSrvResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordSrv__ objects.",
                        "type": "array",
                        "title": "ListRecordSrvResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordSrv"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordSrv__ objects.",
                        "type": "object",
                        "title": "ListRecordSrvResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordSrv"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordSrvResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordSrv__ in object format.",
                        "type": "object",
                        "title": "CreateRecordSrvResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordSrv"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordSrv__.",
                        "type": "string",
                        "title": "CreateRecordSrvResponse"
                    }
                ]
            },
            "GetRecordSrvResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordSrv"
                    },
                    {
                        "description": "The response format to retrieve __RecordSrv__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordSrvResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordSrv"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordSrvResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordSrv__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordSrvResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordSrv"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordSrv__ .",
                        "type": "string",
                        "title": "UpdateRecordSrvResponse"
                    }
                ]
            },
            "RecordNs": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "addresses": {
                        "type": "array",
                        "description": "The list of zone name servers.",
                        "enum": [
                            "zonenameserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/RecordNsAddresses"
                        }
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordNsCloudInfo"
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator.",
                        "enum": [
                            "STATIC",
                            "SYSTEM"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name of the NS record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "ms_delegation_name": {
                        "type": "string",
                        "description": "The MS delegation point name.",
                        "example": "Example ms_delegation_name"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NS record in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "nameserver": {
                        "type": "string",
                        "description": "The domain name of an authoritative server for the redirected zone.",
                        "example": "Example nameserver"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The host name policy for the record.",
                        "readOnly": true,
                        "example": "Example policy"
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordNsAddresses": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the Zone Name Server.",
                        "example": "Example address"
                    },
                    "auto_create_ptr": {
                        "type": "boolean",
                        "description": "Flag to indicate if ptr records need to be auto created.",
                        "example": false
                    }
                }
            },
            "RecordNsCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordnscloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordnscloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordNsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordNs__ objects.",
                        "type": "array",
                        "title": "ListRecordNsResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordNs"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordNs__ objects.",
                        "type": "object",
                        "title": "ListRecordNsResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordNs"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordNsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordNs__ in object format.",
                        "type": "object",
                        "title": "CreateRecordNsResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNs"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordNs__.",
                        "type": "string",
                        "title": "CreateRecordNsResponse"
                    }
                ]
            },
            "GetRecordNsResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordNs"
                    },
                    {
                        "description": "The response format to retrieve __RecordNs__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordNsResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNs"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordNsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordNs__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordNsResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNs"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordNs__ .",
                        "type": "string",
                        "title": "UpdateRecordNsResponse"
                    }
                ]
            },
            "RecordHost": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "aliases": {
                        "type": "array",
                        "description": "This is a list of aliases for the host. The aliases must be in FQDN format. This value can be in unicode format.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "allow_telnet": {
                        "type": "boolean",
                        "description": "This field controls whether the credential is used for both the Telnet and SSH credentials. If set to False, the credential is used only for SSH.",
                        "example": false
                    },
                    "cli_credentials": {
                        "type": "array",
                        "description": "The CLI credentials for the host record.",
                        "enum": [
                            "discovery:clicredential"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/RecordHostCliCredentials"
                        }
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordHostCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "configure_for_dns": {
                        "type": "boolean",
                        "description": "When configure_for_dns is false, the host does not have parent zone information.",
                        "example": false
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "device_description": {
                        "type": "string",
                        "description": "The description of the device.",
                        "example": "Example device_description"
                    },
                    "device_location": {
                        "type": "string",
                        "description": "The location of the device.",
                        "example": "Example device_location"
                    },
                    "device_type": {
                        "type": "string",
                        "description": "The type of the device.",
                        "example": "Example device_type"
                    },
                    "device_vendor": {
                        "type": "string",
                        "description": "The vendor of the device.",
                        "example": "Example device_vendor"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "disable_discovery": {
                        "type": "boolean",
                        "description": "Determines if the discovery for the record is disabled or not. False means that the discovery is enabled.",
                        "example": false
                    },
                    "dns_aliases": {
                        "type": "array",
                        "description": "The list of aliases for the host in punycode format.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for a host record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "enable_immediate_discovery": {
                        "type": "boolean",
                        "description": "Determines if the discovery for the record should be immediately enabled.",
                        "writeOnly": true,
                        "example": false
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "ipv4addrs": {
                        "type": "array",
                        "description": "This is a list of IPv4 Addresses for the host.",
                        "enum": [
                            "record:host_ipv4addr"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "record:host_ipv4addr"
                            ]
                        }
                    },
                    "ipv6addrs": {
                        "type": "array",
                        "description": "This is a list of IPv6 Addresses for the host.",
                        "enum": [
                            "record:host_ipv6addr"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "record:host_ipv6addr"
                            ]
                        }
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "ms_ad_user_data": {
                        "$ref": "#/components/schemas/RecordHostMsAdUserData"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host name in FQDN format This value can be in unicode format. Regular expression search is not supported for unicode values.",
                        "example": "Example name"
                    },
                    "network_view": {
                        "type": "string",
                        "description": "The name of the network view in which the host record resides.",
                        "example": "Example network_view"
                    },
                    "restart_if_needed": {
                        "type": "boolean",
                        "description": "Restarts the member service.",
                        "writeOnly": true,
                        "example": false
                    },
                    "rrset_order": {
                        "type": "string",
                        "description": "The value of this field specifies the order in which resource record sets are returned. The possible values are \"cyclic\", \"random\" and \"fixed\".",
                        "example": "Example rrset_order"
                    },
                    "snmp3_credential": {
                        "$ref": "#/components/schemas/RecordHostSnmp3Credential"
                    },
                    "snmp_credential": {
                        "$ref": "#/components/schemas/RecordHostSnmpCredential"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_cli_credentials": {
                        "type": "boolean",
                        "description": "If set to true, the CLI credential will override member-level settings.",
                        "example": false
                    },
                    "use_dns_ea_inheritance": {
                        "type": "boolean",
                        "description": "When use_dns_ea_inheritance is True, the EA is inherited from associated zone.",
                        "example": false
                    },
                    "use_snmp3_credential": {
                        "type": "boolean",
                        "description": "Determines if the SNMPv3 credential should be used for the record.",
                        "example": false
                    },
                    "use_snmp_credential": {
                        "type": "boolean",
                        "description": "If set to true, the SNMP credential will override member-level settings.",
                        "example": false
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordHostCliCredentials": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "The CLI user name.",
                        "example": "Example user"
                    },
                    "password": {
                        "type": "string",
                        "description": "The CLI password.",
                        "writeOnly": true,
                        "example": "Example password"
                    },
                    "credential_type": {
                        "type": "string",
                        "description": "The type of the credential.",
                        "enum": [
                            "SSH",
                            "TELNET",
                            "ENABLE_SSH",
                            "ENABLE_TELNET"
                        ],
                        "example": "Example credential_type"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The commment for the credential.",
                        "example": "Example comment"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The Credentials ID.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "credential_group": {
                        "type": "string",
                        "description": "Group for the CLI credential.",
                        "example": "Example credential_group"
                    }
                }
            },
            "RecordHostCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordhostcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordhostcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "RecordHostMsAdUserData": {
                "type": "object",
                "properties": {
                    "active_users_count": {
                        "type": "integer",
                        "description": "The number of active users.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordHostSnmp3Credential": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "The SNMPv3 user name.",
                        "example": "Example user"
                    },
                    "authentication_protocol": {
                        "type": "string",
                        "description": "Authentication protocol for the SNMPv3 user.",
                        "enum": [
                            "NONE",
                            "MD5",
                            "SHA",
                            "SHA-224",
                            "SHA-256",
                            "SHA-384",
                            "SHA-512"
                        ],
                        "example": "Example authentication_protocol"
                    },
                    "authentication_password": {
                        "type": "string",
                        "description": "Authentication password for the SNMPv3 user.",
                        "writeOnly": true,
                        "example": "Example authentication_password"
                    },
                    "privacy_protocol": {
                        "type": "string",
                        "description": "Privacy protocol for the SNMPv3 user.",
                        "enum": [
                            "NONE",
                            "DES",
                            "3DES",
                            "AES",
                            "AES-192",
                            "AES-192C",
                            "AES-256",
                            "AES-256C"
                        ],
                        "example": "Example privacy_protocol"
                    },
                    "privacy_password": {
                        "type": "string",
                        "description": "Privacy password for the SNMPv3 user.",
                        "writeOnly": true,
                        "example": "Example privacy_password"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comments for the SNMPv3 user.",
                        "example": "Example comment"
                    },
                    "credential_group": {
                        "type": "string",
                        "description": "Group for the SNMPv3 credential.",
                        "example": "Example credential_group"
                    }
                }
            },
            "RecordHostSnmpCredential": {
                "type": "object",
                "properties": {
                    "community_string": {
                        "type": "string",
                        "description": "The public community string.",
                        "example": "Example community_string"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comments for the SNMPv1 and SNMPv2 users.",
                        "example": "Example comment"
                    },
                    "credential_group": {
                        "type": "string",
                        "description": "Group for the SNMPv1 and SNMPv2 credential.",
                        "example": "Example credential_group"
                    }
                }
            },
            "ListRecordHostResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordHost__ objects.",
                        "type": "array",
                        "title": "ListRecordHostResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordHost"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordHost__ objects.",
                        "type": "object",
                        "title": "ListRecordHostResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordHost"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordHostResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordHost__ in object format.",
                        "type": "object",
                        "title": "CreateRecordHostResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHost"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordHost__.",
                        "type": "string",
                        "title": "CreateRecordHostResponse"
                    }
                ]
            },
            "GetRecordHostResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordHost"
                    },
                    {
                        "description": "The response format to retrieve __RecordHost__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordHostResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHost"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordHostResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordHost__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordHostResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHost"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordHost__ .",
                        "type": "string",
                        "title": "UpdateRecordHostResponse"
                    }
                ]
            },
            "RecordDname": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordDnameCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The comment for the record.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "Name of a DNS DNAME record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_target": {
                        "type": "string",
                        "description": "The target domain name of the DNS DNAME record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_target"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if reclamation is allowed for the record.",
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS DNAME record in FQDN format.",
                        "example": "Example name"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable.",
                        "readOnly": true,
                        "example": false
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides. This field exists only on db_objects if this record is a shared record.",
                        "readOnly": true,
                        "example": "Example shared_record_group"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target domain name of the DNS DNAME record in FQDN format.",
                        "example": "Example target"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, that the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides, for example \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. For example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordDnameCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecorddnamecloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecorddnamecloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordDnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordDname__ objects.",
                        "type": "array",
                        "title": "ListRecordDnameResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordDname"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordDname__ objects.",
                        "type": "object",
                        "title": "ListRecordDnameResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordDname"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordDnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordDname__ in object format.",
                        "type": "object",
                        "title": "CreateRecordDnameResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDname"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordDname__.",
                        "type": "string",
                        "title": "CreateRecordDnameResponse"
                    }
                ]
            },
            "GetRecordDnameResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordDname"
                    },
                    {
                        "description": "The response format to retrieve __RecordDname__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordDnameResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDname"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordDnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordDname__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordDnameResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDname"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordDname__ .",
                        "type": "string",
                        "title": "UpdateRecordDnameResponse"
                    }
                ]
            },
            "RecordNaptr": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordNaptrCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The time of the record creation in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name of the NAPTR record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_replacement": {
                        "type": "string",
                        "description": "The replacement field of the NAPTR record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_replacement"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "flags": {
                        "type": "string",
                        "description": "The flags used to control the interpretation of the fields for an NAPTR record object. Supported values for the flags field are \"U\", \"S\", \"P\" and \"A\".",
                        "example": "Example flags"
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NAPTR record in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order parameter of the NAPTR records. This parameter specifies the order in which the NAPTR rules are applied when multiple rules are present. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "preference": {
                        "type": "integer",
                        "description": "The preference of the NAPTR record. The preference field determines the order NAPTR records are processed when multiple records with the same order parameter are present. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "regexp": {
                        "type": "string",
                        "description": "The regular expression-based rewriting rule of the NAPTR record. This should be a POSIX compliant regular expression, including the substitution rule and flags. Refer to RFC 2915 for the field syntax details.",
                        "example": "Example regexp"
                    },
                    "replacement": {
                        "type": "string",
                        "description": "The replacement field of the NAPTR record object. For nonterminal NAPTR records, this field specifies the next domain name to look up. This value can be in unicode format.",
                        "example": "Example replacement"
                    },
                    "services": {
                        "type": "string",
                        "description": "The services field of the NAPTR record object; maximum 128 characters. The services field contains protocol and service identifiers, such as \"http+E2U\" or \"SIPS+D2T\".",
                        "example": "Example services"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time to Live (TTL) value for the NAPTR record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordNaptrCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordnaptrcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordnaptrcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordNaptrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordNaptr__ objects.",
                        "type": "array",
                        "title": "ListRecordNaptrResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordNaptr"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordNaptr__ objects.",
                        "type": "object",
                        "title": "ListRecordNaptrResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordNaptr"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordNaptrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordNaptr__ in object format.",
                        "type": "object",
                        "title": "CreateRecordNaptrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNaptr"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordNaptr__.",
                        "type": "string",
                        "title": "CreateRecordNaptrResponse"
                    }
                ]
            },
            "GetRecordNaptrResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordNaptr"
                    },
                    {
                        "description": "The response format to retrieve __RecordNaptr__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordNaptrResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNaptr"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordNaptrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordNaptr__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordNaptrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNaptr"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordNaptr__ .",
                        "type": "string",
                        "title": "UpdateRecordNaptrResponse"
                    }
                ]
            },
            "RecordTlsa": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "certificate_data": {
                        "type": "string",
                        "description": "Hex dump of either raw data for matching type 0, or the hash of the raw data for matching types 1 and 2.",
                        "example": "Example certificate_data"
                    },
                    "certificate_usage": {
                        "type": "integer",
                        "description": "Specifies the provided association that will be used to match the certificate presented in the TLS handshake. Based on RFC-6698.",
                        "format": "int64",
                        "example": 1
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordTlsaCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name of the TLSA record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "matched_type": {
                        "type": "integer",
                        "description": "Specifies how the certificate association is presented. Based on RFC-6698.",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The TLSA record name in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "selector": {
                        "type": "integer",
                        "description": "Specifies which part of the TLS certificate presented by the server will be matched against the association data. Based on RFC-6698.",
                        "format": "int64",
                        "example": 1
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time to Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordTlsaCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordtlsacloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordtlsacloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordTlsaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordTlsa__ objects.",
                        "type": "array",
                        "title": "ListRecordTlsaResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordTlsa"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordTlsa__ objects.",
                        "type": "object",
                        "title": "ListRecordTlsaResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordTlsa"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordTlsaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordTlsa__ in object format.",
                        "type": "object",
                        "title": "CreateRecordTlsaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordTlsa"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordTlsa__.",
                        "type": "string",
                        "title": "CreateRecordTlsaResponse"
                    }
                ]
            },
            "GetRecordTlsaResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordTlsa"
                    },
                    {
                        "description": "The response format to retrieve __RecordTlsa__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordTlsaResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordTlsa"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordTlsaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordTlsa__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordTlsaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordTlsa"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordTlsa__ .",
                        "type": "string",
                        "title": "UpdateRecordTlsaResponse"
                    }
                ]
            },
            "RecordCaa": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "ca_flag": {
                        "type": "integer",
                        "description": "Flag of CAA record.",
                        "format": "int64",
                        "example": 1
                    },
                    "ca_tag": {
                        "type": "string",
                        "description": "Tag of CAA record.",
                        "example": "Example ca_tag"
                    },
                    "ca_value": {
                        "type": "string",
                        "description": "Value of CAA record",
                        "example": "Example ca_value"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordCaaCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The creation time of the record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name of the CAA record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "forbid_reclamation": {
                        "type": "boolean",
                        "description": "Determines if the reclamation is allowed for the record or not.",
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The CAA record name in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time to Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordCaaCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordcaacloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordcaacloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordCaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordCaa__ objects.",
                        "type": "array",
                        "title": "ListRecordCaaResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordCaa"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordCaa__ objects.",
                        "type": "object",
                        "title": "ListRecordCaaResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordCaa"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordCaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordCaa__ in object format.",
                        "type": "object",
                        "title": "CreateRecordCaaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordCaa"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordCaa__.",
                        "type": "string",
                        "title": "CreateRecordCaaResponse"
                    }
                ]
            },
            "GetRecordCaaResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordCaa"
                    },
                    {
                        "description": "The response format to retrieve __RecordCaa__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordCaaResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordCaa"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordCaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordCaa__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordCaaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordCaa"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordCaa__ .",
                        "type": "string",
                        "title": "UpdateRecordCaaResponse"
                    }
                ]
            },
            "RecordDhcid": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The creation time of the record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator.",
                        "enum": [
                            "SYSTEM",
                            "STATIC",
                            "DYNAMIC"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "dhcid": {
                        "type": "string",
                        "description": "The Base64 encoded DHCP client information.",
                        "readOnly": true,
                        "example": "Example dhcid"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for the DHCID record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DHCID record in FQDN format.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "ListRecordDhcidResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordDhcid__ objects.",
                        "type": "array",
                        "title": "ListRecordDhcidResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordDhcid"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordDhcid__ objects.",
                        "type": "object",
                        "title": "ListRecordDhcidResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordDhcid"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordDhcidResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordDhcid__ in object format.",
                        "type": "object",
                        "title": "CreateRecordDhcidResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDhcid"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordDhcid__.",
                        "type": "string",
                        "title": "CreateRecordDhcidResponse"
                    }
                ]
            },
            "GetRecordDhcidResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordDhcid"
                    },
                    {
                        "description": "The response format to retrieve __RecordDhcid__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordDhcidResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDhcid"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordDhcidResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordDhcid__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordDhcidResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDhcid"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordDhcid__ .",
                        "type": "string",
                        "title": "UpdateRecordDhcidResponse"
                    }
                ]
            },
            "RecordDnskey": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The public key encryption algorithm of a DNSKEY Record object.",
                        "enum": [
                            "DSA",
                            "ECDSAP256SHA256",
                            "ECDSAP384SHA384",
                            "NSEC3DSA",
                            "NSEC3RSASHA1",
                            "RSAMD5",
                            "RSASHA1",
                            "RSASHA256",
                            "RSASHA512"
                        ],
                        "readOnly": true,
                        "example": "Example algorithm"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The comment for the record.",
                        "readOnly": true,
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The creation time of the record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator.",
                        "enum": [
                            "SYSTEM"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "Name of a DNSKEY record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "The flags field is a 16-bit unsigned integer. Currently, only two bits of this value are used: the least significant bit and bit 7. The other bits are reserved for future use and must be zero. If bit 7 is set to 1, the key is a DNS zone key. Otherwise, the key is not a zone key and cannot be used to verify zone data. The least significant bit indicates \"secure entry point property\". If it is not zero, the key is a key signing key (KSK type). Otherwise, the key type is ZSK.",
                        "readOnly": true,
                        "example": 1
                    },
                    "key_tag": {
                        "type": "integer",
                        "description": "The key tag identifying the public key of a DNSKEY Record object.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNSKEY record in FQDN format. It has to be the same as the zone, where the record resides.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "public_key": {
                        "type": "string",
                        "description": "The public key. The format of the returned value depends on the key algorithm.",
                        "readOnly": true,
                        "example": "Example public_key"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides. Example: \"external\".",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "ListRecordDnskeyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordDnskey__ objects.",
                        "type": "array",
                        "title": "ListRecordDnskeyResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordDnskey"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordDnskey__ objects.",
                        "type": "object",
                        "title": "ListRecordDnskeyResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordDnskey"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordDnskeyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordDnskey__ in object format.",
                        "type": "object",
                        "title": "CreateRecordDnskeyResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDnskey"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordDnskey__.",
                        "type": "string",
                        "title": "CreateRecordDnskeyResponse"
                    }
                ]
            },
            "GetRecordDnskeyResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordDnskey"
                    },
                    {
                        "description": "The response format to retrieve __RecordDnskey__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordDnskeyResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDnskey"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordDnskeyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordDnskey__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordDnskeyResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDnskey"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordDnskey__ .",
                        "type": "string",
                        "title": "UpdateRecordDnskeyResponse"
                    }
                ]
            },
            "RecordDs": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm of the DNSKEY RR to which this DS RR refers. It uses the same algorithm values and types as the corresponding DNSKEY RR.",
                        "enum": [
                            "DSA",
                            "ECDSAP256SHA256",
                            "ECDSAP384SHA384",
                            "NSEC3DSA",
                            "NSEC3RSASHA1",
                            "RSAMD5",
                            "RSASHA1",
                            "RSASHA256",
                            "RSASHA512"
                        ],
                        "readOnly": true,
                        "example": "Example algorithm"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordDsCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The comment for the record.",
                        "readOnly": true,
                        "example": "Example comment"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The creation time of the record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "Creator of the record.",
                        "enum": [
                            "SYSTEM"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "digest": {
                        "type": "string",
                        "description": "The digest of the DNSKEY resource record that is stored in a DS Record object.",
                        "readOnly": true,
                        "example": "Example digest"
                    },
                    "digest_type": {
                        "type": "string",
                        "description": "The algorithm used to construct the digest.",
                        "enum": [
                            "SHA1",
                            "SHA256"
                        ],
                        "readOnly": true,
                        "example": "Example digest_type"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for the DS record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "key_tag": {
                        "type": "integer",
                        "description": "The key tag value that is used to determine which key to use to verify signatures.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS DS record in FQDN format.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides. Example: \"external\".",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordDsCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecorddscloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecorddscloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordDsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordDs__ objects.",
                        "type": "array",
                        "title": "ListRecordDsResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordDs"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordDs__ objects.",
                        "type": "object",
                        "title": "ListRecordDsResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordDs"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordDsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordDs__ in object format.",
                        "type": "object",
                        "title": "CreateRecordDsResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDs"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordDs__.",
                        "type": "string",
                        "title": "CreateRecordDsResponse"
                    }
                ]
            },
            "GetRecordDsResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordDs"
                    },
                    {
                        "description": "The response format to retrieve __RecordDs__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordDsResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDs"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordDsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordDs__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordDsResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDs"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordDs__ .",
                        "type": "string",
                        "title": "UpdateRecordDsResponse"
                    }
                ]
            },
            "RecordNsec": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordNsecCloudInfo"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "Time that the record was created.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "Creator of the record.",
                        "enum": [
                            "SYSTEM",
                            "STATIC",
                            "DYNAMIC"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "Name for an NSEC record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_next_owner_name": {
                        "type": "string",
                        "description": "Name of the next owner in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_next_owner_name"
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NSEC record in FQDN format.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "next_owner_name": {
                        "type": "string",
                        "description": "Name of the next owner that has authoritative data or that contains a delegation point NS record.",
                        "readOnly": true,
                        "example": "Example next_owner_name"
                    },
                    "rrset_types": {
                        "type": "array",
                        "description": "The RRSet types that exist at the original owner name of the NSEC RR.",
                        "enum": [
                            "string"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides. Example: \"external\".",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordNsecCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordnseccloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordnseccloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordNsecResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordNsec__ objects.",
                        "type": "array",
                        "title": "ListRecordNsecResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordNsec"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordNsec__ objects.",
                        "type": "object",
                        "title": "ListRecordNsecResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordNsec"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordNsecResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordNsec__ in object format.",
                        "type": "object",
                        "title": "CreateRecordNsecResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordNsec__.",
                        "type": "string",
                        "title": "CreateRecordNsecResponse"
                    }
                ]
            },
            "GetRecordNsecResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordNsec"
                    },
                    {
                        "description": "The response format to retrieve __RecordNsec__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordNsecResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordNsecResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordNsec__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordNsecResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordNsec__ .",
                        "type": "string",
                        "title": "UpdateRecordNsecResponse"
                    }
                ]
            },
            "RecordNsec3": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The hash algorithm that was used.",
                        "enum": [
                            "DSA",
                            "ECDSAP256SHA256",
                            "ECDSAP384SHA384",
                            "NSEC3DSA",
                            "NSEC3RSASHA1",
                            "RSAMD5",
                            "RSASHA1",
                            "RSASHA256",
                            "RSASHA512"
                        ],
                        "readOnly": true,
                        "example": "Example algorithm"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordNsec3CloudInfo"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The creation time of the record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "Creator of the record.",
                        "enum": [
                            "SYSTEM",
                            "STATIC",
                            "DYNAMIC"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "Name for an NSEC3 record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "The set of 8 one-bit flags, of which only one flag, the Opt-Out flag, is defined by RFC 5155. The Opt-Out flag indicates whether the NSEC3 record covers unsigned delegations.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iterations": {
                        "type": "integer",
                        "description": "The number of times the hash function was performed.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NSEC3 record in FQDN format.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "next_owner_name": {
                        "type": "string",
                        "description": "The hashed next owner name that has authoritative data or that contains a delegation point NS record.",
                        "readOnly": true,
                        "example": "Example next_owner_name"
                    },
                    "rrset_types": {
                        "type": "array",
                        "description": "The RRSet types that exist at the original owner name of the NSEC3 RR.",
                        "enum": [
                            "string"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "salt": {
                        "type": "string",
                        "description": "A series of case-insensitive hexadecimal digits. It is appended to the original owner name as protection against pre-calculated dictionary attacks. A new salt value is generated when ZSK rolls over. You can control the period of the rollover. For random salt values, the selected length is between one and 15 octets.",
                        "readOnly": true,
                        "example": "Example salt"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides. Example: \"external\".",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordNsec3CloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/Recordnsec3cloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "Recordnsec3cloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordNsec3Response": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordNsec3__ objects.",
                        "type": "array",
                        "title": "ListRecordNsec3ResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordNsec3"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordNsec3__ objects.",
                        "type": "object",
                        "title": "ListRecordNsec3ResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordNsec3"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordNsec3Response": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordNsec3__ in object format.",
                        "type": "object",
                        "title": "CreateRecordNsec3ResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec3"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordNsec3__.",
                        "type": "string",
                        "title": "CreateRecordNsec3Response"
                    }
                ]
            },
            "GetRecordNsec3Response": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordNsec3"
                    },
                    {
                        "description": "The response format to retrieve __RecordNsec3__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordNsec3ResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec3"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordNsec3Response": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordNsec3__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordNsec3ResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec3"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordNsec3__ .",
                        "type": "string",
                        "title": "UpdateRecordNsec3Response"
                    }
                ]
            },
            "RecordNsec3param": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The hash algorithm that was used.",
                        "enum": [
                            "DSA",
                            "ECDSAP256SHA256",
                            "ECDSAP384SHA384",
                            "NSEC3DSA",
                            "NSEC3RSASHA1",
                            "RSAMD5",
                            "RSASHA1",
                            "RSASHA256",
                            "RSASHA512"
                        ],
                        "readOnly": true,
                        "example": "Example algorithm"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordNsec3paramCloudInfo"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The creation time of the record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "Creator of the record.",
                        "enum": [
                            "SYSTEM",
                            "STATIC",
                            "DYNAMIC"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "Name for an NSEC3PARAM record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "flags": {
                        "type": "integer",
                        "description": "The set of 8 one-bit flags, of which only one flag, the Opt-Out flag, is defined by RFC 5155. The Opt-Out flag indicates whether the NSEC3 record covers unsigned delegations.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iterations": {
                        "type": "integer",
                        "description": "The number of times the hash function was performed.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NSEC3PARAM record in FQDN format. It has to be the same as the zone, where the record resides.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "salt": {
                        "type": "string",
                        "description": "A series of case-insensitive hexadecimal digits. It is appended to the original owner name as protection against pre-calculated dictionary attacks. A new salt value is generated when the ZSK rolls over, for which the user can control the period. For a random salt value, the selected length is between one and 15 octets.",
                        "readOnly": true,
                        "example": "Example salt"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides. Example: \"external\".",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordNsec3paramCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/Recordnsec3paramcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "Recordnsec3paramcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordNsec3paramResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordNsec3param__ objects.",
                        "type": "array",
                        "title": "ListRecordNsec3paramResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordNsec3param"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordNsec3param__ objects.",
                        "type": "object",
                        "title": "ListRecordNsec3paramResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordNsec3param"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordNsec3paramResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordNsec3param__ in object format.",
                        "type": "object",
                        "title": "CreateRecordNsec3paramResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec3param"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordNsec3param__.",
                        "type": "string",
                        "title": "CreateRecordNsec3paramResponse"
                    }
                ]
            },
            "GetRecordNsec3paramResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordNsec3param"
                    },
                    {
                        "description": "The response format to retrieve __RecordNsec3param__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordNsec3paramResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec3param"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordNsec3paramResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordNsec3param__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordNsec3paramResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordNsec3param"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordNsec3param__ .",
                        "type": "string",
                        "title": "UpdateRecordNsec3paramResponse"
                    }
                ]
            },
            "RecordRrsig": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The cryptographic algorithm that was used to create the signature. It uses the same algorithm types as the DNSKEY record indicated in the key tag field.",
                        "enum": [
                            "DSA",
                            "ECDSAP256SHA256",
                            "ECDSAP384SHA384",
                            "NSEC3DSA",
                            "NSEC3RSASHA1",
                            "RSAMD5",
                            "RSASHA1",
                            "RSASHA256",
                            "RSASHA512"
                        ],
                        "readOnly": true,
                        "example": "Example algorithm"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordRrsigCloudInfo"
                    },
                    "creation_time": {
                        "type": "integer",
                        "description": "The creation time of the record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator.",
                        "enum": [
                            "SYSTEM",
                            "STATIC",
                            "DYNAMIC"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "Name for an RRSIG record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_signer_name": {
                        "type": "string",
                        "description": "The domain name, in punycode format, of the zone that contains the signed RRset.",
                        "readOnly": true,
                        "example": "Example dns_signer_name"
                    },
                    "expiration_time": {
                        "type": "integer",
                        "description": "The expiry time of an RRSIG record in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "inception_time": {
                        "type": "integer",
                        "description": "The inception time of an RRSIG record in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "key_tag": {
                        "type": "integer",
                        "description": "The key tag value of the DNSKEY RR that validates the signature.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "labels": {
                        "type": "integer",
                        "description": "The number of labels in the name of the RRset signed with the RRSIG object.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RRSIG record in FQDN format.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "original_ttl": {
                        "type": "integer",
                        "description": "The TTL value of the RRset covered by the RRSIG record.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "signature": {
                        "type": "string",
                        "description": "The Base64 encoded cryptographic signature that covers the RRSIG RDATA of the RRSIG Record object.",
                        "readOnly": true,
                        "example": "Example signature"
                    },
                    "signer_name": {
                        "type": "string",
                        "description": "The domain name of the zone in FQDN format that contains the signed RRset.",
                        "readOnly": true,
                        "example": "Example signer_name"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "type_covered": {
                        "type": "string",
                        "description": "The RR type covered by the RRSIG record.",
                        "readOnly": true,
                        "example": "Example type_covered"
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides. Example: \"external\".",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordRrsigCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordrrsigcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordrrsigcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ListRecordRrsigResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordRrsig__ objects.",
                        "type": "array",
                        "title": "ListRecordRrsigResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordRrsig"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordRrsig__ objects.",
                        "type": "object",
                        "title": "ListRecordRrsigResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordRrsig"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordRrsigResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordRrsig__ in object format.",
                        "type": "object",
                        "title": "CreateRecordRrsigResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordRrsig"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordRrsig__.",
                        "type": "string",
                        "title": "CreateRecordRrsigResponse"
                    }
                ]
            },
            "GetRecordRrsigResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordRrsig"
                    },
                    {
                        "description": "The response format to retrieve __RecordRrsig__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordRrsigResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordRrsig"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordRrsigResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordRrsig__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordRrsigResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordRrsig"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordRrsig__ .",
                        "type": "string",
                        "title": "UpdateRecordRrsigResponse"
                    }
                ]
            },
            "RecordUnknown": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/RecordUnknownCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator. Note that changing creator from or to 'SYSTEM' value is not allowed.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "example": "Example creator"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "display_rdata": {
                        "type": "string",
                        "description": "Standard textual representation of the RDATA.",
                        "readOnly": true,
                        "example": "Example display_rdata"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name of the unknown record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "enable_host_name_policy": {
                        "type": "boolean",
                        "description": "Determines if host name policy is applicable for the record.",
                        "example": false
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "The Unknown record name in FQDN format. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "policy": {
                        "type": "string",
                        "description": "The host name policy for the record.",
                        "readOnly": true,
                        "example": "Example policy"
                    },
                    "record_type": {
                        "type": "string",
                        "description": "Specifies type of unknown resource record.",
                        "example": "Example record_type"
                    },
                    "subfield_values": {
                        "type": "array",
                        "description": "The list of rdata subfield values of unknown resource record.",
                        "enum": [
                            "rdatasubfield"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/RecordUnknownSubfieldValues"
                        }
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time to Live (TTL) value for the record. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the record resides. Example: \"external\".",
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides. Example: \"zone.com\". If a view is not specified when searching by zone, the default view is used.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "RecordUnknownCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/RecordunknowncloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "RecordunknowncloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "RecordUnknownSubfieldValues": {
                "type": "object",
                "properties": {
                    "field_value": {
                        "type": "string",
                        "description": "String representation of subfield value.",
                        "example": "Example field_value"
                    },
                    "field_type": {
                        "type": "string",
                        "description": "Type of field. \"B\": unsigned 8-bit integer, \"S\": unsigned 16-bit integer, \"I\": unsigned 32-bit integer. \"H\": BASE64, \"6\": an IPv6 address, \"4\": an IPv4 address, \"N\": a domain name, \"T\": text string, \"X\": opaque binary data",
                        "example": "Example field_type"
                    },
                    "include_length": {
                        "type": "string",
                        "description": "The 'size of 'length' sub-sub field to be included in RDATA.",
                        "enum": [
                            "NONE",
                            "8_BIT",
                            "16_BIT"
                        ],
                        "example": "Example include_length"
                    }
                }
            },
            "ListRecordUnknownResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordUnknown__ objects.",
                        "type": "array",
                        "title": "ListRecordUnknownResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordUnknown"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordUnknown__ objects.",
                        "type": "object",
                        "title": "ListRecordUnknownResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordUnknown"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordUnknownResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordUnknown__ in object format.",
                        "type": "object",
                        "title": "CreateRecordUnknownResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordUnknown"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordUnknown__.",
                        "type": "string",
                        "title": "CreateRecordUnknownResponse"
                    }
                ]
            },
            "GetRecordUnknownResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordUnknown"
                    },
                    {
                        "description": "The response format to retrieve __RecordUnknown__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordUnknownResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordUnknown"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordUnknownResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordUnknown__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordUnknownResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordUnknown"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordUnknown__ .",
                        "type": "string",
                        "title": "UpdateRecordUnknownResponse"
                    }
                ]
            },
            "RecordHostIpv4addr": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "bootfile": {
                        "type": "string",
                        "description": "The name of the boot file the client must download.",
                        "example": "Example bootfile"
                    },
                    "bootserver": {
                        "type": "string",
                        "description": "The IP address or hostname of the boot file server where the boot file is stored.",
                        "example": "Example bootserver"
                    },
                    "configure_for_dhcp": {
                        "type": "boolean",
                        "description": "Set this to True to enable the DHCP configuration for this host address.",
                        "example": false
                    },
                    "deny_bootp": {
                        "type": "boolean",
                        "description": "Set this to True to disable the BOOTP settings and deny BOOTP boot requests.",
                        "example": false
                    },
                    "discover_now_status": {
                        "type": "string",
                        "description": "The discovery status of this Host Address.",
                        "enum": [
                            "NONE",
                            "PENDING",
                            "RUNNING",
                            "COMPLETE",
                            "FAILED"
                        ],
                        "readOnly": true,
                        "example": "Example discover_now_status"
                    },
                    "discovered_data": {
                        "$ref": "#/components/schemas/RecordHostIpv4addrDiscoveredData"
                    },
                    "enable_pxe_lease_time": {
                        "type": "boolean",
                        "description": "Set this to True if you want the DHCP server to use a different lease time for PXE clients. You can specify the duration of time it takes a host to connect to a boot server, such as a TFTP server, and download the file it needs to boot. For example, set a longer lease time if the client downloads an OS (operating system) or configuration file, or set a shorter lease time if the client downloads only configuration changes. Enter the lease time for the preboot execution environment for hosts to boot remotely from a server.",
                        "example": false
                    },
                    "host": {
                        "type": "string",
                        "description": "The host to which the host address belongs, in FQDN format. It is only present when the host address object is not returned as part of a host.",
                        "readOnly": true,
                        "example": "Example host"
                    },
                    "ignore_client_requested_options": {
                        "type": "boolean",
                        "description": "If this field is set to false, the appliance returns all DHCP options the client is eligible to receive, rather than only the list of options the client has requested.",
                        "example": false
                    },
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the host.",
                        "example": "Example ipv4addr"
                    },
                    "is_invalid_mac": {
                        "type": "boolean",
                        "description": "This flag reflects whether the MAC address for this host address is invalid.",
                        "readOnly": true,
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "logic_filter_rules": {
                        "type": "array",
                        "description": "This field contains the logic filters to be applied on the this host address. This list corresponds to the match rules that are written to the dhcpd configuration file.",
                        "enum": [
                            "logicfilterrule"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/RecordHostIpv4addrLogicFilterRules"
                        }
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC address for this host address.",
                        "example": "Example mac"
                    },
                    "match_client": {
                        "type": "string",
                        "description": "Set this to 'MAC_ADDRESS' to assign the IP address to the selected host, provided that the MAC address of the requesting host matches the MAC address that you specify in the field. Set this to 'RESERVED' to reserve this particular IP address for future use, or if the IP address is statically configured on a system (the Infoblox server does not assign the address from a DHCP request).",
                        "example": "Example match_client"
                    },
                    "ms_ad_user_data": {
                        "$ref": "#/components/schemas/RecordHostIpv4addrMsAdUserData"
                    },
                    "network": {
                        "type": "string",
                        "description": "The network of the host address, in FQDN/CIDR format.",
                        "readOnly": true,
                        "example": "Example network"
                    },
                    "network_view": {
                        "type": "string",
                        "description": "The name of the network view in which the host address resides.",
                        "readOnly": true,
                        "example": "Example network_view"
                    },
                    "nextserver": {
                        "type": "string",
                        "description": "The name in FQDN format and/or IPv4 Address of the next server that the host needs to boot.",
                        "example": "Example nextserver"
                    },
                    "options": {
                        "type": "array",
                        "description": "An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.",
                        "enum": [
                            "dhcpoption"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/RecordHostIpv4addrOptions"
                        }
                    },
                    "pxe_lease_time": {
                        "type": "integer",
                        "description": "The lease time for PXE clients, see *enable_pxe_lease_time* for more information.",
                        "format": "int64",
                        "example": 1
                    },
                    "reserved_interface": {
                        "type": "string",
                        "description": "The reference to the reserved interface to which the device belongs.",
                        "example": "Example reserved_interface"
                    },
                    "use_bootfile": {
                        "type": "boolean",
                        "description": "Use flag for: bootfile",
                        "example": false
                    },
                    "use_bootserver": {
                        "type": "boolean",
                        "description": "Use flag for: bootserver",
                        "example": false
                    },
                    "use_deny_bootp": {
                        "type": "boolean",
                        "description": "Use flag for: deny_bootp",
                        "example": false
                    },
                    "use_for_ea_inheritance": {
                        "type": "boolean",
                        "description": "Set this to True when using this host address for EA inheritance.",
                        "example": false
                    },
                    "use_ignore_client_requested_options": {
                        "type": "boolean",
                        "description": "Use flag for: ignore_client_requested_options",
                        "example": false
                    },
                    "use_logic_filter_rules": {
                        "type": "boolean",
                        "description": "Use flag for: logic_filter_rules",
                        "example": false
                    },
                    "use_nextserver": {
                        "type": "boolean",
                        "description": "Use flag for: nextserver",
                        "example": false
                    },
                    "use_options": {
                        "type": "boolean",
                        "description": "Use flag for: options",
                        "example": false
                    },
                    "use_pxe_lease_time": {
                        "type": "boolean",
                        "description": "Use flag for: pxe_lease_time",
                        "example": false
                    }
                }
            },
            "RecordHostIpv4addrDiscoveredData": {
                "type": "object",
                "properties": {
                    "device_model": {
                        "type": "string",
                        "description": "The model name of the end device in the vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_model"
                    },
                    "device_port_name": {
                        "type": "string",
                        "description": "The system name of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_name"
                    },
                    "device_port_type": {
                        "type": "string",
                        "description": "The hardware type of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_type"
                    },
                    "device_type": {
                        "type": "string",
                        "description": "The type of end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_type"
                    },
                    "device_vendor": {
                        "type": "string",
                        "description": "The vendor name of the end host.",
                        "readOnly": true,
                        "example": "Example device_vendor"
                    },
                    "discovered_name": {
                        "type": "string",
                        "description": "The name of the network device associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example discovered_name"
                    },
                    "discoverer": {
                        "type": "string",
                        "description": "Specifies whether the IP address was discovered by a NetMRI or NIOS discovery process.",
                        "readOnly": true,
                        "example": "Example discoverer"
                    },
                    "duid": {
                        "type": "string",
                        "description": "For IPv6 address only. The DHCP unique identifier of the discovered host. This is an optional field, and data might not be included.",
                        "readOnly": true,
                        "example": "Example duid"
                    },
                    "first_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was first discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_no": {
                        "type": "integer",
                        "description": "The port redundant group number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_state": {
                        "type": "string",
                        "description": "The status for the IP address within port redundant group.",
                        "enum": [
                            "VIP",
                            "ACTIVE",
                            "STANDBY",
                            "NEGOTIATION"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_state"
                    },
                    "iprg_type": {
                        "type": "string",
                        "description": "The port redundant group type.",
                        "enum": [
                            "HSRP",
                            "VRRP"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_type"
                    },
                    "last_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was last discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "mac_address": {
                        "type": "string",
                        "description": "The discovered MAC address for the host. This is the unique identifier of a network device. The discovery acquires the MAC address for hosts that are located on the same network as the Grid member that is running the discovery. This can also be the MAC address of a virtual entity on a specified vSphere server.",
                        "readOnly": true,
                        "example": "Example mac_address"
                    },
                    "mgmt_ip_address": {
                        "type": "string",
                        "description": "The management IP address of the end host that has more than one IP.",
                        "readOnly": true,
                        "example": "Example mgmt_ip_address"
                    },
                    "netbios_name": {
                        "type": "string",
                        "description": "The name returned in the NetBIOS reply or the name you manually register for the discovered host.",
                        "readOnly": true,
                        "example": "Example netbios_name"
                    },
                    "network_component_description": {
                        "type": "string",
                        "description": "A textual description of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_description"
                    },
                    "network_component_ip": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_ip"
                    },
                    "network_component_model": {
                        "type": "string",
                        "description": "Model name of the switch port connected to the end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example network_component_model"
                    },
                    "network_component_name": {
                        "type": "string",
                        "description": "If a reverse lookup was successful for the IP address associated with this switch, the host name is displayed in this field.",
                        "readOnly": true,
                        "example": "Example network_component_name"
                    },
                    "network_component_port_description": {
                        "type": "string",
                        "description": "A textual description of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_description"
                    },
                    "network_component_port_name": {
                        "type": "string",
                        "description": "The name of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_name"
                    },
                    "network_component_port_number": {
                        "type": "string",
                        "description": "The number of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_number"
                    },
                    "network_component_type": {
                        "type": "string",
                        "description": "Identifies the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_type"
                    },
                    "network_component_vendor": {
                        "type": "string",
                        "description": "The vendor name of the switch port connected to the end host.",
                        "readOnly": true,
                        "example": "Example network_component_vendor"
                    },
                    "open_ports": {
                        "type": "string",
                        "description": "The list of opened ports on the IP address, represented as: \"TCP: 21,22,23 UDP: 137,139\". Limited to max total 1000 ports.",
                        "readOnly": true,
                        "example": "Example open_ports"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system of the detected host or virtual entity. The OS can be one of the following: * Microsoft for all discovered hosts that have a non-null value in the MAC addresses using the NetBIOS discovery method. * A value that a TCP discovery returns. * The OS of a virtual entity on a vSphere server.",
                        "readOnly": true,
                        "example": "Example os"
                    },
                    "port_duplex": {
                        "type": "string",
                        "description": "The negotiated or operational duplex setting of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_duplex"
                    },
                    "port_link_status": {
                        "type": "string",
                        "description": "The link status of the switch port connected to the end device. Indicates whether it is connected.",
                        "readOnly": true,
                        "example": "Example port_link_status"
                    },
                    "port_speed": {
                        "type": "string",
                        "description": "The interface speed, in Mbps, of the switch port.",
                        "readOnly": true,
                        "example": "Example port_speed"
                    },
                    "port_status": {
                        "type": "string",
                        "description": "The operational status of the switch port. Indicates whether the port is up or down.",
                        "readOnly": true,
                        "example": "Example port_status"
                    },
                    "port_type": {
                        "type": "string",
                        "description": "The type of switch port.",
                        "readOnly": true,
                        "example": "Example port_type"
                    },
                    "port_vlan_description": {
                        "type": "string",
                        "description": "The description of the VLAN of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_vlan_description"
                    },
                    "port_vlan_name": {
                        "type": "string",
                        "description": "The name of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_name"
                    },
                    "port_vlan_number": {
                        "type": "string",
                        "description": "The ID of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_number"
                    },
                    "v_adapter": {
                        "type": "string",
                        "description": "The name of the physical network adapter through which the virtual entity is connected to the appliance.",
                        "readOnly": true,
                        "example": "Example v_adapter"
                    },
                    "v_cluster": {
                        "type": "string",
                        "description": "The name of the VMware cluster to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_cluster"
                    },
                    "v_datacenter": {
                        "type": "string",
                        "description": "The name of the vSphere datacenter or container to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_datacenter"
                    },
                    "v_entity_name": {
                        "type": "string",
                        "description": "The name of the virtual entity.",
                        "readOnly": true,
                        "example": "Example v_entity_name"
                    },
                    "v_entity_type": {
                        "type": "string",
                        "description": "The virtual entity type. This can be blank or one of the following: Virtual Machine, Virtual Host, or Virtual Center. Virtual Center represents a VMware vCenter server.",
                        "readOnly": true,
                        "example": "Example v_entity_type"
                    },
                    "v_host": {
                        "type": "string",
                        "description": "The name of the VMware server on which the virtual entity was discovered.",
                        "readOnly": true,
                        "example": "Example v_host"
                    },
                    "v_switch": {
                        "type": "string",
                        "description": "The name of the switch to which the virtual entity is connected.",
                        "readOnly": true,
                        "example": "Example v_switch"
                    },
                    "vmi_name": {
                        "type": "string",
                        "description": "Name of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_name"
                    },
                    "vmi_id": {
                        "type": "string",
                        "description": "ID of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_id"
                    },
                    "vlan_port_group": {
                        "type": "string",
                        "description": "Port group which the virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vlan_port_group"
                    },
                    "vswitch_name": {
                        "type": "string",
                        "description": "Name of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_name"
                    },
                    "vswitch_id": {
                        "type": "string",
                        "description": "ID of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_id"
                    },
                    "vswitch_type": {
                        "type": "string",
                        "description": "Type of the virtual switch: standard or distributed.",
                        "enum": [
                            "Unknown",
                            "Standard",
                            "Distributed"
                        ],
                        "readOnly": true,
                        "example": "Example vswitch_type"
                    },
                    "vswitch_ipv6_enabled": {
                        "type": "boolean",
                        "description": "Indicates the virtual switch has IPV6 enabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "vport_name": {
                        "type": "string",
                        "description": "Name of the network adapter on the virtual switch connected with the virtual machine.",
                        "readOnly": true,
                        "example": "Example vport_name"
                    },
                    "vport_mac_address": {
                        "type": "string",
                        "description": "MAC address of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_mac_address"
                    },
                    "vport_link_status": {
                        "type": "string",
                        "description": "Link status of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_link_status"
                    },
                    "vport_conf_speed": {
                        "type": "string",
                        "description": "Configured speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_conf_speed"
                    },
                    "vport_conf_mode": {
                        "type": "string",
                        "description": "Configured mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_conf_mode"
                    },
                    "vport_speed": {
                        "type": "string",
                        "description": "Actual speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_speed"
                    },
                    "vport_mode": {
                        "type": "string",
                        "description": "Actual mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_mode"
                    },
                    "vswitch_segment_type": {
                        "type": "string",
                        "description": "Type of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_type"
                    },
                    "vswitch_segment_name": {
                        "type": "string",
                        "description": "Name of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_name"
                    },
                    "vswitch_segment_id": {
                        "type": "string",
                        "description": "ID of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_id"
                    },
                    "vswitch_segment_port_group": {
                        "type": "string",
                        "description": "Port group of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_port_group"
                    },
                    "vswitch_available_ports_count": {
                        "type": "integer",
                        "description": "Numer of available ports reported by the virtual switch on which the virtual machine/vport connected to.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vswitch_tep_type": {
                        "type": "string",
                        "description": "Type of virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_type"
                    },
                    "vswitch_tep_ip": {
                        "type": "string",
                        "description": "IP address of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_ip"
                    },
                    "vswitch_tep_port_group": {
                        "type": "string",
                        "description": "Port group of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_port_group"
                    },
                    "vswitch_tep_vlan": {
                        "type": "string",
                        "description": "VLAN of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_vlan"
                    },
                    "vswitch_tep_dhcp_server": {
                        "type": "string",
                        "description": "DHCP server of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_dhcp_server"
                    },
                    "vswitch_tep_multicast": {
                        "type": "string",
                        "description": "Muticast address of the virtual tunnel endpoint (VTEP) in the virtual swtich.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_multicast"
                    },
                    "vmhost_ip_address": {
                        "type": "string",
                        "description": "IP address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_ip_address"
                    },
                    "vmhost_name": {
                        "type": "string",
                        "description": "Name of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_name"
                    },
                    "vmhost_mac_address": {
                        "type": "string",
                        "description": "MAC address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_mac_address"
                    },
                    "vmhost_subnet_cidr": {
                        "type": "integer",
                        "description": "CIDR subnet of the physical node on which the virtual machine is hosted.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vmhost_nic_names": {
                        "type": "string",
                        "description": "List of all physical port names used by the virtual switch on the physical node on which the virtual machine is hosted. Represented as: \"eth1,eth2,eth3\".",
                        "readOnly": true,
                        "example": "Example vmhost_nic_names"
                    },
                    "vmi_tenant_id": {
                        "type": "string",
                        "description": "ID of the tenant which virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vmi_tenant_id"
                    },
                    "cmp_type": {
                        "type": "string",
                        "description": "If the IP is coming from a Cloud environment, the Cloud Management Platform type.",
                        "readOnly": true,
                        "example": "Example cmp_type"
                    },
                    "vmi_ip_type": {
                        "type": "string",
                        "description": "Discovered IP address type.",
                        "readOnly": true,
                        "example": "Example vmi_ip_type"
                    },
                    "vmi_private_address": {
                        "type": "string",
                        "description": "Private IP address of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_private_address"
                    },
                    "vmi_is_public_address": {
                        "type": "boolean",
                        "description": "Indicates whether the IP address is a public address.",
                        "readOnly": true,
                        "example": false
                    },
                    "cisco_ise_ssid": {
                        "type": "string",
                        "description": "The Cisco ISE SSID.",
                        "readOnly": true,
                        "example": "Example cisco_ise_ssid"
                    },
                    "cisco_ise_endpoint_profile": {
                        "type": "string",
                        "description": "The Endpoint Profile created in Cisco ISE.",
                        "readOnly": true,
                        "example": "Example cisco_ise_endpoint_profile"
                    },
                    "cisco_ise_session_state": {
                        "type": "string",
                        "description": "The Cisco ISE connection session state.",
                        "enum": [
                            "AUTHENTICATED",
                            "AUTHENTICATING",
                            "DISCONNECTED",
                            "POSTURED",
                            "STARTED"
                        ],
                        "readOnly": true,
                        "example": "Example cisco_ise_session_state"
                    },
                    "cisco_ise_security_group": {
                        "type": "string",
                        "description": "The Cisco ISE security group name.",
                        "readOnly": true,
                        "example": "Example cisco_ise_security_group"
                    },
                    "task_name": {
                        "type": "string",
                        "description": "The name of the discovery task.",
                        "readOnly": true,
                        "example": "Example task_name"
                    },
                    "network_component_location": {
                        "type": "string",
                        "description": "Location of the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_location"
                    },
                    "network_component_contact": {
                        "type": "string",
                        "description": "Contact information from the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_contact"
                    },
                    "device_location": {
                        "type": "string",
                        "description": "Location of device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_location"
                    },
                    "device_contact": {
                        "type": "string",
                        "description": "Contact information from device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_contact"
                    },
                    "ap_name": {
                        "type": "string",
                        "description": "Discovered name of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_name"
                    },
                    "ap_ip_address": {
                        "type": "string",
                        "description": "Discovered IP address of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ip_address"
                    },
                    "ap_ssid": {
                        "type": "string",
                        "description": "Service set identifier (SSID) associated with Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ssid"
                    },
                    "bridge_domain": {
                        "type": "string",
                        "description": "Discovered bridge domain.",
                        "readOnly": true,
                        "example": "Example bridge_domain"
                    },
                    "endpoint_groups": {
                        "type": "string",
                        "description": "A comma-separated list of the discovered endpoint groups.",
                        "readOnly": true,
                        "example": "Example endpoint_groups"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Discovered tenant.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "vrf_name": {
                        "type": "string",
                        "description": "The name of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_name"
                    },
                    "vrf_description": {
                        "type": "string",
                        "description": "Description of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_description"
                    },
                    "vrf_rd": {
                        "type": "string",
                        "description": "Route distinguisher of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_rd"
                    },
                    "bgp_as": {
                        "type": "integer",
                        "description": "The BGP autonomous system number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordHostIpv4addrLogicFilterRules": {
                "type": "object",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "The filter name.",
                        "example": "Example filter"
                    },
                    "type": {
                        "type": "string",
                        "description": "The filter type. Valid values are: * MAC * NAC * Option",
                        "example": "Example type"
                    }
                }
            },
            "RecordHostIpv4addrMsAdUserData": {
                "type": "object",
                "properties": {
                    "active_users_count": {
                        "type": "integer",
                        "description": "The number of active users.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordHostIpv4addrOptions": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the DHCP option.",
                        "example": "Example name"
                    },
                    "num": {
                        "type": "integer",
                        "description": "The code of the DHCP option.",
                        "format": "int64",
                        "example": 1
                    },
                    "vendor_class": {
                        "type": "string",
                        "description": "The name of the space this DHCP option is associated to.",
                        "example": "Example vendor_class"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the DHCP option",
                        "example": "Example value"
                    },
                    "use_option": {
                        "type": "boolean",
                        "description": "Only applies to special options that are displayed separately from other options and have a use flag. These options are: * routers * router-templates * domain-name-servers * domain-name * broadcast-address * broadcast-address-offset * dhcp-lease-time * dhcp6.name-servers",
                        "example": false
                    }
                }
            },
            "ListRecordHostIpv4addrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordHostIpv4addr__ objects.",
                        "type": "array",
                        "title": "ListRecordHostIpv4addrResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordHostIpv4addr"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordHostIpv4addr__ objects.",
                        "type": "object",
                        "title": "ListRecordHostIpv4addrResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordHostIpv4addr"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordHostIpv4addrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordHostIpv4addr__ in object format.",
                        "type": "object",
                        "title": "CreateRecordHostIpv4addrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHostIpv4addr"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordHostIpv4addr__.",
                        "type": "string",
                        "title": "CreateRecordHostIpv4addrResponse"
                    }
                ]
            },
            "GetRecordHostIpv4addrResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordHostIpv4addr"
                    },
                    {
                        "description": "The response format to retrieve __RecordHostIpv4addr__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordHostIpv4addrResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHostIpv4addr"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordHostIpv4addrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordHostIpv4addr__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordHostIpv4addrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHostIpv4addr"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordHostIpv4addr__ .",
                        "type": "string",
                        "title": "UpdateRecordHostIpv4addrResponse"
                    }
                ]
            },
            "RecordHostIpv6addr": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "address_type": {
                        "type": "string",
                        "description": "Type of the DHCP IPv6 Host Address object.",
                        "enum": [
                            "ADDRESS",
                            "PREFIX",
                            "BOTH"
                        ],
                        "example": "Example address_type"
                    },
                    "configure_for_dhcp": {
                        "type": "boolean",
                        "description": "Set this to True to enable the DHCP configuration for this IPv6 host address.",
                        "example": false
                    },
                    "discover_now_status": {
                        "type": "string",
                        "description": "The discovery status of this IPv6 Host Address.",
                        "enum": [
                            "NONE",
                            "PENDING",
                            "RUNNING",
                            "COMPLETE",
                            "FAILED"
                        ],
                        "readOnly": true,
                        "example": "Example discover_now_status"
                    },
                    "discovered_data": {
                        "$ref": "#/components/schemas/RecordHostIpv6addrDiscoveredData"
                    },
                    "domain_name": {
                        "type": "string",
                        "description": "Use this method to set or retrieve the domain_name value of the DHCP IPv6 Host Address object.",
                        "example": "Example domain_name"
                    },
                    "domain_name_servers": {
                        "type": "array",
                        "description": "The IPv6 addresses of DNS recursive name servers to which the DHCP client can send name resolution requests. The DHCP server includes this information in the DNS Recursive Name Server option in Advertise, Rebind, Information-Request, and Reply messages.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "duid": {
                        "type": "string",
                        "description": "DHCPv6 Unique Identifier (DUID) of the address object.",
                        "example": "Example duid"
                    },
                    "host": {
                        "type": "string",
                        "description": "The host to which the IPv6 host address belongs, in FQDN format. It is only present when the host address object is not returned as part of a host.",
                        "readOnly": true,
                        "example": "Example host"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address prefix of the DHCP IPv6 Host Address object.",
                        "example": "Example ipv6addr"
                    },
                    "ipv6prefix": {
                        "type": "string",
                        "description": "The IPv6 Address prefix of the DHCP IPv6 Host Address object.",
                        "example": "Example ipv6prefix"
                    },
                    "ipv6prefix_bits": {
                        "type": "integer",
                        "description": "Prefix bits of the DHCP IPv6 Host Address object.",
                        "format": "int64",
                        "example": 1
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "logic_filter_rules": {
                        "type": "array",
                        "description": "This field contains the logic filters to be applied on the this host address. This list corresponds to the match rules that are written to the dhcpd configuration file.",
                        "enum": [
                            "logicfilterrule"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/RecordHostIpv6addrLogicFilterRules"
                        }
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC address for this host address.",
                        "example": "Example mac"
                    },
                    "match_client": {
                        "type": "string",
                        "description": "The match_client value for this fixed address. Valid values are: \"DUID\": The host IP address is leased to the matching DUID. \"MAC_ADDRESS\": The host IP address is leased to the matching MAC address.",
                        "enum": [
                            "DUID",
                            "MAC_ADDRESS"
                        ],
                        "example": "Example match_client"
                    },
                    "ms_ad_user_data": {
                        "$ref": "#/components/schemas/RecordHostIpv6addrMsAdUserData"
                    },
                    "network": {
                        "type": "string",
                        "description": "The network of the host address, in FQDN/CIDR format.",
                        "readOnly": true,
                        "example": "Example network"
                    },
                    "network_view": {
                        "type": "string",
                        "description": "The name of the network view in which the host address resides.",
                        "readOnly": true,
                        "example": "Example network_view"
                    },
                    "options": {
                        "type": "array",
                        "description": "An array of DHCP option dhcpoption structs that lists the DHCP options associated with the object.",
                        "enum": [
                            "dhcpoption"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/RecordHostIpv6addrOptions"
                        }
                    },
                    "preferred_lifetime": {
                        "type": "integer",
                        "description": "Use this method to set or retrieve the preferred lifetime value of the DHCP IPv6 Host Address object.",
                        "format": "int64",
                        "example": 1
                    },
                    "reserved_interface": {
                        "type": "string",
                        "description": "The reference to the reserved interface to which the device belongs.",
                        "example": "Example reserved_interface"
                    },
                    "use_domain_name": {
                        "type": "boolean",
                        "description": "Use flag for: domain_name",
                        "example": false
                    },
                    "use_domain_name_servers": {
                        "type": "boolean",
                        "description": "Use flag for: domain_name_servers",
                        "example": false
                    },
                    "use_for_ea_inheritance": {
                        "type": "boolean",
                        "description": "Set this to True when using this host address for EA inheritance.",
                        "example": false
                    },
                    "use_logic_filter_rules": {
                        "type": "boolean",
                        "description": "Use flag for: logic_filter_rules",
                        "example": false
                    },
                    "use_options": {
                        "type": "boolean",
                        "description": "Use flag for: options",
                        "example": false
                    },
                    "use_preferred_lifetime": {
                        "type": "boolean",
                        "description": "Use flag for: preferred_lifetime",
                        "example": false
                    },
                    "use_valid_lifetime": {
                        "type": "boolean",
                        "description": "Use flag for: valid_lifetime",
                        "example": false
                    },
                    "valid_lifetime": {
                        "type": "integer",
                        "description": "Use this method to set or retrieve the valid lifetime value of the DHCP IPv6 Host Address object.",
                        "format": "int64",
                        "example": 1
                    }
                }
            },
            "RecordHostIpv6addrDiscoveredData": {
                "type": "object",
                "properties": {
                    "device_model": {
                        "type": "string",
                        "description": "The model name of the end device in the vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_model"
                    },
                    "device_port_name": {
                        "type": "string",
                        "description": "The system name of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_name"
                    },
                    "device_port_type": {
                        "type": "string",
                        "description": "The hardware type of the interface associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example device_port_type"
                    },
                    "device_type": {
                        "type": "string",
                        "description": "The type of end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example device_type"
                    },
                    "device_vendor": {
                        "type": "string",
                        "description": "The vendor name of the end host.",
                        "readOnly": true,
                        "example": "Example device_vendor"
                    },
                    "discovered_name": {
                        "type": "string",
                        "description": "The name of the network device associated with the discovered IP address.",
                        "readOnly": true,
                        "example": "Example discovered_name"
                    },
                    "discoverer": {
                        "type": "string",
                        "description": "Specifies whether the IP address was discovered by a NetMRI or NIOS discovery process.",
                        "readOnly": true,
                        "example": "Example discoverer"
                    },
                    "duid": {
                        "type": "string",
                        "description": "For IPv6 address only. The DHCP unique identifier of the discovered host. This is an optional field, and data might not be included.",
                        "readOnly": true,
                        "example": "Example duid"
                    },
                    "first_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was first discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_no": {
                        "type": "integer",
                        "description": "The port redundant group number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "iprg_state": {
                        "type": "string",
                        "description": "The status for the IP address within port redundant group.",
                        "enum": [
                            "VIP",
                            "ACTIVE",
                            "STANDBY",
                            "NEGOTIATION"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_state"
                    },
                    "iprg_type": {
                        "type": "string",
                        "description": "The port redundant group type.",
                        "enum": [
                            "HSRP",
                            "VRRP"
                        ],
                        "readOnly": true,
                        "example": "Example iprg_type"
                    },
                    "last_discovered": {
                        "type": "integer",
                        "description": "The date and time the IP address was last discovered in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "mac_address": {
                        "type": "string",
                        "description": "The discovered MAC address for the host. This is the unique identifier of a network device. The discovery acquires the MAC address for hosts that are located on the same network as the Grid member that is running the discovery. This can also be the MAC address of a virtual entity on a specified vSphere server.",
                        "readOnly": true,
                        "example": "Example mac_address"
                    },
                    "mgmt_ip_address": {
                        "type": "string",
                        "description": "The management IP address of the end host that has more than one IP.",
                        "readOnly": true,
                        "example": "Example mgmt_ip_address"
                    },
                    "netbios_name": {
                        "type": "string",
                        "description": "The name returned in the NetBIOS reply or the name you manually register for the discovered host.",
                        "readOnly": true,
                        "example": "Example netbios_name"
                    },
                    "network_component_description": {
                        "type": "string",
                        "description": "A textual description of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_description"
                    },
                    "network_component_ip": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_ip"
                    },
                    "network_component_model": {
                        "type": "string",
                        "description": "Model name of the switch port connected to the end host in vendor terminology.",
                        "readOnly": true,
                        "example": "Example network_component_model"
                    },
                    "network_component_name": {
                        "type": "string",
                        "description": "If a reverse lookup was successful for the IP address associated with this switch, the host name is displayed in this field.",
                        "readOnly": true,
                        "example": "Example network_component_name"
                    },
                    "network_component_port_description": {
                        "type": "string",
                        "description": "A textual description of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_description"
                    },
                    "network_component_port_name": {
                        "type": "string",
                        "description": "The name of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_name"
                    },
                    "network_component_port_number": {
                        "type": "string",
                        "description": "The number of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_port_number"
                    },
                    "network_component_type": {
                        "type": "string",
                        "description": "Identifies the switch that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example network_component_type"
                    },
                    "network_component_vendor": {
                        "type": "string",
                        "description": "The vendor name of the switch port connected to the end host.",
                        "readOnly": true,
                        "example": "Example network_component_vendor"
                    },
                    "open_ports": {
                        "type": "string",
                        "description": "The list of opened ports on the IP address, represented as: \"TCP: 21,22,23 UDP: 137,139\". Limited to max total 1000 ports.",
                        "readOnly": true,
                        "example": "Example open_ports"
                    },
                    "os": {
                        "type": "string",
                        "description": "The operating system of the detected host or virtual entity. The OS can be one of the following: * Microsoft for all discovered hosts that have a non-null value in the MAC addresses using the NetBIOS discovery method. * A value that a TCP discovery returns. * The OS of a virtual entity on a vSphere server.",
                        "readOnly": true,
                        "example": "Example os"
                    },
                    "port_duplex": {
                        "type": "string",
                        "description": "The negotiated or operational duplex setting of the switch port connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_duplex"
                    },
                    "port_link_status": {
                        "type": "string",
                        "description": "The link status of the switch port connected to the end device. Indicates whether it is connected.",
                        "readOnly": true,
                        "example": "Example port_link_status"
                    },
                    "port_speed": {
                        "type": "string",
                        "description": "The interface speed, in Mbps, of the switch port.",
                        "readOnly": true,
                        "example": "Example port_speed"
                    },
                    "port_status": {
                        "type": "string",
                        "description": "The operational status of the switch port. Indicates whether the port is up or down.",
                        "readOnly": true,
                        "example": "Example port_status"
                    },
                    "port_type": {
                        "type": "string",
                        "description": "The type of switch port.",
                        "readOnly": true,
                        "example": "Example port_type"
                    },
                    "port_vlan_description": {
                        "type": "string",
                        "description": "The description of the VLAN of the switch port that is connected to the end device.",
                        "readOnly": true,
                        "example": "Example port_vlan_description"
                    },
                    "port_vlan_name": {
                        "type": "string",
                        "description": "The name of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_name"
                    },
                    "port_vlan_number": {
                        "type": "string",
                        "description": "The ID of the VLAN of the switch port.",
                        "readOnly": true,
                        "example": "Example port_vlan_number"
                    },
                    "v_adapter": {
                        "type": "string",
                        "description": "The name of the physical network adapter through which the virtual entity is connected to the appliance.",
                        "readOnly": true,
                        "example": "Example v_adapter"
                    },
                    "v_cluster": {
                        "type": "string",
                        "description": "The name of the VMware cluster to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_cluster"
                    },
                    "v_datacenter": {
                        "type": "string",
                        "description": "The name of the vSphere datacenter or container to which the virtual entity belongs.",
                        "readOnly": true,
                        "example": "Example v_datacenter"
                    },
                    "v_entity_name": {
                        "type": "string",
                        "description": "The name of the virtual entity.",
                        "readOnly": true,
                        "example": "Example v_entity_name"
                    },
                    "v_entity_type": {
                        "type": "string",
                        "description": "The virtual entity type. This can be blank or one of the following: Virtual Machine, Virtual Host, or Virtual Center. Virtual Center represents a VMware vCenter server.",
                        "readOnly": true,
                        "example": "Example v_entity_type"
                    },
                    "v_host": {
                        "type": "string",
                        "description": "The name of the VMware server on which the virtual entity was discovered.",
                        "readOnly": true,
                        "example": "Example v_host"
                    },
                    "v_switch": {
                        "type": "string",
                        "description": "The name of the switch to which the virtual entity is connected.",
                        "readOnly": true,
                        "example": "Example v_switch"
                    },
                    "vmi_name": {
                        "type": "string",
                        "description": "Name of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_name"
                    },
                    "vmi_id": {
                        "type": "string",
                        "description": "ID of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_id"
                    },
                    "vlan_port_group": {
                        "type": "string",
                        "description": "Port group which the virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vlan_port_group"
                    },
                    "vswitch_name": {
                        "type": "string",
                        "description": "Name of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_name"
                    },
                    "vswitch_id": {
                        "type": "string",
                        "description": "ID of the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_id"
                    },
                    "vswitch_type": {
                        "type": "string",
                        "description": "Type of the virtual switch: standard or distributed.",
                        "enum": [
                            "Unknown",
                            "Standard",
                            "Distributed"
                        ],
                        "readOnly": true,
                        "example": "Example vswitch_type"
                    },
                    "vswitch_ipv6_enabled": {
                        "type": "boolean",
                        "description": "Indicates the virtual switch has IPV6 enabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "vport_name": {
                        "type": "string",
                        "description": "Name of the network adapter on the virtual switch connected with the virtual machine.",
                        "readOnly": true,
                        "example": "Example vport_name"
                    },
                    "vport_mac_address": {
                        "type": "string",
                        "description": "MAC address of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_mac_address"
                    },
                    "vport_link_status": {
                        "type": "string",
                        "description": "Link status of the network adapter on the virtual switch where the virtual machine connected to.",
                        "readOnly": true,
                        "example": "Example vport_link_status"
                    },
                    "vport_conf_speed": {
                        "type": "string",
                        "description": "Configured speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_conf_speed"
                    },
                    "vport_conf_mode": {
                        "type": "string",
                        "description": "Configured mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_conf_mode"
                    },
                    "vport_speed": {
                        "type": "string",
                        "description": "Actual speed of the network adapter on the virtual switch where the virtual machine connected to. Unit is kb.",
                        "readOnly": true,
                        "example": "Example vport_speed"
                    },
                    "vport_mode": {
                        "type": "string",
                        "description": "Actual mode of the network adapter on the virtual switch where the virtual machine connected to.",
                        "enum": [
                            "Unknown",
                            "Full-duplex",
                            "Half-duplex"
                        ],
                        "readOnly": true,
                        "example": "Example vport_mode"
                    },
                    "vswitch_segment_type": {
                        "type": "string",
                        "description": "Type of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_type"
                    },
                    "vswitch_segment_name": {
                        "type": "string",
                        "description": "Name of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_name"
                    },
                    "vswitch_segment_id": {
                        "type": "string",
                        "description": "ID of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_id"
                    },
                    "vswitch_segment_port_group": {
                        "type": "string",
                        "description": "Port group of the network segment on which the current virtual machine/vport connected to.",
                        "readOnly": true,
                        "example": "Example vswitch_segment_port_group"
                    },
                    "vswitch_available_ports_count": {
                        "type": "integer",
                        "description": "Numer of available ports reported by the virtual switch on which the virtual machine/vport connected to.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vswitch_tep_type": {
                        "type": "string",
                        "description": "Type of virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_type"
                    },
                    "vswitch_tep_ip": {
                        "type": "string",
                        "description": "IP address of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_ip"
                    },
                    "vswitch_tep_port_group": {
                        "type": "string",
                        "description": "Port group of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_port_group"
                    },
                    "vswitch_tep_vlan": {
                        "type": "string",
                        "description": "VLAN of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_vlan"
                    },
                    "vswitch_tep_dhcp_server": {
                        "type": "string",
                        "description": "DHCP server of the virtual tunnel endpoint (VTEP) in the virtual switch.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_dhcp_server"
                    },
                    "vswitch_tep_multicast": {
                        "type": "string",
                        "description": "Muticast address of the virtual tunnel endpoint (VTEP) in the virtual swtich.",
                        "readOnly": true,
                        "example": "Example vswitch_tep_multicast"
                    },
                    "vmhost_ip_address": {
                        "type": "string",
                        "description": "IP address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_ip_address"
                    },
                    "vmhost_name": {
                        "type": "string",
                        "description": "Name of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_name"
                    },
                    "vmhost_mac_address": {
                        "type": "string",
                        "description": "MAC address of the physical node on which the virtual machine is hosted.",
                        "readOnly": true,
                        "example": "Example vmhost_mac_address"
                    },
                    "vmhost_subnet_cidr": {
                        "type": "integer",
                        "description": "CIDR subnet of the physical node on which the virtual machine is hosted.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "vmhost_nic_names": {
                        "type": "string",
                        "description": "List of all physical port names used by the virtual switch on the physical node on which the virtual machine is hosted. Represented as: \"eth1,eth2,eth3\".",
                        "readOnly": true,
                        "example": "Example vmhost_nic_names"
                    },
                    "vmi_tenant_id": {
                        "type": "string",
                        "description": "ID of the tenant which virtual machine belongs to.",
                        "readOnly": true,
                        "example": "Example vmi_tenant_id"
                    },
                    "cmp_type": {
                        "type": "string",
                        "description": "If the IP is coming from a Cloud environment, the Cloud Management Platform type.",
                        "readOnly": true,
                        "example": "Example cmp_type"
                    },
                    "vmi_ip_type": {
                        "type": "string",
                        "description": "Discovered IP address type.",
                        "readOnly": true,
                        "example": "Example vmi_ip_type"
                    },
                    "vmi_private_address": {
                        "type": "string",
                        "description": "Private IP address of the virtual machine.",
                        "readOnly": true,
                        "example": "Example vmi_private_address"
                    },
                    "vmi_is_public_address": {
                        "type": "boolean",
                        "description": "Indicates whether the IP address is a public address.",
                        "readOnly": true,
                        "example": false
                    },
                    "cisco_ise_ssid": {
                        "type": "string",
                        "description": "The Cisco ISE SSID.",
                        "readOnly": true,
                        "example": "Example cisco_ise_ssid"
                    },
                    "cisco_ise_endpoint_profile": {
                        "type": "string",
                        "description": "The Endpoint Profile created in Cisco ISE.",
                        "readOnly": true,
                        "example": "Example cisco_ise_endpoint_profile"
                    },
                    "cisco_ise_session_state": {
                        "type": "string",
                        "description": "The Cisco ISE connection session state.",
                        "enum": [
                            "AUTHENTICATED",
                            "AUTHENTICATING",
                            "DISCONNECTED",
                            "POSTURED",
                            "STARTED"
                        ],
                        "readOnly": true,
                        "example": "Example cisco_ise_session_state"
                    },
                    "cisco_ise_security_group": {
                        "type": "string",
                        "description": "The Cisco ISE security group name.",
                        "readOnly": true,
                        "example": "Example cisco_ise_security_group"
                    },
                    "task_name": {
                        "type": "string",
                        "description": "The name of the discovery task.",
                        "readOnly": true,
                        "example": "Example task_name"
                    },
                    "network_component_location": {
                        "type": "string",
                        "description": "Location of the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_location"
                    },
                    "network_component_contact": {
                        "type": "string",
                        "description": "Contact information from the network component on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example network_component_contact"
                    },
                    "device_location": {
                        "type": "string",
                        "description": "Location of device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_location"
                    },
                    "device_contact": {
                        "type": "string",
                        "description": "Contact information from device on which the IP address was discovered.",
                        "readOnly": true,
                        "example": "Example device_contact"
                    },
                    "ap_name": {
                        "type": "string",
                        "description": "Discovered name of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_name"
                    },
                    "ap_ip_address": {
                        "type": "string",
                        "description": "Discovered IP address of Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ip_address"
                    },
                    "ap_ssid": {
                        "type": "string",
                        "description": "Service set identifier (SSID) associated with Wireless Access Point.",
                        "readOnly": true,
                        "example": "Example ap_ssid"
                    },
                    "bridge_domain": {
                        "type": "string",
                        "description": "Discovered bridge domain.",
                        "readOnly": true,
                        "example": "Example bridge_domain"
                    },
                    "endpoint_groups": {
                        "type": "string",
                        "description": "A comma-separated list of the discovered endpoint groups.",
                        "readOnly": true,
                        "example": "Example endpoint_groups"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Discovered tenant.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "vrf_name": {
                        "type": "string",
                        "description": "The name of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_name"
                    },
                    "vrf_description": {
                        "type": "string",
                        "description": "Description of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_description"
                    },
                    "vrf_rd": {
                        "type": "string",
                        "description": "Route distinguisher of the VRF.",
                        "readOnly": true,
                        "example": "Example vrf_rd"
                    },
                    "bgp_as": {
                        "type": "integer",
                        "description": "The BGP autonomous system number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordHostIpv6addrLogicFilterRules": {
                "type": "object",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "The filter name.",
                        "example": "Example filter"
                    },
                    "type": {
                        "type": "string",
                        "description": "The filter type. Valid values are: * MAC * NAC * Option",
                        "example": "Example type"
                    }
                }
            },
            "RecordHostIpv6addrMsAdUserData": {
                "type": "object",
                "properties": {
                    "active_users_count": {
                        "type": "integer",
                        "description": "The number of active users.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "RecordHostIpv6addrOptions": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the DHCP option.",
                        "example": "Example name"
                    },
                    "num": {
                        "type": "integer",
                        "description": "The code of the DHCP option.",
                        "format": "int64",
                        "example": 1
                    },
                    "vendor_class": {
                        "type": "string",
                        "description": "The name of the space this DHCP option is associated to.",
                        "example": "Example vendor_class"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the DHCP option",
                        "example": "Example value"
                    },
                    "use_option": {
                        "type": "boolean",
                        "description": "Only applies to special options that are displayed separately from other options and have a use flag. These options are: * routers * router-templates * domain-name-servers * domain-name * broadcast-address * broadcast-address-offset * dhcp-lease-time * dhcp6.name-servers",
                        "example": false
                    }
                }
            },
            "ListRecordHostIpv6addrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordHostIpv6addr__ objects.",
                        "type": "array",
                        "title": "ListRecordHostIpv6addrResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordHostIpv6addr"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordHostIpv6addr__ objects.",
                        "type": "object",
                        "title": "ListRecordHostIpv6addrResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordHostIpv6addr"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordHostIpv6addrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordHostIpv6addr__ in object format.",
                        "type": "object",
                        "title": "CreateRecordHostIpv6addrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHostIpv6addr"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordHostIpv6addr__.",
                        "type": "string",
                        "title": "CreateRecordHostIpv6addrResponse"
                    }
                ]
            },
            "GetRecordHostIpv6addrResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordHostIpv6addr"
                    },
                    {
                        "description": "The response format to retrieve __RecordHostIpv6addr__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordHostIpv6addrResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHostIpv6addr"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordHostIpv6addrResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordHostIpv6addr__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordHostIpv6addrResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordHostIpv6addr"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordHostIpv6addr__ .",
                        "type": "string",
                        "title": "UpdateRecordHostIpv6addrResponse"
                    }
                ]
            },
            "RecordDtclbdn": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "The comment for the DTC LBDN record object; maximum 256 characters.",
                        "readOnly": true,
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines whether the DTC LBDN is disabled or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time of the last DNS query in Epoch seconds format.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "lbdn": {
                        "type": "string",
                        "description": "The DTC LBDN object.",
                        "readOnly": true,
                        "example": "Example lbdn"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of the DTC LBDN record.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "An FQDN pattern, LBDN wildcards can be used.",
                        "readOnly": true,
                        "example": "Example pattern"
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS View in which the record resides.",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of the zone in which the record resides.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "ListRecordDtclbdnResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __RecordDtclbdn__ objects.",
                        "type": "array",
                        "title": "ListRecordDtclbdnResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/RecordDtclbdn"
                        }
                    },
                    {
                        "description": "The response format to retrieve __RecordDtclbdn__ objects.",
                        "type": "object",
                        "title": "ListRecordDtclbdnResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RecordDtclbdn"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordDtclbdnResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __RecordDtclbdn__ in object format.",
                        "type": "object",
                        "title": "CreateRecordDtclbdnResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDtclbdn"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __RecordDtclbdn__.",
                        "type": "string",
                        "title": "CreateRecordDtclbdnResponse"
                    }
                ]
            },
            "GetRecordDtclbdnResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RecordDtclbdn"
                    },
                    {
                        "description": "The response format to retrieve __RecordDtclbdn__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordDtclbdnResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDtclbdn"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordDtclbdnResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __RecordDtclbdn__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordDtclbdnResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RecordDtclbdn"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __RecordDtclbdn__ .",
                        "type": "string",
                        "title": "UpdateRecordDtclbdnResponse"
                    }
                ]
            },
            "ZoneAuth": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "address": {
                        "type": "string",
                        "description": "The IP address of the server that is serving this zone.",
                        "readOnly": true,
                        "example": "Example address"
                    },
                    "allow_active_dir": {
                        "type": "array",
                        "description": "This field allows the zone to receive GSS-TSIG authenticated DDNS updates from DHCP clients and servers in an AD domain. Note that addresses specified in this field ignore the permission set in the struct which will be set to 'ALLOW'.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthAllowActiveDir"
                        }
                    },
                    "allow_fixed_rrset_order": {
                        "type": "boolean",
                        "description": "The flag that allows to enable or disable fixed RRset ordering for authoritative forward-mapping zones.",
                        "example": false
                    },
                    "allow_gss_tsig_for_underscore_zone": {
                        "type": "boolean",
                        "description": "The flag that allows DHCP clients to perform GSS-TSIG signed updates for underscore zones.",
                        "example": false
                    },
                    "allow_gss_tsig_zone_updates": {
                        "type": "boolean",
                        "description": "The flag that enables or disables the zone for GSS-TSIG updates.",
                        "example": false
                    },
                    "allow_query": {
                        "type": "array",
                        "description": "Determines whether DNS queries are allowed from a named ACL, or from a list of IPv4/IPv6 addresses, networks, and TSIG keys for the hosts.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthAllowQuery"
                        }
                    },
                    "allow_transfer": {
                        "type": "array",
                        "description": "Determines whether zone transfers are allowed from a named ACL, or from a list of IPv4/IPv6 addresses, networks, and TSIG keys for the hosts.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthAllowTransfer"
                        }
                    },
                    "allow_update": {
                        "type": "array",
                        "description": "Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses, networks, and TSIG keys for the hosts.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthAllowUpdate"
                        }
                    },
                    "allow_update_forwarding": {
                        "type": "boolean",
                        "description": "The list with IP addresses, networks or TSIG keys for clients, from which forwarded dynamic updates are allowed.",
                        "example": false
                    },
                    "aws_rte53_zone_info": {
                        "$ref": "#/components/schemas/ZoneAuthAwsRte53ZoneInfo"
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/ZoneAuthCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the zone; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "copy_xfer_to_notify": {
                        "type": "boolean",
                        "description": "If this flag is set to True then copy allowed IPs from Allow Transfer to Also Notify.",
                        "example": false
                    },
                    "create_ptr_for_bulk_hosts": {
                        "type": "boolean",
                        "description": "Determines if PTR records are created for hosts automatically, if necessary, when the zone data is imported. This field is meaningful only when import_from is set.",
                        "writeOnly": true,
                        "example": false
                    },
                    "create_ptr_for_hosts": {
                        "type": "boolean",
                        "description": "Determines if PTR records are created for hosts automatically, if necessary, when the zone data is imported. This field is meaningful only when import_from is set.",
                        "writeOnly": true,
                        "example": false
                    },
                    "create_underscore_zones": {
                        "type": "boolean",
                        "description": "Determines whether automatic creation of subzones is enabled or not.",
                        "example": false
                    },
                    "ddns_force_creation_timestamp_update": {
                        "type": "boolean",
                        "description": "Defines whether creation timestamp of RR should be updated ' when DDNS update happens even if there is no change to ' the RR.",
                        "example": false
                    },
                    "ddns_principal_group": {
                        "type": "string",
                        "description": "The DDNS Principal cluster group name.",
                        "example": "Example ddns_principal_group"
                    },
                    "ddns_principal_tracking": {
                        "type": "boolean",
                        "description": "The flag that indicates whether the DDNS principal track is enabled or disabled.",
                        "example": false
                    },
                    "ddns_restrict_patterns": {
                        "type": "boolean",
                        "description": "The flag that indicates whether an option to restrict DDNS update request based on FQDN patterns is enabled or disabled.",
                        "example": false
                    },
                    "ddns_restrict_patterns_list": {
                        "type": "array",
                        "description": "The unordered list of restriction patterns for an option of to restrict DDNS updates based on FQDN patterns.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "ddns_restrict_protected": {
                        "type": "boolean",
                        "description": "The flag that indicates whether an option to restrict DDNS update request to protected resource records is enabled or disabled.",
                        "example": false
                    },
                    "ddns_restrict_secure": {
                        "type": "boolean",
                        "description": "The flag that indicates whether DDNS update request for principal other than target resource record's principal is restricted.",
                        "example": false
                    },
                    "ddns_restrict_static": {
                        "type": "boolean",
                        "description": "The flag that indicates whether an option to restrict DDNS update request to resource records which are marked as 'STATIC' is enabled or disabled.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.",
                        "example": false
                    },
                    "disable_forwarding": {
                        "type": "boolean",
                        "description": "Determines whether the name servers that host the zone should forward queries (ended with the domain name of the zone) to any configured forwarders.",
                        "example": false
                    },
                    "display_domain": {
                        "type": "string",
                        "description": "The displayed name of the DNS zone.",
                        "readOnly": true,
                        "example": "Example display_domain"
                    },
                    "dns_fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone in punycode format. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_fqdn"
                    },
                    "dns_integrity_enable": {
                        "type": "boolean",
                        "description": "If this is set to True, DNS integrity check is enabled for this zone.",
                        "example": false
                    },
                    "dns_integrity_frequency": {
                        "type": "integer",
                        "description": "The frequency, in seconds, of DNS integrity checks for this zone.",
                        "format": "int64",
                        "example": 1
                    },
                    "dns_integrity_member": {
                        "type": "string",
                        "description": "The Grid member that performs DNS integrity checks for this zone.",
                        "example": "Example dns_integrity_member"
                    },
                    "dns_integrity_verbose_logging": {
                        "type": "boolean",
                        "description": "If this is set to True, more information is logged for DNS integrity checks for this zone.",
                        "example": false
                    },
                    "dns_soa_email": {
                        "type": "string",
                        "description": "The SOA email for the zone in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_soa_email"
                    },
                    "dnssec_key_params": {
                        "$ref": "#/components/schemas/ZoneAuthDnssecKeyParams"
                    },
                    "dnssec_keys": {
                        "type": "array",
                        "description": "A list of DNSSEC keys for the zone.",
                        "enum": [
                            "dnsseckey"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthDnssecKeys"
                        }
                    },
                    "dnssec_ksk_rollover_date": {
                        "type": "integer",
                        "description": "The rollover date for the Key Signing Key.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "dnssec_zsk_rollover_date": {
                        "type": "integer",
                        "description": "The rollover date for the Zone Signing Key.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "do_host_abstraction": {
                        "type": "boolean",
                        "description": "Determines if hosts and bulk hosts are automatically created when the zone data is imported. This field is meaningful only when import_from is set.",
                        "writeOnly": true,
                        "example": false
                    },
                    "effective_check_names_policy": {
                        "type": "string",
                        "description": "The value of the check names policy, which indicates the action the appliance takes when it encounters host names that do not comply with the Strict Hostname Checking policy. This value applies only if the host name restriction policy is set to \"Strict Hostname Checking\".",
                        "enum": [
                            "FAIL",
                            "WARN"
                        ],
                        "example": "Example effective_check_names_policy"
                    },
                    "effective_record_name_policy": {
                        "type": "string",
                        "description": "The selected hostname policy for records under this zone.",
                        "readOnly": true,
                        "example": "Example effective_record_name_policy"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "external_primaries": {
                        "type": "array",
                        "description": "The list of external primary servers.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthExternalPrimaries"
                        }
                    },
                    "external_secondaries": {
                        "type": "array",
                        "description": "The list of external secondary servers.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthExternalSecondaries"
                        }
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.",
                        "example": "Example fqdn"
                    },
                    "grid_primary": {
                        "type": "array",
                        "description": "The grid primary servers for this zone.",
                        "enum": [
                            "memberserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthGridPrimary"
                        }
                    },
                    "grid_primary_shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "Determines if the server is duplicated with parent delegation.",
                        "readOnly": true,
                        "example": false
                    },
                    "grid_secondaries": {
                        "type": "array",
                        "description": "The list with Grid members that are secondary servers for this zone.",
                        "enum": [
                            "memberserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthGridSecondaries"
                        }
                    },
                    "import_from": {
                        "type": "string",
                        "description": "The IP address of the Infoblox appliance from which zone data is imported. Setting this address to '255.255.255.255' and do_host_abstraction to 'true' will create Host records from A records in this zone without importing zone data.",
                        "writeOnly": true,
                        "example": "Example import_from"
                    },
                    "is_dnssec_enabled": {
                        "type": "boolean",
                        "description": "This flag is set to True if DNSSEC is enabled for the zone.",
                        "readOnly": true,
                        "example": false
                    },
                    "is_dnssec_signed": {
                        "type": "boolean",
                        "description": "Determines if the zone is DNSSEC signed.",
                        "readOnly": true,
                        "example": false
                    },
                    "is_multimaster": {
                        "type": "boolean",
                        "description": "Determines if multi-master DNS is enabled for the zone.",
                        "readOnly": true,
                        "example": false
                    },
                    "last_queried": {
                        "type": "integer",
                        "description": "The time the zone was last queried on.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "last_queried_acl": {
                        "type": "array",
                        "description": "Determines last queried ACL for the specified IPv4 or IPv6 addresses and networks in scavenging settings.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthLastQueriedAcl"
                        }
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.",
                        "example": false
                    },
                    "locked_by": {
                        "type": "string",
                        "description": "The name of a superuser or the administrator who locked this zone.",
                        "readOnly": true,
                        "example": "Example locked_by"
                    },
                    "mask_prefix": {
                        "type": "string",
                        "description": "IPv4 Netmask or IPv6 prefix for this zone.",
                        "readOnly": true,
                        "example": "Example mask_prefix"
                    },
                    "member_soa_mnames": {
                        "type": "array",
                        "description": "The list of per-member SOA MNAME information.",
                        "enum": [
                            "gridmember_soamname"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthMemberSoaMnames"
                        }
                    },
                    "member_soa_serials": {
                        "type": "array",
                        "description": "The list of per-member SOA serial information.",
                        "enum": [
                            "gridmember_soaserial"
                        ],
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthMemberSoaSerials"
                        }
                    },
                    "ms_ad_integrated": {
                        "type": "boolean",
                        "description": "The flag that determines whether Active Directory is integrated or not. This field is valid only when ms_managed is \"STUB\", \"AUTH_PRIMARY\", or \"AUTH_BOTH\".",
                        "example": false
                    },
                    "ms_allow_transfer": {
                        "type": "array",
                        "description": "The list of DNS clients that are allowed to perform zone transfers from a Microsoft DNS server. This setting applies only to zones with Microsoft DNS servers that are either primary or secondary servers. This setting does not inherit any value from the Grid or from any member that defines an allow_transfer value. This setting does not apply to any grid member. Use the allow_transfer field to control which DNS clients are allowed to perform zone transfers on Grid members.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthMsAllowTransfer"
                        }
                    },
                    "ms_allow_transfer_mode": {
                        "type": "string",
                        "description": "Determines which DNS clients are allowed to perform zone transfers from a Microsoft DNS server. Valid values are: \"ADDRESS_AC\", to use ms_allow_transfer field for specifying IP addresses, networks and Transaction Signature (TSIG) keys for clients that are allowed to do zone transfers. \"ANY\", to allow any client. \"ANY_NS\", to allow only the nameservers listed in this zone. \"NONE\", to deny all zone transfer requests.",
                        "enum": [
                            "ADDRESS_AC",
                            "ANY",
                            "ANY_NS",
                            "NONE"
                        ],
                        "example": "Example ms_allow_transfer_mode"
                    },
                    "ms_dc_ns_record_creation": {
                        "type": "array",
                        "description": "The list of domain controllers that are allowed to create NS records for authoritative zones.",
                        "enum": [
                            "msserver:dcnsrecordcreation"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthMsDcNsRecordCreation"
                        }
                    },
                    "ms_ddns_mode": {
                        "type": "string",
                        "description": "Determines whether an Active Directory-integrated zone with a Microsoft DNS server as primary allows dynamic updates. Valid values are: \"SECURE\" if the zone allows secure updates only. \"NONE\" if the zone forbids dynamic updates. \"ANY\" if the zone accepts both secure and nonsecure updates. This field is valid only if ms_managed is either \"AUTH_PRIMARY\" or \"AUTH_BOTH\". If the flag ms_ad_integrated is false, the value \"SECURE\" is not allowed.",
                        "enum": [
                            "ANY",
                            "NONE",
                            "SECURE"
                        ],
                        "example": "Example ms_ddns_mode"
                    },
                    "ms_managed": {
                        "type": "string",
                        "description": "The flag that indicates whether the zone is assigned to a Microsoft DNS server. This flag returns the authoritative name server type of the Microsoft DNS server. Valid values are: \"NONE\" if the zone is not assigned to any Microsoft DNS server. \"STUB\" if the zone is assigned to a Microsoft DNS server as a stub zone. \"AUTH_PRIMARY\" if only the primary server of the zone is a Microsoft DNS server. \"AUTH_SECONDARY\" if only the secondary server of the zone is a Microsoft DNS server. \"AUTH_BOTH\" if both the primary and secondary servers of the zone are Microsoft DNS servers.",
                        "enum": [
                            "AUTH_BOTH",
                            "AUTH_PRIMARY",
                            "AUTH_SECONDARY",
                            "NONE",
                            "STUB"
                        ],
                        "readOnly": true,
                        "example": "Example ms_managed"
                    },
                    "ms_primaries": {
                        "type": "array",
                        "description": "The list with the Microsoft DNS servers that are primary servers for the zone. Although a zone typically has just one primary name server, you can specify up to ten independent servers for a single zone.",
                        "enum": [
                            "msdnsserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthMsPrimaries"
                        }
                    },
                    "ms_read_only": {
                        "type": "boolean",
                        "description": "Determines if a Grid member manages the zone served by a Microsoft DNS server in read-only mode. This flag is true when a Grid member manages the zone in read-only mode, false otherwise. When the zone has the ms_read_only flag set to True, no changes can be made to this zone.",
                        "readOnly": true,
                        "example": false
                    },
                    "ms_secondaries": {
                        "type": "array",
                        "description": "The list with the Microsoft DNS servers that are secondary servers for the zone.",
                        "enum": [
                            "msdnsserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthMsSecondaries"
                        }
                    },
                    "ms_sync_disabled": {
                        "type": "boolean",
                        "description": "This flag controls whether this zone is synchronized with Microsoft DNS servers.",
                        "example": false
                    },
                    "ms_sync_master_name": {
                        "type": "string",
                        "description": "The name of MS synchronization master for this zone.",
                        "readOnly": true,
                        "example": "Example ms_sync_master_name"
                    },
                    "network_associations": {
                        "type": "array",
                        "description": "The list with the associated network/network container information.",
                        "enum": [
                            "network"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "network"
                            ]
                        }
                    },
                    "network_view": {
                        "type": "string",
                        "description": "The name of the network view in which this zone resides.",
                        "readOnly": true,
                        "example": "Example network_view"
                    },
                    "notify_delay": {
                        "type": "integer",
                        "description": "The number of seconds in delay with which notify messages are sent to secondaries.",
                        "format": "int64",
                        "example": 1
                    },
                    "ns_group": {
                        "type": "string",
                        "description": "The name server group that serves DNS for this zone.",
                        "example": "Example ns_group"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.",
                        "readOnly": true,
                        "example": "Example parent"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.",
                        "example": "Example prefix"
                    },
                    "primary_type": {
                        "type": "string",
                        "description": "The type of the primary server.",
                        "enum": [
                            "External",
                            "Grid",
                            "Microsoft",
                            "None"
                        ],
                        "readOnly": true,
                        "example": "Example primary_type"
                    },
                    "record_name_policy": {
                        "type": "string",
                        "description": "The hostname policy for records under this zone.",
                        "example": "Example record_name_policy"
                    },
                    "records_monitored": {
                        "type": "boolean",
                        "description": "Determines if this zone is also monitoring resource records.",
                        "readOnly": true,
                        "example": false
                    },
                    "remove_subzones": {
                        "type": "boolean",
                        "description": "Remove subzones delete option. Determines whether all child objects should be removed alongside with the parent zone or child objects should be assigned to another parental zone. By default child objects are deleted with the parent zone.",
                        "example": false
                    },
                    "restart_if_needed": {
                        "type": "boolean",
                        "description": "Restarts the member service.",
                        "writeOnly": true,
                        "example": false
                    },
                    "rr_not_queried_enabled_time": {
                        "type": "integer",
                        "description": "The time data collection for Not Queried Resource Record was enabled for this zone.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "scavenging_settings": {
                        "$ref": "#/components/schemas/ZoneAuthScavengingSettings"
                    },
                    "set_soa_serial_number": {
                        "type": "boolean",
                        "description": "The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.",
                        "writeOnly": true,
                        "example": false
                    },
                    "soa_default_ttl": {
                        "type": "integer",
                        "description": "The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_email": {
                        "type": "string",
                        "description": "The SOA email value for this zone. This value can be in unicode format.",
                        "example": "Example soa_email"
                    },
                    "soa_expire": {
                        "type": "integer",
                        "description": "This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_negative_ttl": {
                        "type": "integer",
                        "description": "The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for \"Does Not Respond\" responses.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_refresh": {
                        "type": "integer",
                        "description": "This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_retry": {
                        "type": "integer",
                        "description": "This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_serial_number": {
                        "type": "integer",
                        "description": "The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.",
                        "format": "int64",
                        "example": 1
                    },
                    "srgs": {
                        "type": "array",
                        "description": "The associated shared record groups of a DNS zone. If a shared record group is associated with a zone, then all shared records in a shared record group will be shared in the zone.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "update_forwarding": {
                        "type": "array",
                        "description": "Use this field to allow or deny dynamic DNS updates that are forwarded from specific IPv4/IPv6 addresses, networks, or a named ACL. You can also provide TSIG keys for clients that are allowed or denied to perform zone updates. This setting overrides the member-level setting.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthUpdateForwarding"
                        }
                    },
                    "use_allow_active_dir": {
                        "type": "boolean",
                        "description": "Use flag for: allow_active_dir",
                        "example": false
                    },
                    "use_allow_query": {
                        "type": "boolean",
                        "description": "Use flag for: allow_query",
                        "example": false
                    },
                    "use_allow_transfer": {
                        "type": "boolean",
                        "description": "Use flag for: allow_transfer",
                        "example": false
                    },
                    "use_allow_update": {
                        "type": "boolean",
                        "description": "Use flag for: allow_update",
                        "example": false
                    },
                    "use_allow_update_forwarding": {
                        "type": "boolean",
                        "description": "Use flag for: allow_update_forwarding",
                        "example": false
                    },
                    "use_check_names_policy": {
                        "type": "boolean",
                        "description": "Apply policy to dynamic updates and inbound zone transfers (This value applies only if the host name restriction policy is set to \"Strict Hostname Checking\".)",
                        "example": false
                    },
                    "use_copy_xfer_to_notify": {
                        "type": "boolean",
                        "description": "Use flag for: copy_xfer_to_notify",
                        "example": false
                    },
                    "use_ddns_force_creation_timestamp_update": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_force_creation_timestamp_update",
                        "example": false
                    },
                    "use_ddns_patterns_restriction": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_patterns_list , ddns_restrict_patterns",
                        "example": false
                    },
                    "use_ddns_principal_security": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_secure , ddns_principal_tracking, ddns_principal_group",
                        "example": false
                    },
                    "use_ddns_restrict_protected": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_protected",
                        "example": false
                    },
                    "use_ddns_restrict_static": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_static",
                        "example": false
                    },
                    "use_dnssec_key_params": {
                        "type": "boolean",
                        "description": "Use flag for: dnssec_key_params",
                        "example": false
                    },
                    "use_external_primary": {
                        "type": "boolean",
                        "description": "This flag controls whether the zone is using an external primary.",
                        "example": false
                    },
                    "use_grid_zone_timer": {
                        "type": "boolean",
                        "description": "Use flag for: soa_default_ttl , soa_expire, soa_negative_ttl, soa_refresh, soa_retry",
                        "example": false
                    },
                    "use_import_from": {
                        "type": "boolean",
                        "description": "Use flag for: import_from",
                        "example": false
                    },
                    "use_notify_delay": {
                        "type": "boolean",
                        "description": "Use flag for: notify_delay",
                        "example": false
                    },
                    "use_record_name_policy": {
                        "type": "boolean",
                        "description": "Use flag for: record_name_policy",
                        "example": false
                    },
                    "use_scavenging_settings": {
                        "type": "boolean",
                        "description": "Use flag for: scavenging_settings , last_queried_acl",
                        "example": false
                    },
                    "use_soa_email": {
                        "type": "boolean",
                        "description": "Use flag for: soa_email",
                        "example": false
                    },
                    "using_srg_associations": {
                        "type": "boolean",
                        "description": "This is true if the zone is associated with a shared record group.",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the zone resides. Example \"external\".",
                        "example": "Example view"
                    },
                    "zone_format": {
                        "type": "string",
                        "description": "Determines the format of this zone.",
                        "enum": [
                            "FORWARD",
                            "IPV4",
                            "IPV6"
                        ],
                        "example": "Example zone_format"
                    },
                    "zone_not_queried_enabled_time": {
                        "type": "integer",
                        "description": "The time when \"DNS Zones Last Queried\" was turned on for this zone.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "ZoneAuthAllowActiveDir": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "ZoneAuthAllowQuery": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key. If the external primary server is a NIOS appliance running DNS One 2.x code, this can be set to :2xCOMPAT.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The name of the TSIG key. If 2.x TSIG compatibility is used, this is set to 'tsig_xfer' on retrieval, and ignored on insert or update.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneAuthAllowTransfer": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key. If the external primary server is a NIOS appliance running DNS One 2.x code, this can be set to :2xCOMPAT.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The name of the TSIG key. If 2.x TSIG compatibility is used, this is set to 'tsig_xfer' on retrieval, and ignored on insert or update.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneAuthAllowUpdate": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key. If the external primary server is a NIOS appliance running DNS One 2.x code, this can be set to :2xCOMPAT.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The name of the TSIG key. If 2.x TSIG compatibility is used, this is set to 'tsig_xfer' on retrieval, and ignored on insert or update.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneAuthAwsRte53ZoneInfo": {
                "type": "object",
                "properties": {
                    "associated_vpcs": {
                        "type": "array",
                        "description": "List of AWS VPC strings that are associated with this zone.",
                        "enum": [
                            "string"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "caller_reference": {
                        "type": "string",
                        "description": "User specified caller reference when zone was created.",
                        "readOnly": true,
                        "example": "Example caller_reference"
                    },
                    "delegation_set_id": {
                        "type": "string",
                        "description": "ID of delegation set associated with this zone.",
                        "readOnly": true,
                        "example": "Example delegation_set_id"
                    },
                    "hosted_zone_id": {
                        "type": "string",
                        "description": "AWS route 53 assigned ID for this zone.",
                        "readOnly": true,
                        "example": "Example hosted_zone_id"
                    },
                    "name_servers": {
                        "type": "array",
                        "description": "List of AWS name servers that are authoritative for this domain name.",
                        "enum": [
                            "string"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "record_set_count": {
                        "type": "integer",
                        "description": "Number of resource record sets in the hosted zone.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "Indicates whether private or public zone.",
                        "enum": [
                            "PRIVATE",
                            "PUBLIC"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    }
                }
            },
            "ZoneAuthCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/ZoneauthcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "ZoneauthcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ZoneAuthDnssecKeyParams": {
                "type": "object",
                "properties": {
                    "enable_ksk_auto_rollover": {
                        "type": "boolean",
                        "description": "If set to True, automatic rollovers for the signing key is enabled.",
                        "example": false
                    },
                    "ksk_algorithm": {
                        "type": "string",
                        "description": "Key Signing Key algorithm. Deprecated.",
                        "enum": [
                            "10",
                            "5",
                            "7",
                            "8",
                            "13",
                            "14"
                        ],
                        "example": "Example ksk_algorithm"
                    },
                    "ksk_algorithms": {
                        "description": "A list of Key Signing Key Algorithms.",
                        "enum": [
                            "dnsseckeyalgorithm"
                        ],
                        "$ref": "#/components/schemas/ZoneauthdnsseckeyparamsKskAlgorithms"
                    },
                    "ksk_rollover": {
                        "type": "integer",
                        "description": "Key Signing Key rollover interval, in seconds.",
                        "format": "int64",
                        "example": 1
                    },
                    "ksk_size": {
                        "type": "integer",
                        "description": "Key Signing Key size, in bits. Deprecated.",
                        "format": "int64",
                        "example": 1
                    },
                    "next_secure_type": {
                        "type": "string",
                        "description": "NSEC (next secure) types.",
                        "enum": [
                            "NSEC",
                            "NSEC3"
                        ],
                        "example": "Example next_secure_type"
                    },
                    "ksk_rollover_notification_config": {
                        "type": "string",
                        "description": "This field controls events for which users will be notified.",
                        "enum": [
                            "NONE",
                            "ALL",
                            "REQUIRE_MANUAL_INTERVENTION"
                        ],
                        "example": "Example ksk_rollover_notification_config"
                    },
                    "ksk_snmp_notification_enabled": {
                        "type": "boolean",
                        "description": "Enable SNMP notifications for KSK related events.",
                        "example": false
                    },
                    "ksk_email_notification_enabled": {
                        "type": "boolean",
                        "description": "Enable email notifications for KSK related events.",
                        "example": false
                    },
                    "nsec3_salt_min_length": {
                        "type": "integer",
                        "description": "The minimum length for NSEC3 salts.",
                        "format": "int64",
                        "example": 1
                    },
                    "nsec3_salt_max_length": {
                        "type": "integer",
                        "description": "The maximum length for NSEC3 salts.",
                        "format": "int64",
                        "example": 1
                    },
                    "nsec3_iterations": {
                        "type": "integer",
                        "description": "The number of iterations used for hashing NSEC3.",
                        "format": "int64",
                        "example": 1
                    },
                    "signature_expiration": {
                        "type": "integer",
                        "description": "Signature expiration time, in seconds.",
                        "format": "int64",
                        "example": 1
                    },
                    "zsk_algorithm": {
                        "type": "string",
                        "description": "Zone Signing Key algorithm. Deprecated.",
                        "enum": [
                            "10",
                            "5",
                            "7",
                            "8",
                            "13",
                            "14"
                        ],
                        "example": "Example zsk_algorithm"
                    },
                    "zsk_algorithms": {
                        "description": "A list of Zone Signing Key Algorithms.",
                        "enum": [
                            "dnsseckeyalgorithm"
                        ],
                        "$ref": "#/components/schemas/ZoneauthdnsseckeyparamsZskAlgorithms"
                    },
                    "zsk_rollover": {
                        "type": "integer",
                        "description": "Zone Signing Key rollover interval, in seconds.",
                        "format": "int64",
                        "example": 1
                    },
                    "zsk_rollover_mechanism": {
                        "type": "string",
                        "description": "Zone Signing Key rollover mechanism.",
                        "enum": [
                            "DOUBLE_SIGN",
                            "PRE_PUBLISH"
                        ],
                        "example": "Example zsk_rollover_mechanism"
                    },
                    "zsk_size": {
                        "type": "integer",
                        "description": "Zone Signing Key size, in bits. Deprecated.",
                        "format": "int64",
                        "example": 1
                    }
                }
            },
            "ZoneauthdnsseckeyparamsKskAlgorithms": {
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The signing key algorithm.",
                        "enum": [
                            "RSASHA1",
                            "RSASHA256",
                            "RSASHA512",
                            "ECDSAP256SHA256",
                            "ECDSAP384SHA384"
                        ],
                        "example": "Example algorithm"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The signing key size, in bits.",
                        "format": "int64",
                        "example": 1
                    }
                }
            },
            "ZoneauthdnsseckeyparamsZskAlgorithms": {
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The signing key algorithm.",
                        "enum": [
                            "RSASHA1",
                            "RSASHA256",
                            "RSASHA512",
                            "ECDSAP256SHA256",
                            "ECDSAP384SHA384"
                        ],
                        "example": "Example algorithm"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The signing key size, in bits.",
                        "format": "int64",
                        "example": 1
                    }
                }
            },
            "ZoneAuthDnssecKeys": {
                "type": "object",
                "properties": {
                    "tag": {
                        "type": "integer",
                        "description": "The tag of the key for the zone.",
                        "format": "int64",
                        "example": 1
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the key for the zone.",
                        "enum": [
                            "ACTIVE",
                            "PUBLISHED",
                            "ROLLED",
                            "IMPORTED"
                        ],
                        "readOnly": true,
                        "example": "Example status"
                    },
                    "next_event_date": {
                        "type": "integer",
                        "description": "The next event date for the key, the rollover date for an active key or the removal date for an already rolled one.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "The key type.",
                        "enum": [
                            "KSK",
                            "ZSK"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The public-key encryption algorithm. Values 1, 3 and 6 are deprecated from NIOS 9.0.",
                        "enum": [
                            "10",
                            "5",
                            "7",
                            "8",
                            "13",
                            "14"
                        ],
                        "readOnly": true,
                        "example": "Example algorithm"
                    },
                    "public_key": {
                        "type": "string",
                        "description": "The Base-64 encoding of the public key.",
                        "readOnly": true,
                        "example": "Example public_key"
                    }
                }
            },
            "ZoneAuthExternalPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneAuthExternalSecondaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneAuthGridPrimary": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The grid member name.",
                        "example": "Example name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "This flag governs whether the specified Grid member is in stealth mode or not. If set to True, the member is in stealth mode. This flag is ignored if the struct is specified as part of a stub zone.",
                        "example": false
                    },
                    "grid_replicate": {
                        "type": "boolean",
                        "description": "The flag represents DNS zone transfers if set to False, and ID Grid Replication if set to True. This flag is ignored if the struct is specified as part of a stub zone or if it is set as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "lead": {
                        "type": "boolean",
                        "description": "This flag controls whether the Grid lead secondary server performs zone transfers to non lead secondaries. This flag is ignored if the struct is specified as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "preferred_primaries": {
                        "description": "The primary preference list with Grid member names and\\or External Server extserver structs for this member.",
                        "enum": [
                            "extserver"
                        ],
                        "$ref": "#/components/schemas/ZoneauthgridprimaryPreferredPrimaries"
                    },
                    "enable_preferred_primaries": {
                        "type": "boolean",
                        "description": "This flag represents whether the preferred_primaries field values of this member are used.",
                        "example": false
                    }
                }
            },
            "ZoneauthgridprimaryPreferredPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneAuthGridSecondaries": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The grid member name.",
                        "example": "Example name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "This flag governs whether the specified Grid member is in stealth mode or not. If set to True, the member is in stealth mode. This flag is ignored if the struct is specified as part of a stub zone.",
                        "example": false
                    },
                    "grid_replicate": {
                        "type": "boolean",
                        "description": "The flag represents DNS zone transfers if set to False, and ID Grid Replication if set to True. This flag is ignored if the struct is specified as part of a stub zone or if it is set as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "lead": {
                        "type": "boolean",
                        "description": "This flag controls whether the Grid lead secondary server performs zone transfers to non lead secondaries. This flag is ignored if the struct is specified as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "preferred_primaries": {
                        "description": "The primary preference list with Grid member names and\\or External Server extserver structs for this member.",
                        "enum": [
                            "extserver"
                        ],
                        "$ref": "#/components/schemas/ZoneauthgridsecondariesPreferredPrimaries"
                    },
                    "enable_preferred_primaries": {
                        "type": "boolean",
                        "description": "This flag represents whether the preferred_primaries field values of this member are used.",
                        "example": false
                    }
                }
            },
            "ZoneauthgridsecondariesPreferredPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneAuthLastQueriedAcl": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "ZoneAuthMemberSoaMnames": {
                "type": "object",
                "properties": {
                    "grid_primary": {
                        "type": "string",
                        "description": "The grid primary server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" should be set when modifying or creating the object.",
                        "example": "Example grid_primary"
                    },
                    "ms_server_primary": {
                        "type": "string",
                        "description": "The primary MS server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" should be set when modifying or creating the object.",
                        "example": "Example ms_server_primary"
                    },
                    "mname": {
                        "type": "string",
                        "description": "Master's SOA MNAME. This value can be in unicode format.",
                        "example": "Example mname"
                    },
                    "dns_mname": {
                        "type": "string",
                        "description": "Master's SOA MNAME in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_mname"
                    }
                }
            },
            "ZoneAuthMemberSoaSerials": {
                "type": "object",
                "properties": {
                    "grid_primary": {
                        "type": "string",
                        "description": "The grid primary server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" will be set when the object is retrieved from the server.",
                        "readOnly": true,
                        "example": "Example grid_primary"
                    },
                    "ms_server_primary": {
                        "type": "string",
                        "description": "The primary MS server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" will be set when the object is retrieved from the server.",
                        "readOnly": true,
                        "example": "Example ms_server_primary"
                    },
                    "serial": {
                        "type": "integer",
                        "description": "The SOA serial number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "ZoneAuthMsAllowTransfer": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "ZoneAuthMsDcNsRecordCreation": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 address of the domain controller that is allowed to create NS records.",
                        "example": "Example address"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Optional user comment.",
                        "example": "Example comment"
                    }
                }
            },
            "ZoneAuthMsPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the server.",
                        "example": "Example address"
                    },
                    "is_master": {
                        "type": "boolean",
                        "description": "This flag indicates if this server is a synchronization master.",
                        "example": false
                    },
                    "ns_ip": {
                        "type": "string",
                        "description": "This address is used when generating the NS record in the zone, which can be different in case of multihomed hosts.",
                        "example": "Example ns_ip"
                    },
                    "ns_name": {
                        "type": "string",
                        "description": "This name is used when generating the NS record in the zone, which can be different in case of multihomed hosts.",
                        "example": "Example ns_name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    }
                }
            },
            "ZoneAuthMsSecondaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the server.",
                        "example": "Example address"
                    },
                    "is_master": {
                        "type": "boolean",
                        "description": "This flag indicates if this server is a synchronization master.",
                        "example": false
                    },
                    "ns_ip": {
                        "type": "string",
                        "description": "This address is used when generating the NS record in the zone, which can be different in case of multihomed hosts.",
                        "example": "Example ns_ip"
                    },
                    "ns_name": {
                        "type": "string",
                        "description": "This name is used when generating the NS record in the zone, which can be different in case of multihomed hosts.",
                        "example": "Example ns_name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    }
                }
            },
            "ZoneAuthScavengingSettings": {
                "type": "object",
                "properties": {
                    "enable_scavenging": {
                        "type": "boolean",
                        "description": "This flag indicates if the resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "enable_recurrent_scavenging": {
                        "type": "boolean",
                        "description": "This flag indicates if the recurrent resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "enable_auto_reclamation": {
                        "type": "boolean",
                        "description": "This flag indicates if the automatic resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "enable_rr_last_queried": {
                        "type": "boolean",
                        "description": "This flag indicates if the resource record last queried monitoring in affected zones is enabled or not.",
                        "example": false
                    },
                    "enable_zone_last_queried": {
                        "type": "boolean",
                        "description": "This flag indicates if the last queried monitoring for affected zones is enabled or not.",
                        "example": false
                    },
                    "reclaim_associated_records": {
                        "type": "boolean",
                        "description": "This flag indicates if the associated resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "scavenging_schedule": {
                        "description": "Schedule setting for cloud discovery task.",
                        "enum": [
                            "setting:schedule"
                        ],
                        "$ref": "#/components/schemas/ZoneauthscavengingsettingsScavengingSchedule"
                    },
                    "expression_list": {
                        "description": "The expression list. The particular record is treated as reclaimable if expression condition evaluates to 'true' for given record if scavenging hasn't been manually disabled on a given resource record.",
                        "enum": [
                            "expressionop"
                        ],
                        "$ref": "#/components/schemas/ZoneauthscavengingsettingsExpressionList"
                    },
                    "ea_expression_list": {
                        "description": "The extensible attributes expression list. The particular record is treated as reclaimable if extensible attributes expression condition evaluates to 'true' for given record if scavenging hasn't been manually disabled on a given resource record.",
                        "enum": [
                            "eaexpressionop"
                        ],
                        "$ref": "#/components/schemas/ZoneauthscavengingsettingsEaExpressionList"
                    }
                }
            },
            "ZoneauthscavengingsettingsScavengingSchedule": {
                "type": "object",
                "properties": {
                    "weekdays": {
                        "type": "array",
                        "description": "Days of the week when scheduling is triggered.",
                        "enum": [
                            "SATURDAY",
                            "SUNDAY",
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "time_zone": {
                        "type": "string",
                        "description": "The time zone for the schedule.",
                        "example": "Example time_zone"
                    },
                    "recurring_time": {
                        "type": "integer",
                        "description": "The recurring time for the schedule in Epoch seconds format. This field is obsolete and is preserved only for backward compatibility purposes. Please use other applicable fields to define the recurring schedule. DO NOT use recurring_time together with these fields. If you use recurring_time with other fields to define the recurring schedule, recurring_time has priority over year, hour_of_day, and minutes_past_hour and will override the values of these fields, although it does not override month and day_of_month. In this case, the recurring time value might be different than the intended value that you define.",
                        "format": "int64",
                        "example": 1
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency for the scheduled task.",
                        "enum": [
                            "DAILY",
                            "HOURLY",
                            "MONTHLY",
                            "WEEKLY"
                        ],
                        "example": "Example frequency"
                    },
                    "every": {
                        "type": "integer",
                        "description": "The number of frequency to wait before repeating the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "minutes_past_hour": {
                        "type": "integer",
                        "description": "The minutes past the hour for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "hour_of_day": {
                        "type": "integer",
                        "description": "The hour of day for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "year": {
                        "type": "integer",
                        "description": "The year for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "month": {
                        "type": "integer",
                        "description": "The month for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "day_of_month": {
                        "type": "integer",
                        "description": "The day of the month for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "repeat": {
                        "type": "string",
                        "description": "Indicates if the scheduled task will be repeated or run only once.",
                        "enum": [
                            "ONCE",
                            "RECUR"
                        ],
                        "example": "Example repeat"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "If set to True, the scheduled task is disabled.",
                        "example": false
                    }
                }
            },
            "ZoneauthscavengingsettingsExpressionList": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation name.",
                        "enum": [
                            "AND",
                            "ENDLIST",
                            "GT",
                            "LT",
                            "LE",
                            "GE",
                            "MATCH_IP",
                            "MATCH_RANGE",
                            "MATCH_CIDR",
                            "EQ",
                            "EXISTS",
                            "NOT_EQ",
                            "NOT_EXISTS",
                            "OR"
                        ],
                        "example": "Example op"
                    },
                    "op1": {
                        "type": "string",
                        "description": "The first operand value.",
                        "example": "Example op1"
                    },
                    "op1_type": {
                        "type": "string",
                        "description": "The first operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op1_type"
                    },
                    "op2": {
                        "type": "string",
                        "description": "The second operand value.",
                        "example": "Example op2"
                    },
                    "op2_type": {
                        "type": "string",
                        "description": "The second operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op2_type"
                    }
                }
            },
            "ZoneauthscavengingsettingsEaExpressionList": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation name.",
                        "enum": [
                            "AND",
                            "ENDLIST",
                            "GT",
                            "LT",
                            "LE",
                            "GE",
                            "MATCH_IP",
                            "MATCH_RANGE",
                            "MATCH_CIDR",
                            "EQ",
                            "EXISTS",
                            "NOT_EQ",
                            "NOT_EXISTS",
                            "OR"
                        ],
                        "example": "Example op"
                    },
                    "op1": {
                        "type": "string",
                        "description": "The name of the Extensible Attribute Definition object which is used as the first operand value.",
                        "example": "Example op1"
                    },
                    "op1_type": {
                        "type": "string",
                        "description": "The first operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op1_type"
                    },
                    "op2": {
                        "type": "string",
                        "description": "The second operand value.",
                        "example": "Example op2"
                    },
                    "op2_type": {
                        "type": "string",
                        "description": "The second operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op2_type"
                    }
                }
            },
            "ZoneAuthUpdateForwarding": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key. If the external primary server is a NIOS appliance running DNS One 2.x code, this can be set to :2xCOMPAT.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The name of the TSIG key. If 2.x TSIG compatibility is used, this is set to 'tsig_xfer' on retrieval, and ignored on insert or update.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ListZoneAuthResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __ZoneAuth__ objects.",
                        "type": "array",
                        "title": "ListZoneAuthResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuth"
                        }
                    },
                    {
                        "description": "The response format to retrieve __ZoneAuth__ objects.",
                        "type": "object",
                        "title": "ListZoneAuthResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ZoneAuth"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateZoneAuthResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __ZoneAuth__ in object format.",
                        "type": "object",
                        "title": "CreateZoneAuthResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneAuth"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __ZoneAuth__.",
                        "type": "string",
                        "title": "CreateZoneAuthResponse"
                    }
                ]
            },
            "GetZoneAuthResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ZoneAuth"
                    },
                    {
                        "description": "The response format to retrieve __ZoneAuth__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetZoneAuthResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneAuth"
                            }
                        }
                    }
                ]
            },
            "UpdateZoneAuthResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __ZoneAuth__ in object format.",
                        "type": "object",
                        "title": "UpdateZoneAuthResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneAuth"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __ZoneAuth__ .",
                        "type": "string",
                        "title": "UpdateZoneAuthResponse"
                    }
                ]
            },
            "ZoneDelegated": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "address": {
                        "type": "string",
                        "description": "The IP address of the server that is serving this zone.",
                        "readOnly": true,
                        "example": "Example address"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the zone; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "delegate_to": {
                        "type": "array",
                        "description": "This provides information for the remote name server that maintains data for the delegated zone. The Infoblox appliance redirects queries for data for the delegated zone to this remote name server.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneDelegatedDelegateTo"
                        }
                    },
                    "delegated_ttl": {
                        "type": "integer",
                        "description": "You can specify the Time to Live (TTL) values of auto-generated NS and glue records for a delegated zone. This value is the number of seconds that data is cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.",
                        "example": false
                    },
                    "display_domain": {
                        "type": "string",
                        "description": "The displayed name of the DNS zone.",
                        "readOnly": true,
                        "example": "Example display_domain"
                    },
                    "dns_fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone in punycode format. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_fqdn"
                    },
                    "enable_rfc2317_exclusion": {
                        "type": "boolean",
                        "description": "This flag controls whether automatic generation of RFC 2317 CNAMEs for delegated reverse zones overwrite existing PTR records. The default behavior is to overwrite all the existing records in the range; this corresponds to \"allow_ptr_creation_in_parent\" set to False. However, when this flag is set to True the existing PTR records are not overwritten.",
                        "example": false
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.",
                        "example": "Example fqdn"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.",
                        "example": false
                    },
                    "locked_by": {
                        "type": "string",
                        "description": "The name of a superuser or the administrator who locked this zone.",
                        "readOnly": true,
                        "example": "Example locked_by"
                    },
                    "mask_prefix": {
                        "type": "string",
                        "description": "IPv4 Netmask or IPv6 prefix for this zone.",
                        "readOnly": true,
                        "example": "Example mask_prefix"
                    },
                    "ms_ad_integrated": {
                        "type": "boolean",
                        "description": "The flag that determines whether Active Directory is integrated or not. This field is valid only when ms_managed is \"STUB\", \"AUTH_PRIMARY\", or \"AUTH_BOTH\".",
                        "example": false
                    },
                    "ms_ddns_mode": {
                        "type": "string",
                        "description": "Determines whether an Active Directory-integrated zone with a Microsoft DNS server as primary allows dynamic updates. Valid values are: \"SECURE\" if the zone allows secure updates only. \"NONE\" if the zone forbids dynamic updates. \"ANY\" if the zone accepts both secure and nonsecure updates. This field is valid only if ms_managed is either \"AUTH_PRIMARY\" or \"AUTH_BOTH\". If the flag ms_ad_integrated is false, the value \"SECURE\" is not allowed.",
                        "enum": [
                            "ANY",
                            "NONE",
                            "SECURE"
                        ],
                        "example": "Example ms_ddns_mode"
                    },
                    "ms_managed": {
                        "type": "string",
                        "description": "The flag that indicates whether the zone is assigned to a Microsoft DNS server. This flag returns the authoritative name server type of the Microsoft DNS server. Valid values are: \"NONE\" if the zone is not assigned to any Microsoft DNS server. \"STUB\" if the zone is assigned to a Microsoft DNS server as a stub zone. \"AUTH_PRIMARY\" if only the primary server of the zone is a Microsoft DNS server. \"AUTH_SECONDARY\" if only the secondary server of the zone is a Microsoft DNS server. \"AUTH_BOTH\" if both the primary and secondary servers of the zone are Microsoft DNS servers.",
                        "enum": [
                            "AUTH_BOTH",
                            "AUTH_PRIMARY",
                            "AUTH_SECONDARY",
                            "NONE",
                            "STUB"
                        ],
                        "readOnly": true,
                        "example": "Example ms_managed"
                    },
                    "ms_read_only": {
                        "type": "boolean",
                        "description": "Determines if a Grid member manages the zone served by a Microsoft DNS server in read-only mode. This flag is true when a Grid member manages the zone in read-only mode, false otherwise. When the zone has the ms_read_only flag set to True, no changes can be made to this zone.",
                        "readOnly": true,
                        "example": false
                    },
                    "ms_sync_master_name": {
                        "type": "string",
                        "description": "The name of MS synchronization master for this zone.",
                        "readOnly": true,
                        "example": "Example ms_sync_master_name"
                    },
                    "ns_group": {
                        "type": "string",
                        "description": "The delegation NS group bound with delegated zone.",
                        "example": "Example ns_group"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.",
                        "readOnly": true,
                        "example": "Example parent"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.",
                        "example": "Example prefix"
                    },
                    "use_delegated_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: delegated_ttl",
                        "example": false
                    },
                    "using_srg_associations": {
                        "type": "boolean",
                        "description": "This is true if the zone is associated with a shared record group.",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the zone resides. Example \"external\".",
                        "example": "Example view"
                    },
                    "zone_format": {
                        "type": "string",
                        "description": "Determines the format of this zone.",
                        "enum": [
                            "FORWARD",
                            "IPV4",
                            "IPV6"
                        ],
                        "example": "Example zone_format"
                    }
                }
            },
            "ZoneDelegatedDelegateTo": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ListZoneDelegatedResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __ZoneDelegated__ objects.",
                        "type": "array",
                        "title": "ListZoneDelegatedResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/ZoneDelegated"
                        }
                    },
                    {
                        "description": "The response format to retrieve __ZoneDelegated__ objects.",
                        "type": "object",
                        "title": "ListZoneDelegatedResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ZoneDelegated"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateZoneDelegatedResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __ZoneDelegated__ in object format.",
                        "type": "object",
                        "title": "CreateZoneDelegatedResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneDelegated"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __ZoneDelegated__.",
                        "type": "string",
                        "title": "CreateZoneDelegatedResponse"
                    }
                ]
            },
            "GetZoneDelegatedResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ZoneDelegated"
                    },
                    {
                        "description": "The response format to retrieve __ZoneDelegated__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetZoneDelegatedResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneDelegated"
                            }
                        }
                    }
                ]
            },
            "UpdateZoneDelegatedResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __ZoneDelegated__ in object format.",
                        "type": "object",
                        "title": "UpdateZoneDelegatedResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneDelegated"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __ZoneDelegated__ .",
                        "type": "string",
                        "title": "UpdateZoneDelegatedResponse"
                    }
                ]
            },
            "ZoneForward": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "address": {
                        "type": "string",
                        "description": "The IP address of the server that is serving this zone.",
                        "readOnly": true,
                        "example": "Example address"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the zone; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.",
                        "example": false
                    },
                    "disable_ns_generation": {
                        "type": "boolean",
                        "description": "Determines whether a auto-generation of NS records in parent zone is disabled or not. When this is set to False, the auto-generation is enabled.",
                        "example": false
                    },
                    "display_domain": {
                        "type": "string",
                        "description": "The displayed name of the DNS zone.",
                        "readOnly": true,
                        "example": "Example display_domain"
                    },
                    "dns_fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone in punycode format. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_fqdn"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "external_ns_group": {
                        "type": "string",
                        "description": "A forward stub server name server group.",
                        "example": "Example external_ns_group"
                    },
                    "forward_to": {
                        "type": "array",
                        "description": "The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified domain name.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneForwardForwardTo"
                        }
                    },
                    "forwarders_only": {
                        "type": "boolean",
                        "description": "Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.",
                        "example": false
                    },
                    "forwarding_servers": {
                        "type": "array",
                        "description": "The information for the Grid members to which you want the Infoblox appliance to forward queries for a specified domain name.",
                        "enum": [
                            "forwardingmemberserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneForwardForwardingServers"
                        }
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.",
                        "example": "Example fqdn"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.",
                        "example": false
                    },
                    "locked_by": {
                        "type": "string",
                        "description": "The name of a superuser or the administrator who locked this zone.",
                        "readOnly": true,
                        "example": "Example locked_by"
                    },
                    "mask_prefix": {
                        "type": "string",
                        "description": "IPv4 Netmask or IPv6 prefix for this zone.",
                        "readOnly": true,
                        "example": "Example mask_prefix"
                    },
                    "ms_ad_integrated": {
                        "type": "boolean",
                        "description": "The flag that determines whether Active Directory is integrated or not. This field is valid only when ms_managed is \"STUB\", \"AUTH_PRIMARY\", or \"AUTH_BOTH\".",
                        "example": false
                    },
                    "ms_ddns_mode": {
                        "type": "string",
                        "description": "Determines whether an Active Directory-integrated zone with a Microsoft DNS server as primary allows dynamic updates. Valid values are: \"SECURE\" if the zone allows secure updates only. \"NONE\" if the zone forbids dynamic updates. \"ANY\" if the zone accepts both secure and nonsecure updates. This field is valid only if ms_managed is either \"AUTH_PRIMARY\" or \"AUTH_BOTH\". If the flag ms_ad_integrated is false, the value \"SECURE\" is not allowed.",
                        "enum": [
                            "ANY",
                            "NONE",
                            "SECURE"
                        ],
                        "example": "Example ms_ddns_mode"
                    },
                    "ms_managed": {
                        "type": "string",
                        "description": "The flag that indicates whether the zone is assigned to a Microsoft DNS server. This flag returns the authoritative name server type of the Microsoft DNS server. Valid values are: \"NONE\" if the zone is not assigned to any Microsoft DNS server. \"STUB\" if the zone is assigned to a Microsoft DNS server as a stub zone. \"AUTH_PRIMARY\" if only the primary server of the zone is a Microsoft DNS server. \"AUTH_SECONDARY\" if only the secondary server of the zone is a Microsoft DNS server. \"AUTH_BOTH\" if both the primary and secondary servers of the zone are Microsoft DNS servers.",
                        "enum": [
                            "AUTH_BOTH",
                            "AUTH_PRIMARY",
                            "AUTH_SECONDARY",
                            "NONE",
                            "STUB"
                        ],
                        "readOnly": true,
                        "example": "Example ms_managed"
                    },
                    "ms_read_only": {
                        "type": "boolean",
                        "description": "Determines if a Grid member manages the zone served by a Microsoft DNS server in read-only mode. This flag is true when a Grid member manages the zone in read-only mode, false otherwise. When the zone has the ms_read_only flag set to True, no changes can be made to this zone.",
                        "readOnly": true,
                        "example": false
                    },
                    "ms_sync_master_name": {
                        "type": "string",
                        "description": "The name of MS synchronization master for this zone.",
                        "readOnly": true,
                        "example": "Example ms_sync_master_name"
                    },
                    "ns_group": {
                        "type": "string",
                        "description": "A forwarding member name server group.",
                        "example": "Example ns_group"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.",
                        "readOnly": true,
                        "example": "Example parent"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.",
                        "example": "Example prefix"
                    },
                    "using_srg_associations": {
                        "type": "boolean",
                        "description": "This is true if the zone is associated with a shared record group.",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the zone resides. Example \"external\".",
                        "example": "Example view"
                    },
                    "zone_format": {
                        "type": "string",
                        "description": "Determines the format of this zone.",
                        "enum": [
                            "FORWARD",
                            "IPV4",
                            "IPV6"
                        ],
                        "example": "Example zone_format"
                    }
                }
            },
            "ZoneForwardForwardTo": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneForwardForwardingServers": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of this Grid member in FQDN format.",
                        "example": "Example name"
                    },
                    "forwarders_only": {
                        "type": "boolean",
                        "description": "Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.",
                        "example": false
                    },
                    "forward_to": {
                        "description": "The information for the remote name server to which you want the Infoblox appliance to forward queries for a specified domain name.",
                        "enum": [
                            "extserver"
                        ],
                        "$ref": "#/components/schemas/ZoneforwardforwardingserversForwardTo"
                    },
                    "use_override_forwarders": {
                        "type": "boolean",
                        "description": "Use flag for: forward_to",
                        "example": false
                    }
                }
            },
            "ZoneforwardforwardingserversForwardTo": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ListZoneForwardResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __ZoneForward__ objects.",
                        "type": "array",
                        "title": "ListZoneForwardResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/ZoneForward"
                        }
                    },
                    {
                        "description": "The response format to retrieve __ZoneForward__ objects.",
                        "type": "object",
                        "title": "ListZoneForwardResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ZoneForward"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateZoneForwardResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __ZoneForward__ in object format.",
                        "type": "object",
                        "title": "CreateZoneForwardResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneForward"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __ZoneForward__.",
                        "type": "string",
                        "title": "CreateZoneForwardResponse"
                    }
                ]
            },
            "GetZoneForwardResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ZoneForward"
                    },
                    {
                        "description": "The response format to retrieve __ZoneForward__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetZoneForwardResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneForward"
                            }
                        }
                    }
                ]
            },
            "UpdateZoneForwardResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __ZoneForward__ in object format.",
                        "type": "object",
                        "title": "UpdateZoneForwardResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneForward"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __ZoneForward__ .",
                        "type": "string",
                        "title": "UpdateZoneForwardResponse"
                    }
                ]
            },
            "ZoneStub": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "address": {
                        "type": "string",
                        "description": "The IP address of the server that is serving this zone.",
                        "readOnly": true,
                        "example": "Example address"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the zone; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.",
                        "example": false
                    },
                    "disable_forwarding": {
                        "type": "boolean",
                        "description": "Determines if the name servers that host the zone should not forward queries that end with the domain name of the zone to any configured forwarders.",
                        "example": false
                    },
                    "display_domain": {
                        "type": "string",
                        "description": "The displayed name of the DNS zone.",
                        "readOnly": true,
                        "example": "Example display_domain"
                    },
                    "dns_fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone in punycode format. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_fqdn"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "external_ns_group": {
                        "type": "string",
                        "description": "A forward stub server name server group.",
                        "example": "Example external_ns_group"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone. For a reverse zone, this is in \"address/cidr\" format. For other zones, this is in FQDN format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be set.",
                        "example": "Example fqdn"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.",
                        "example": false
                    },
                    "locked_by": {
                        "type": "string",
                        "description": "The name of a superuser or the administrator who locked this zone.",
                        "readOnly": true,
                        "example": "Example locked_by"
                    },
                    "mask_prefix": {
                        "type": "string",
                        "description": "IPv4 Netmask or IPv6 prefix for this zone.",
                        "readOnly": true,
                        "example": "Example mask_prefix"
                    },
                    "ms_ad_integrated": {
                        "type": "boolean",
                        "description": "The flag that determines whether Active Directory is integrated or not. This field is valid only when ms_managed is \"STUB\", \"AUTH_PRIMARY\", or \"AUTH_BOTH\".",
                        "example": false
                    },
                    "ms_ddns_mode": {
                        "type": "string",
                        "description": "Determines whether an Active Directory-integrated zone with a Microsoft DNS server as primary allows dynamic updates. Valid values are: \"SECURE\" if the zone allows secure updates only. \"NONE\" if the zone forbids dynamic updates. \"ANY\" if the zone accepts both secure and nonsecure updates. This field is valid only if ms_managed is either \"AUTH_PRIMARY\" or \"AUTH_BOTH\". If the flag ms_ad_integrated is false, the value \"SECURE\" is not allowed.",
                        "enum": [
                            "ANY",
                            "NONE",
                            "SECURE"
                        ],
                        "example": "Example ms_ddns_mode"
                    },
                    "ms_managed": {
                        "type": "string",
                        "description": "The flag that indicates whether the zone is assigned to a Microsoft DNS server. This flag returns the authoritative name server type of the Microsoft DNS server. Valid values are: \"NONE\" if the zone is not assigned to any Microsoft DNS server. \"STUB\" if the zone is assigned to a Microsoft DNS server as a stub zone. \"AUTH_PRIMARY\" if only the primary server of the zone is a Microsoft DNS server. \"AUTH_SECONDARY\" if only the secondary server of the zone is a Microsoft DNS server. \"AUTH_BOTH\" if both the primary and secondary servers of the zone are Microsoft DNS servers.",
                        "enum": [
                            "AUTH_BOTH",
                            "AUTH_PRIMARY",
                            "AUTH_SECONDARY",
                            "NONE",
                            "STUB"
                        ],
                        "readOnly": true,
                        "example": "Example ms_managed"
                    },
                    "ms_read_only": {
                        "type": "boolean",
                        "description": "Determines if a Grid member manages the zone served by a Microsoft DNS server in read-only mode. This flag is true when a Grid member manages the zone in read-only mode, false otherwise. When the zone has the ms_read_only flag set to True, no changes can be made to this zone.",
                        "readOnly": true,
                        "example": false
                    },
                    "ms_sync_master_name": {
                        "type": "string",
                        "description": "The name of MS synchronization master for this zone.",
                        "readOnly": true,
                        "example": "Example ms_sync_master_name"
                    },
                    "ns_group": {
                        "type": "string",
                        "description": "A stub member name server group.",
                        "example": "Example ns_group"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.",
                        "readOnly": true,
                        "example": "Example parent"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.",
                        "example": "Example prefix"
                    },
                    "soa_email": {
                        "type": "string",
                        "description": "The SOA email for the zone. This value can be in unicode format.",
                        "readOnly": true,
                        "example": "Example soa_email"
                    },
                    "soa_expire": {
                        "type": "integer",
                        "description": "This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "soa_mname": {
                        "type": "string",
                        "description": "The SOA mname value for this zone. The Infoblox appliance allows you to change the name of the primary server on the SOA record that is automatically created when you initially configure a zone. Use this method to change the name of the primary server on the SOA record. For example, you may want to hide the primary server for a zone. If your device is named dns1.zone.tld, and for security reasons, you want to show a secondary server called dns2.zone.tld as the primary server. To do so, you would go to dns1.zone.tld zone (being the true primary) and change the primary server on the SOA to dns2.zone.tld to hide the true identity of the real primary server. This value can be in unicode format.",
                        "readOnly": true,
                        "example": "Example soa_mname"
                    },
                    "soa_negative_ttl": {
                        "type": "integer",
                        "description": "The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for \"Does Not Respond\" responses.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "soa_refresh": {
                        "type": "integer",
                        "description": "This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "soa_retry": {
                        "type": "integer",
                        "description": "This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "soa_serial_number": {
                        "type": "integer",
                        "description": "The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "stub_from": {
                        "type": "array",
                        "description": "The primary servers (masters) of this stub zone.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneStubStubFrom"
                        }
                    },
                    "stub_members": {
                        "type": "array",
                        "description": "The Grid member servers of this stub zone. Note that the lead/stealth/grid_replicate/ preferred_primaries/override_preferred_primaries fields of the struct will be ignored when set in this field.",
                        "enum": [
                            "memberserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneStubStubMembers"
                        }
                    },
                    "stub_msservers": {
                        "type": "array",
                        "description": "The Microsoft DNS servers of this stub zone. Note that the stealth field of the struct will be ignored when set in this field.",
                        "enum": [
                            "msdnsserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneStubStubMsservers"
                        }
                    },
                    "using_srg_associations": {
                        "type": "boolean",
                        "description": "This is true if the zone is associated with a shared record group.",
                        "readOnly": true,
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the zone resides. Example \"external\".",
                        "example": "Example view"
                    },
                    "zone_format": {
                        "type": "string",
                        "description": "Determines the format of this zone.",
                        "enum": [
                            "FORWARD",
                            "IPV4",
                            "IPV6"
                        ],
                        "example": "Example zone_format"
                    }
                }
            },
            "ZoneStubStubFrom": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneStubStubMembers": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The grid member name.",
                        "example": "Example name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "This flag governs whether the specified Grid member is in stealth mode or not. If set to True, the member is in stealth mode. This flag is ignored if the struct is specified as part of a stub zone.",
                        "example": false
                    },
                    "grid_replicate": {
                        "type": "boolean",
                        "description": "The flag represents DNS zone transfers if set to False, and ID Grid Replication if set to True. This flag is ignored if the struct is specified as part of a stub zone or if it is set as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "lead": {
                        "type": "boolean",
                        "description": "This flag controls whether the Grid lead secondary server performs zone transfers to non lead secondaries. This flag is ignored if the struct is specified as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "preferred_primaries": {
                        "description": "The primary preference list with Grid member names and\\or External Server extserver structs for this member.",
                        "enum": [
                            "extserver"
                        ],
                        "$ref": "#/components/schemas/ZonestubstubmembersPreferredPrimaries"
                    },
                    "enable_preferred_primaries": {
                        "type": "boolean",
                        "description": "This flag represents whether the preferred_primaries field values of this member are used.",
                        "example": false
                    }
                }
            },
            "ZonestubstubmembersPreferredPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneStubStubMsservers": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address of the server.",
                        "example": "Example address"
                    },
                    "is_master": {
                        "type": "boolean",
                        "description": "This flag indicates if this server is a synchronization master.",
                        "example": false
                    },
                    "ns_ip": {
                        "type": "string",
                        "description": "This address is used when generating the NS record in the zone, which can be different in case of multihomed hosts.",
                        "example": "Example ns_ip"
                    },
                    "ns_name": {
                        "type": "string",
                        "description": "This name is used when generating the NS record in the zone, which can be different in case of multihomed hosts.",
                        "example": "Example ns_name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    }
                }
            },
            "ListZoneStubResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __ZoneStub__ objects.",
                        "type": "array",
                        "title": "ListZoneStubResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/ZoneStub"
                        }
                    },
                    {
                        "description": "The response format to retrieve __ZoneStub__ objects.",
                        "type": "object",
                        "title": "ListZoneStubResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ZoneStub"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateZoneStubResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __ZoneStub__ in object format.",
                        "type": "object",
                        "title": "CreateZoneStubResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneStub"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __ZoneStub__.",
                        "type": "string",
                        "title": "CreateZoneStubResponse"
                    }
                ]
            },
            "GetZoneStubResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ZoneStub"
                    },
                    {
                        "description": "The response format to retrieve __ZoneStub__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetZoneStubResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneStub"
                            }
                        }
                    }
                ]
            },
            "UpdateZoneStubResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __ZoneStub__ in object format.",
                        "type": "object",
                        "title": "UpdateZoneStubResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneStub"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __ZoneStub__ .",
                        "type": "string",
                        "title": "UpdateZoneStubResponse"
                    }
                ]
            },
            "ZoneRp": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "address": {
                        "type": "string",
                        "description": "The IP address of the server that is serving this zone.",
                        "readOnly": true,
                        "example": "Example address"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the zone; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines whether a zone is disabled or not. When this is set to False, the zone is enabled.",
                        "example": false
                    },
                    "display_domain": {
                        "type": "string",
                        "description": "The displayed name of the DNS zone.",
                        "readOnly": true,
                        "example": "Example display_domain"
                    },
                    "dns_soa_email": {
                        "type": "string",
                        "description": "The SOA email for the zone in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_soa_email"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "external_primaries": {
                        "type": "array",
                        "description": "The list of external primary servers.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneRpExternalPrimaries"
                        }
                    },
                    "external_secondaries": {
                        "type": "array",
                        "description": "The list of external secondary servers.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneRpExternalSecondaries"
                        }
                    },
                    "fireeye_rule_mapping": {
                        "$ref": "#/components/schemas/ZoneRpFireeyeRuleMapping"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The name of this DNS zone in FQDN format.",
                        "example": "Example fqdn"
                    },
                    "grid_primary": {
                        "type": "array",
                        "description": "The grid primary servers for this zone.",
                        "enum": [
                            "memberserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneRpGridPrimary"
                        }
                    },
                    "grid_secondaries": {
                        "type": "array",
                        "description": "The list with Grid members that are secondary servers for this zone.",
                        "enum": [
                            "memberserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneRpGridSecondaries"
                        }
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only. The zone will continue to serve DNS data even when it is locked.",
                        "example": false
                    },
                    "locked_by": {
                        "type": "string",
                        "description": "The name of a superuser or the administrator who locked this zone.",
                        "readOnly": true,
                        "example": "Example locked_by"
                    },
                    "log_rpz": {
                        "type": "boolean",
                        "description": "Determines whether RPZ logging enabled or not at zone level. When this is set to False, the logging is disabled.",
                        "example": false
                    },
                    "mask_prefix": {
                        "type": "string",
                        "description": "IPv4 Netmask or IPv6 prefix for this zone.",
                        "readOnly": true,
                        "example": "Example mask_prefix"
                    },
                    "member_soa_mnames": {
                        "type": "array",
                        "description": "The list of per-member SOA MNAME information.",
                        "enum": [
                            "gridmember_soamname"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ZoneRpMemberSoaMnames"
                        }
                    },
                    "member_soa_serials": {
                        "type": "array",
                        "description": "The list of per-member SOA serial information.",
                        "enum": [
                            "gridmember_soaserial"
                        ],
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ZoneRpMemberSoaSerials"
                        }
                    },
                    "network_view": {
                        "type": "string",
                        "description": "The name of the network view in which this zone resides.",
                        "readOnly": true,
                        "example": "Example network_view"
                    },
                    "ns_group": {
                        "type": "string",
                        "description": "The name server group that serves DNS for this zone.",
                        "example": "Example ns_group"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The parent zone of this zone. Note that when searching for reverse zones, the \"in-addr.arpa\" notation should be used.",
                        "readOnly": true,
                        "example": "Example parent"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The RFC2317 prefix value of this DNS zone. Use this field only when the netmask is greater than 24 bits; that is, for a mask between 25 and 31 bits. Enter a prefix, such as the name of the allocated address block. The prefix can be alphanumeric characters, such as 128/26 , 128-189 , or sub-B.",
                        "example": "Example prefix"
                    },
                    "primary_type": {
                        "type": "string",
                        "description": "The type of the primary server.",
                        "enum": [
                            "External",
                            "Grid",
                            "None"
                        ],
                        "readOnly": true,
                        "example": "Example primary_type"
                    },
                    "record_name_policy": {
                        "type": "string",
                        "description": "The hostname policy for records under this zone.",
                        "example": "Example record_name_policy"
                    },
                    "rpz_drop_ip_rule_enabled": {
                        "type": "boolean",
                        "description": "Enables the appliance to ignore RPZ-IP triggers with prefix lengths less than the specified minimum prefix length.",
                        "example": false
                    },
                    "rpz_drop_ip_rule_min_prefix_length_ipv4": {
                        "type": "integer",
                        "description": "The minimum prefix length for IPv4 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv4 prefix length.",
                        "format": "int64",
                        "example": 1
                    },
                    "rpz_drop_ip_rule_min_prefix_length_ipv6": {
                        "type": "integer",
                        "description": "The minimum prefix length for IPv6 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv6 prefix length.",
                        "format": "int64",
                        "example": 1
                    },
                    "rpz_last_updated_time": {
                        "type": "integer",
                        "description": "The timestamp of the last update for zone data.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "rpz_policy": {
                        "type": "string",
                        "description": "The response policy zone override policy.",
                        "enum": [
                            "DISABLED",
                            "GIVEN",
                            "NODATA",
                            "NXDOMAIN",
                            "PASSTHRU",
                            "SUBSTITUTE"
                        ],
                        "example": "Example rpz_policy"
                    },
                    "rpz_priority": {
                        "type": "integer",
                        "description": "The priority of this response policy zone.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "rpz_priority_end": {
                        "type": "integer",
                        "description": "This number is for UI to identify the end of qualified zone list.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "rpz_severity": {
                        "type": "string",
                        "description": "The severity of this response policy zone.",
                        "enum": [
                            "CRITICAL",
                            "MAJOR",
                            "WARNING",
                            "INFORMATIONAL"
                        ],
                        "example": "Example rpz_severity"
                    },
                    "rpz_type": {
                        "type": "string",
                        "description": "The type of rpz zone.",
                        "enum": [
                            "LOCAL",
                            "FIREEYE",
                            "FEED"
                        ],
                        "example": "Example rpz_type"
                    },
                    "set_soa_serial_number": {
                        "type": "boolean",
                        "description": "The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.",
                        "writeOnly": true,
                        "example": false
                    },
                    "soa_default_ttl": {
                        "type": "integer",
                        "description": "The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_email": {
                        "type": "string",
                        "description": "The SOA email value for this zone. This value can be in unicode format.",
                        "example": "Example soa_email"
                    },
                    "soa_expire": {
                        "type": "integer",
                        "description": "This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the zone because the zone data is too old to be useful. The default is one week.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_negative_ttl": {
                        "type": "integer",
                        "description": "The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for \"Does Not Respond\" responses.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_refresh": {
                        "type": "integer",
                        "description": "This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that its data is current, and retrieve fresh data if it is not.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_retry": {
                        "type": "integer",
                        "description": "This indicates how long a secondary server must wait before attempting to recontact the primary server after a connection failure between the two servers occurs.",
                        "format": "int64",
                        "example": 1
                    },
                    "soa_serial_number": {
                        "type": "integer",
                        "description": "The serial number in the SOA record incrementally changes every time the record is modified. The Infoblox appliance allows you to change the serial number (in the SOA record) for the primary server so it is higher than the secondary server, thereby ensuring zone transfers come from the primary server (as they should). To change the serial number you need to set a new value at \"soa_serial_number\" and pass \"set_soa_serial_number\" as True.",
                        "format": "int64",
                        "example": 1
                    },
                    "substitute_name": {
                        "type": "string",
                        "description": "The canonical name of redirect target in substitute policy of response policy zone.",
                        "example": "Example substitute_name"
                    },
                    "use_external_primary": {
                        "type": "boolean",
                        "description": "This flag controls whether the zone is using an external primary.",
                        "example": false
                    },
                    "use_grid_zone_timer": {
                        "type": "boolean",
                        "description": "Use flag for: soa_default_ttl , soa_expire, soa_negative_ttl, soa_refresh, soa_retry",
                        "example": false
                    },
                    "use_log_rpz": {
                        "type": "boolean",
                        "description": "Use flag for: log_rpz",
                        "example": false
                    },
                    "use_record_name_policy": {
                        "type": "boolean",
                        "description": "Use flag for: record_name_policy",
                        "example": false
                    },
                    "use_rpz_drop_ip_rule": {
                        "type": "boolean",
                        "description": "Use flag for: rpz_drop_ip_rule_enabled , rpz_drop_ip_rule_min_prefix_length_ipv4, rpz_drop_ip_rule_min_prefix_length_ipv6",
                        "example": false
                    },
                    "use_soa_email": {
                        "type": "boolean",
                        "description": "Use flag for: soa_email",
                        "example": false
                    },
                    "view": {
                        "type": "string",
                        "description": "The name of the DNS view in which the zone resides. Example \"external\".",
                        "example": "Example view"
                    }
                }
            },
            "ZoneRpExternalPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneRpExternalSecondaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneRpFireeyeRuleMapping": {
                "type": "object",
                "properties": {
                    "apt_override": {
                        "type": "string",
                        "description": "The override setting for APT alerts.",
                        "enum": [
                            "PASSTHRU",
                            "NXDOMAIN",
                            "NODATA",
                            "SUBSTITUTE",
                            "NOOVERRIDE"
                        ],
                        "example": "Example apt_override"
                    },
                    "fireeye_alert_mapping": {
                        "description": "The FireEye alert mapping.",
                        "enum": [
                            "fireeye:alertmap"
                        ],
                        "$ref": "#/components/schemas/ZonerpfireeyerulemappingFireeyeAlertMapping"
                    },
                    "substituted_domain_name": {
                        "type": "string",
                        "description": "The domain name to be substituted, this is applicable only when apt_override is set to \"SUBSTITUTE\".",
                        "example": "Example substituted_domain_name"
                    }
                }
            },
            "ZonerpfireeyerulemappingFireeyeAlertMapping": {
                "type": "object",
                "properties": {
                    "alert_type": {
                        "type": "string",
                        "description": "The type of Fireeye Alert.",
                        "enum": [
                            "INFECTION_MATCH",
                            "WEB_INFECTION",
                            "MALWARE_OBJECT",
                            "DOMAIN_MATCH",
                            "MALWARE_CALLBACK"
                        ],
                        "example": "Example alert_type"
                    },
                    "rpz_rule": {
                        "type": "string",
                        "description": "The RPZ rule for the alert.",
                        "enum": [
                            "PASSTHRU",
                            "NXDOMAIN",
                            "NODATA",
                            "SUBSTITUTE",
                            "NONE"
                        ],
                        "example": "Example rpz_rule"
                    },
                    "lifetime": {
                        "type": "integer",
                        "description": "The expiration Lifetime of alert type. The 32-bit unsigned integer represents the amount of seconds this alert type will live for. 0 means the alert will never expire.",
                        "format": "int64",
                        "example": 1
                    }
                }
            },
            "ZoneRpGridPrimary": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The grid member name.",
                        "example": "Example name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "This flag governs whether the specified Grid member is in stealth mode or not. If set to True, the member is in stealth mode. This flag is ignored if the struct is specified as part of a stub zone.",
                        "example": false
                    },
                    "grid_replicate": {
                        "type": "boolean",
                        "description": "The flag represents DNS zone transfers if set to False, and ID Grid Replication if set to True. This flag is ignored if the struct is specified as part of a stub zone or if it is set as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "lead": {
                        "type": "boolean",
                        "description": "This flag controls whether the Grid lead secondary server performs zone transfers to non lead secondaries. This flag is ignored if the struct is specified as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "preferred_primaries": {
                        "description": "The primary preference list with Grid member names and\\or External Server extserver structs for this member.",
                        "enum": [
                            "extserver"
                        ],
                        "$ref": "#/components/schemas/ZonerpgridprimaryPreferredPrimaries"
                    },
                    "enable_preferred_primaries": {
                        "type": "boolean",
                        "description": "This flag represents whether the preferred_primaries field values of this member are used.",
                        "example": false
                    }
                }
            },
            "ZonerpgridprimaryPreferredPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneRpGridSecondaries": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The grid member name.",
                        "example": "Example name"
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "This flag governs whether the specified Grid member is in stealth mode or not. If set to True, the member is in stealth mode. This flag is ignored if the struct is specified as part of a stub zone.",
                        "example": false
                    },
                    "grid_replicate": {
                        "type": "boolean",
                        "description": "The flag represents DNS zone transfers if set to False, and ID Grid Replication if set to True. This flag is ignored if the struct is specified as part of a stub zone or if it is set as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "lead": {
                        "type": "boolean",
                        "description": "This flag controls whether the Grid lead secondary server performs zone transfers to non lead secondaries. This flag is ignored if the struct is specified as grid_member in an authoritative zone.",
                        "example": false
                    },
                    "preferred_primaries": {
                        "description": "The primary preference list with Grid member names and\\or External Server extserver structs for this member.",
                        "enum": [
                            "extserver"
                        ],
                        "$ref": "#/components/schemas/ZonerpgridsecondariesPreferredPrimaries"
                    },
                    "enable_preferred_primaries": {
                        "type": "boolean",
                        "description": "This flag represents whether the preferred_primaries field values of this member are used.",
                        "example": false
                    }
                }
            },
            "ZonerpgridsecondariesPreferredPrimaries": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ZoneRpMemberSoaMnames": {
                "type": "object",
                "properties": {
                    "grid_primary": {
                        "type": "string",
                        "description": "The grid primary server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" should be set when modifying or creating the object.",
                        "example": "Example grid_primary"
                    },
                    "ms_server_primary": {
                        "type": "string",
                        "description": "The primary MS server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" should be set when modifying or creating the object.",
                        "example": "Example ms_server_primary"
                    },
                    "mname": {
                        "type": "string",
                        "description": "Master's SOA MNAME. This value can be in unicode format.",
                        "example": "Example mname"
                    },
                    "dns_mname": {
                        "type": "string",
                        "description": "Master's SOA MNAME in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_mname"
                    }
                }
            },
            "ZoneRpMemberSoaSerials": {
                "type": "object",
                "properties": {
                    "grid_primary": {
                        "type": "string",
                        "description": "The grid primary server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" will be set when the object is retrieved from the server.",
                        "readOnly": true,
                        "example": "Example grid_primary"
                    },
                    "ms_server_primary": {
                        "type": "string",
                        "description": "The primary MS server for the zone. Only one of \"grid_primary\" or \"ms_server_primary\" will be set when the object is retrieved from the server.",
                        "readOnly": true,
                        "example": "Example ms_server_primary"
                    },
                    "serial": {
                        "type": "integer",
                        "description": "The SOA serial number.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "ListZoneRpResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __ZoneRp__ objects.",
                        "type": "array",
                        "title": "ListZoneRpResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/ZoneRp"
                        }
                    },
                    {
                        "description": "The response format to retrieve __ZoneRp__ objects.",
                        "type": "object",
                        "title": "ListZoneRpResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ZoneRp"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateZoneRpResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __ZoneRp__ in object format.",
                        "type": "object",
                        "title": "CreateZoneRpResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneRp"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __ZoneRp__.",
                        "type": "string",
                        "title": "CreateZoneRpResponse"
                    }
                ]
            },
            "GetZoneRpResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ZoneRp"
                    },
                    {
                        "description": "The response format to retrieve __ZoneRp__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetZoneRpResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneRp"
                            }
                        }
                    }
                ]
            },
            "UpdateZoneRpResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __ZoneRp__ in object format.",
                        "type": "object",
                        "title": "UpdateZoneRpResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneRp"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __ZoneRp__ .",
                        "type": "string",
                        "title": "UpdateZoneRpResponse"
                    }
                ]
            },
            "ZoneAuthDiscrepancy": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "description": {
                        "type": "string",
                        "description": "Information about the discrepancy.",
                        "readOnly": true,
                        "example": "Example description"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The severity of the discrepancy reported.",
                        "enum": [
                            "CRITICAL",
                            "SEVERE",
                            "WARNING",
                            "INFORMATIONAL",
                            "NORMAL"
                        ],
                        "readOnly": true,
                        "example": "Example severity"
                    },
                    "timestamp": {
                        "type": "integer",
                        "description": "The time when the DNS integrity check was last run for this zone.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "zone": {
                        "type": "string",
                        "description": "The reference of the zone during a search. Otherwise, this is the zone object of the zone to which the discrepancy refers.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "ListZoneAuthDiscrepancyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __ZoneAuthDiscrepancy__ objects.",
                        "type": "array",
                        "title": "ListZoneAuthDiscrepancyResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/ZoneAuthDiscrepancy"
                        }
                    },
                    {
                        "description": "The response format to retrieve __ZoneAuthDiscrepancy__ objects.",
                        "type": "object",
                        "title": "ListZoneAuthDiscrepancyResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ZoneAuthDiscrepancy"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateZoneAuthDiscrepancyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __ZoneAuthDiscrepancy__ in object format.",
                        "type": "object",
                        "title": "CreateZoneAuthDiscrepancyResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneAuthDiscrepancy"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __ZoneAuthDiscrepancy__.",
                        "type": "string",
                        "title": "CreateZoneAuthDiscrepancyResponse"
                    }
                ]
            },
            "GetZoneAuthDiscrepancyResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ZoneAuthDiscrepancy"
                    },
                    {
                        "description": "The response format to retrieve __ZoneAuthDiscrepancy__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetZoneAuthDiscrepancyResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneAuthDiscrepancy"
                            }
                        }
                    }
                ]
            },
            "UpdateZoneAuthDiscrepancyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __ZoneAuthDiscrepancy__ in object format.",
                        "type": "object",
                        "title": "UpdateZoneAuthDiscrepancyResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/ZoneAuthDiscrepancy"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __ZoneAuthDiscrepancy__ .",
                        "type": "string",
                        "title": "UpdateZoneAuthDiscrepancyResponse"
                    }
                ]
            },
            "Allrecords": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "address": {
                        "type": "string",
                        "description": "The record address.",
                        "readOnly": true,
                        "example": "Example address"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The record comment.",
                        "readOnly": true,
                        "example": "Example comment"
                    },
                    "creator": {
                        "type": "string",
                        "description": "The record creator.",
                        "enum": [
                            "STATIC",
                            "DYNAMIC",
                            "SYSTEM"
                        ],
                        "readOnly": true,
                        "example": "Example creator"
                    },
                    "ddns_principal": {
                        "type": "string",
                        "description": "The GSS-TSIG principal that owns this record.",
                        "readOnly": true,
                        "example": "Example ddns_principal"
                    },
                    "ddns_protected": {
                        "type": "boolean",
                        "description": "Determines if the DDNS updates for this record are allowed or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "The disable value determines if the record is disabled or not. \"False\" means the record is enabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "dtc_obscured": {
                        "type": "string",
                        "description": "The specific LBDN record.",
                        "readOnly": true,
                        "example": "Example dtc_obscured"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "reclaimable": {
                        "type": "boolean",
                        "description": "Determines if the record is reclaimable or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "record": {
                        "type": "string",
                        "description": "The record object, if supported by the WAPI. Otherwise, the value is \"None\".",
                        "readOnly": true,
                        "example": "Example record"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for which the record is valid or being cached. The 32-bit unsigned integer represents the duration in seconds. Zero indicates that the record should not be cached.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "The record type. When searching for an unspecified record type, the search is performed for all records. On retrieval, the appliance returns \"UNSUPPORTED\" for unsupported records.",
                        "enum": [
                            "ALL",
                            "record:a",
                            "record:aaaa",
                            "record:cname",
                            "record:dname",
                            "record:host",
                            "record:host_ipv4addr",
                            "record:host_ipv6addr",
                            "record:mx",
                            "record:naptr",
                            "record:ptr",
                            "record:srv",
                            "record:txt",
                            "record:unknown",
                            "sharedrecord:a",
                            "sharedrecord:aaaa",
                            "sharedrecord:mx",
                            "sharedrecord:srv",
                            "sharedrecord:txt"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    },
                    "view": {
                        "type": "string",
                        "description": "Name of the DNS View in which the record resides.",
                        "readOnly": true,
                        "example": "Example view"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Name of the zone in which the record resides.",
                        "readOnly": true,
                        "example": "Example zone"
                    }
                }
            },
            "ListAllrecordsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __Allrecords__ objects.",
                        "type": "array",
                        "title": "ListAllrecordsResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/Allrecords"
                        }
                    },
                    {
                        "description": "The response format to retrieve __Allrecords__ objects.",
                        "type": "object",
                        "title": "ListAllrecordsResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Allrecords"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateAllrecordsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __Allrecords__ in object format.",
                        "type": "object",
                        "title": "CreateAllrecordsResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Allrecords"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __Allrecords__.",
                        "type": "string",
                        "title": "CreateAllrecordsResponse"
                    }
                ]
            },
            "GetAllrecordsResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Allrecords"
                    },
                    {
                        "description": "The response format to retrieve __Allrecords__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetAllrecordsResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Allrecords"
                            }
                        }
                    }
                ]
            },
            "UpdateAllrecordsResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __Allrecords__ in object format.",
                        "type": "object",
                        "title": "UpdateAllrecordsResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Allrecords"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __Allrecords__ .",
                        "type": "string",
                        "title": "UpdateAllrecordsResponse"
                    }
                ]
            },
            "Recordnamepolicy": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "Determines whether the record name policy is Grid default.",
                        "example": false
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the record name policy object.",
                        "example": "Example name"
                    },
                    "pre_defined": {
                        "type": "boolean",
                        "description": "Determines whether the record name policy is a predefined one.",
                        "readOnly": true,
                        "example": false
                    },
                    "regex": {
                        "type": "string",
                        "description": "The POSIX regular expression the record names should match in order to comply with the record name policy.",
                        "example": "Example regex"
                    }
                }
            },
            "ListRecordnamepolicyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __Recordnamepolicy__ objects.",
                        "type": "array",
                        "title": "ListRecordnamepolicyResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/Recordnamepolicy"
                        }
                    },
                    {
                        "description": "The response format to retrieve __Recordnamepolicy__ objects.",
                        "type": "object",
                        "title": "ListRecordnamepolicyResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Recordnamepolicy"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateRecordnamepolicyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __Recordnamepolicy__ in object format.",
                        "type": "object",
                        "title": "CreateRecordnamepolicyResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Recordnamepolicy"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __Recordnamepolicy__.",
                        "type": "string",
                        "title": "CreateRecordnamepolicyResponse"
                    }
                ]
            },
            "GetRecordnamepolicyResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Recordnamepolicy"
                    },
                    {
                        "description": "The response format to retrieve __Recordnamepolicy__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetRecordnamepolicyResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Recordnamepolicy"
                            }
                        }
                    }
                ]
            },
            "UpdateRecordnamepolicyResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __Recordnamepolicy__ in object format.",
                        "type": "object",
                        "title": "UpdateRecordnamepolicyResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Recordnamepolicy"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __Recordnamepolicy__ .",
                        "type": "string",
                        "title": "UpdateRecordnamepolicyResponse"
                    }
                ]
            },
            "Dns64group": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "clients": {
                        "type": "array",
                        "description": "Access Control settings that contain IPv4 and IPv6 DNS clients and networks to which the DNS server is allowed to send synthesized AAAA records with the specified IPv6 prefix.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Dns64groupClients"
                        }
                    },
                    "comment": {
                        "type": "string",
                        "description": "The descriptive comment for the DNS64 synthesis group object.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines whether the DNS64 synthesis group is disabled.",
                        "example": false
                    },
                    "enable_dnssec_dns64": {
                        "type": "boolean",
                        "description": "Determines whether the DNS64 synthesis of AAAA records is enabled for DNS64 synthesis groups that request DNSSEC data.",
                        "example": false
                    },
                    "exclude": {
                        "type": "array",
                        "description": "Access Control settings that contain IPv6 addresses or prefix ranges that cannot be used by IPv6-only hosts, such as IP addresses in the ::ffff:0:0/96 network. When DNS server retrieves an AAAA record that contains an IPv6 address that matches an excluded address, it does not return the AAAA record. Instead it synthesizes an AAAA record from the A record.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Dns64groupExclude"
                        }
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "mapped": {
                        "type": "array",
                        "description": "Access Control settings that contain IPv4 addresses and networks for which the DNS server can synthesize AAAA records with the specified prefix.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Dns64groupMapped"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS64 synthesis group object.",
                        "example": "Example name"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IPv6 prefix used for the synthesized AAAA records. The prefix length must be /32, /40, /48, /56, /64 or /96, and all bits beyond the specified length must be zero.",
                        "example": "Example prefix"
                    }
                }
            },
            "Dns64groupClients": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "Dns64groupExclude": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "Dns64groupMapped": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "ListDns64groupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __Dns64group__ objects.",
                        "type": "array",
                        "title": "ListDns64groupResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/Dns64group"
                        }
                    },
                    {
                        "description": "The response format to retrieve __Dns64group__ objects.",
                        "type": "object",
                        "title": "ListDns64groupResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Dns64group"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateDns64groupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __Dns64group__ in object format.",
                        "type": "object",
                        "title": "CreateDns64groupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Dns64group"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __Dns64group__.",
                        "type": "string",
                        "title": "CreateDns64groupResponse"
                    }
                ]
            },
            "GetDns64groupResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Dns64group"
                    },
                    {
                        "description": "The response format to retrieve __Dns64group__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetDns64groupResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Dns64group"
                            }
                        }
                    }
                ]
            },
            "UpdateDns64groupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __Dns64group__ in object format.",
                        "type": "object",
                        "title": "UpdateDns64groupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Dns64group"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __Dns64group__ .",
                        "type": "string",
                        "title": "UpdateDns64groupResponse"
                    }
                ]
            },
            "Allnsgroup": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "The comment for the name server group.",
                        "readOnly": true,
                        "example": "Example comment"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the name server group.",
                        "readOnly": true,
                        "example": "Example name"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the name server group.",
                        "enum": [
                            "AUTH",
                            "FORWARDING_MEMBER",
                            "STUB_MEMBER",
                            "DELEGATION",
                            "FORWARD_STUB_SERVER"
                        ],
                        "readOnly": true,
                        "example": "Example type"
                    }
                }
            },
            "ListAllnsgroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __Allnsgroup__ objects.",
                        "type": "array",
                        "title": "ListAllnsgroupResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/Allnsgroup"
                        }
                    },
                    {
                        "description": "The response format to retrieve __Allnsgroup__ objects.",
                        "type": "object",
                        "title": "ListAllnsgroupResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Allnsgroup"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateAllnsgroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __Allnsgroup__ in object format.",
                        "type": "object",
                        "title": "CreateAllnsgroupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Allnsgroup"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __Allnsgroup__.",
                        "type": "string",
                        "title": "CreateAllnsgroupResponse"
                    }
                ]
            },
            "GetAllnsgroupResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Allnsgroup"
                    },
                    {
                        "description": "The response format to retrieve __Allnsgroup__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetAllnsgroupResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Allnsgroup"
                            }
                        }
                    }
                ]
            },
            "UpdateAllnsgroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __Allnsgroup__ in object format.",
                        "type": "object",
                        "title": "UpdateAllnsgroupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Allnsgroup"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __Allnsgroup__ .",
                        "type": "string",
                        "title": "UpdateAllnsgroupResponse"
                    }
                ]
            },
            "DdnsPrincipalcluster": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the DDNS Principal Cluster.",
                        "example": "Example comment"
                    },
                    "group": {
                        "type": "string",
                        "description": "The DDNS Principal cluster group name.",
                        "example": "Example group"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this DDNS Principal Cluster.",
                        "example": "Example name"
                    },
                    "principals": {
                        "type": "array",
                        "description": "The list of equivalent principals.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ListDdnsPrincipalclusterResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __DdnsPrincipalcluster__ objects.",
                        "type": "array",
                        "title": "ListDdnsPrincipalclusterResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/DdnsPrincipalcluster"
                        }
                    },
                    {
                        "description": "The response format to retrieve __DdnsPrincipalcluster__ objects.",
                        "type": "object",
                        "title": "ListDdnsPrincipalclusterResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DdnsPrincipalcluster"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateDdnsPrincipalclusterResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __DdnsPrincipalcluster__ in object format.",
                        "type": "object",
                        "title": "CreateDdnsPrincipalclusterResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/DdnsPrincipalcluster"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __DdnsPrincipalcluster__.",
                        "type": "string",
                        "title": "CreateDdnsPrincipalclusterResponse"
                    }
                ]
            },
            "GetDdnsPrincipalclusterResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DdnsPrincipalcluster"
                    },
                    {
                        "description": "The response format to retrieve __DdnsPrincipalcluster__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetDdnsPrincipalclusterResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/DdnsPrincipalcluster"
                            }
                        }
                    }
                ]
            },
            "UpdateDdnsPrincipalclusterResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __DdnsPrincipalcluster__ in object format.",
                        "type": "object",
                        "title": "UpdateDdnsPrincipalclusterResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/DdnsPrincipalcluster"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __DdnsPrincipalcluster__ .",
                        "type": "string",
                        "title": "UpdateDdnsPrincipalclusterResponse"
                    }
                ]
            },
            "DdnsPrincipalclusterGroup": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "clusters": {
                        "type": "array",
                        "description": "The list of equivalent DDNS principal clusters.",
                        "enum": [
                            "ddns:principalcluster"
                        ],
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "ddns:principalcluster"
                            ]
                        }
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the DDNS Principal Cluster Group.",
                        "example": "Example comment"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this DDNS Principal Cluster Group.",
                        "example": "Example name"
                    }
                }
            },
            "ListDdnsPrincipalclusterGroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __DdnsPrincipalclusterGroup__ objects.",
                        "type": "array",
                        "title": "ListDdnsPrincipalclusterGroupResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                        }
                    },
                    {
                        "description": "The response format to retrieve __DdnsPrincipalclusterGroup__ objects.",
                        "type": "object",
                        "title": "ListDdnsPrincipalclusterGroupResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateDdnsPrincipalclusterGroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __DdnsPrincipalclusterGroup__ in object format.",
                        "type": "object",
                        "title": "CreateDdnsPrincipalclusterGroupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __DdnsPrincipalclusterGroup__.",
                        "type": "string",
                        "title": "CreateDdnsPrincipalclusterGroupResponse"
                    }
                ]
            },
            "GetDdnsPrincipalclusterGroupResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                    },
                    {
                        "description": "The response format to retrieve __DdnsPrincipalclusterGroup__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetDdnsPrincipalclusterGroupResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                            }
                        }
                    }
                ]
            },
            "UpdateDdnsPrincipalclusterGroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __DdnsPrincipalclusterGroup__ in object format.",
                        "type": "object",
                        "title": "UpdateDdnsPrincipalclusterGroupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/DdnsPrincipalclusterGroup"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __DdnsPrincipalclusterGroup__ .",
                        "type": "string",
                        "title": "UpdateDdnsPrincipalclusterGroupResponse"
                    }
                ]
            },
            "Orderedresponsepolicyzones": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "rp_zones": {
                        "type": "array",
                        "description": "An ordered list of Response Policy Zone names.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "view": {
                        "type": "string",
                        "description": "The DNS View name.",
                        "example": "Example view"
                    }
                }
            },
            "ListOrderedresponsepolicyzonesResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __Orderedresponsepolicyzones__ objects.",
                        "type": "array",
                        "title": "ListOrderedresponsepolicyzonesResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/Orderedresponsepolicyzones"
                        }
                    },
                    {
                        "description": "The response format to retrieve __Orderedresponsepolicyzones__ objects.",
                        "type": "object",
                        "title": "ListOrderedresponsepolicyzonesResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Orderedresponsepolicyzones"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateOrderedresponsepolicyzonesResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __Orderedresponsepolicyzones__ in object format.",
                        "type": "object",
                        "title": "CreateOrderedresponsepolicyzonesResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Orderedresponsepolicyzones"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __Orderedresponsepolicyzones__.",
                        "type": "string",
                        "title": "CreateOrderedresponsepolicyzonesResponse"
                    }
                ]
            },
            "GetOrderedresponsepolicyzonesResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Orderedresponsepolicyzones"
                    },
                    {
                        "description": "The response format to retrieve __Orderedresponsepolicyzones__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetOrderedresponsepolicyzonesResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Orderedresponsepolicyzones"
                            }
                        }
                    }
                ]
            },
            "UpdateOrderedresponsepolicyzonesResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __Orderedresponsepolicyzones__ in object format.",
                        "type": "object",
                        "title": "UpdateOrderedresponsepolicyzonesResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Orderedresponsepolicyzones"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __Orderedresponsepolicyzones__ .",
                        "type": "string",
                        "title": "UpdateOrderedresponsepolicyzonesResponse"
                    }
                ]
            },
            "SharedrecordA": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for this shared record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if this shared record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for this shared record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the shared record.",
                        "example": "Example ipv4addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this shared record. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides.",
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    }
                }
            },
            "ListSharedrecordAResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __SharedrecordA__ objects.",
                        "type": "array",
                        "title": "ListSharedrecordAResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/SharedrecordA"
                        }
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordA__ objects.",
                        "type": "object",
                        "title": "ListSharedrecordAResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SharedrecordA"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateSharedrecordAResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __SharedrecordA__ in object format.",
                        "type": "object",
                        "title": "CreateSharedrecordAResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordA"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __SharedrecordA__.",
                        "type": "string",
                        "title": "CreateSharedrecordAResponse"
                    }
                ]
            },
            "GetSharedrecordAResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SharedrecordA"
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordA__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetSharedrecordAResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordA"
                            }
                        }
                    }
                ]
            },
            "UpdateSharedrecordAResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __SharedrecordA__ in object format.",
                        "type": "object",
                        "title": "UpdateSharedrecordAResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordA"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __SharedrecordA__ .",
                        "type": "string",
                        "title": "UpdateSharedrecordAResponse"
                    }
                ]
            },
            "SharedrecordAaaa": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for this shared record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if this shared record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for this shared record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the shared record.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this shared record. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides.",
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    }
                }
            },
            "ListSharedrecordAaaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __SharedrecordAaaa__ objects.",
                        "type": "array",
                        "title": "ListSharedrecordAaaaResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/SharedrecordAaaa"
                        }
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordAaaa__ objects.",
                        "type": "object",
                        "title": "ListSharedrecordAaaaResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SharedrecordAaaa"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateSharedrecordAaaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __SharedrecordAaaa__ in object format.",
                        "type": "object",
                        "title": "CreateSharedrecordAaaaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordAaaa"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __SharedrecordAaaa__.",
                        "type": "string",
                        "title": "CreateSharedrecordAaaaResponse"
                    }
                ]
            },
            "GetSharedrecordAaaaResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SharedrecordAaaa"
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordAaaa__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetSharedrecordAaaaResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordAaaa"
                            }
                        }
                    }
                ]
            },
            "UpdateSharedrecordAaaaResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __SharedrecordAaaa__ in object format.",
                        "type": "object",
                        "title": "UpdateSharedrecordAaaaResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordAaaa"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __SharedrecordAaaa__ .",
                        "type": "string",
                        "title": "UpdateSharedrecordAaaaResponse"
                    }
                ]
            },
            "SharedrecordCname": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "canonical": {
                        "type": "string",
                        "description": "Canonical name in FQDN format. This value can be in unicode format.",
                        "example": "Example canonical"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for this shared record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if this shared record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_canonical": {
                        "type": "string",
                        "description": "Canonical name in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_canonical"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for this shared record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this shared record. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides.",
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    }
                }
            },
            "ListSharedrecordCnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __SharedrecordCname__ objects.",
                        "type": "array",
                        "title": "ListSharedrecordCnameResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/SharedrecordCname"
                        }
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordCname__ objects.",
                        "type": "object",
                        "title": "ListSharedrecordCnameResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SharedrecordCname"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateSharedrecordCnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __SharedrecordCname__ in object format.",
                        "type": "object",
                        "title": "CreateSharedrecordCnameResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordCname"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __SharedrecordCname__.",
                        "type": "string",
                        "title": "CreateSharedrecordCnameResponse"
                    }
                ]
            },
            "GetSharedrecordCnameResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SharedrecordCname"
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordCname__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetSharedrecordCnameResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordCname"
                            }
                        }
                    }
                ]
            },
            "UpdateSharedrecordCnameResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __SharedrecordCname__ in object format.",
                        "type": "object",
                        "title": "UpdateSharedrecordCnameResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordCname"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __SharedrecordCname__ .",
                        "type": "string",
                        "title": "UpdateSharedrecordCnameResponse"
                    }
                ]
            },
            "SharedrecordMx": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for this shared record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if this shared record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_mail_exchanger": {
                        "type": "string",
                        "description": "The name of the mail exchanger in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_mail_exchanger"
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for this shared record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "mail_exchanger": {
                        "type": "string",
                        "description": "The name of the mail exchanger in FQDN format. This value can be in unicode format.",
                        "example": "Example mail_exchanger"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this shared record. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "preference": {
                        "type": "integer",
                        "description": "The preference value. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides.",
                        "example": "Example shared_record_group"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    }
                }
            },
            "ListSharedrecordMxResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __SharedrecordMx__ objects.",
                        "type": "array",
                        "title": "ListSharedrecordMxResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/SharedrecordMx"
                        }
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordMx__ objects.",
                        "type": "object",
                        "title": "ListSharedrecordMxResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SharedrecordMx"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateSharedrecordMxResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __SharedrecordMx__ in object format.",
                        "type": "object",
                        "title": "CreateSharedrecordMxResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordMx"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __SharedrecordMx__.",
                        "type": "string",
                        "title": "CreateSharedrecordMxResponse"
                    }
                ]
            },
            "GetSharedrecordMxResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SharedrecordMx"
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordMx__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetSharedrecordMxResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordMx"
                            }
                        }
                    }
                ]
            },
            "UpdateSharedrecordMxResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __SharedrecordMx__ in object format.",
                        "type": "object",
                        "title": "UpdateSharedrecordMxResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordMx"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __SharedrecordMx__ .",
                        "type": "string",
                        "title": "UpdateSharedrecordMxResponse"
                    }
                ]
            },
            "SharedrecordSrv": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for this shared record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if this shared record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for this shared record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "dns_target": {
                        "type": "string",
                        "description": "The name for a shared SRV record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_target"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this shared record. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port of the shared SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the shared SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides.",
                        "example": "Example shared_record_group"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target of the shared SRV record in FQDN format. This value can be in unicode format.",
                        "example": "Example target"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight of the shared SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.",
                        "format": "int64",
                        "example": 1
                    }
                }
            },
            "ListSharedrecordSrvResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __SharedrecordSrv__ objects.",
                        "type": "array",
                        "title": "ListSharedrecordSrvResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/SharedrecordSrv"
                        }
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordSrv__ objects.",
                        "type": "object",
                        "title": "ListSharedrecordSrvResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SharedrecordSrv"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateSharedrecordSrvResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __SharedrecordSrv__ in object format.",
                        "type": "object",
                        "title": "CreateSharedrecordSrvResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordSrv"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __SharedrecordSrv__.",
                        "type": "string",
                        "title": "CreateSharedrecordSrvResponse"
                    }
                ]
            },
            "GetSharedrecordSrvResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SharedrecordSrv"
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordSrv__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetSharedrecordSrvResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordSrv"
                            }
                        }
                    }
                ]
            },
            "UpdateSharedrecordSrvResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __SharedrecordSrv__ in object format.",
                        "type": "object",
                        "title": "UpdateSharedrecordSrvResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordSrv"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __SharedrecordSrv__ .",
                        "type": "string",
                        "title": "UpdateSharedrecordSrvResponse"
                    }
                ]
            },
            "SharedrecordTxt": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for this shared record; maximum 256 characters.",
                        "example": "Example comment"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if this shared record is disabled or not. False means that the record is enabled.",
                        "example": false
                    },
                    "dns_name": {
                        "type": "string",
                        "description": "The name for this shared record in punycode format.",
                        "readOnly": true,
                        "example": "Example dns_name"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for this shared record. This value can be in unicode format.",
                        "example": "Example name"
                    },
                    "shared_record_group": {
                        "type": "string",
                        "description": "The name of the shared record group in which the record resides.",
                        "example": "Example shared_record_group"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text associated with the shared record. It can contain up to 255 bytes per substring and up a total of 512 bytes. To enter leading, trailing or embedded spaces in the text, add quotes (\" \") around the text to preserve the spaces.",
                        "example": "Example text"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value for this shared record. A 32-bit unsigned integer that represents the duration, in seconds, for which the shared record is valid (cached). Zero indicates that the shared record should not be cached.",
                        "format": "int64",
                        "example": 1
                    },
                    "use_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: ttl",
                        "example": false
                    }
                }
            },
            "ListSharedrecordTxtResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __SharedrecordTxt__ objects.",
                        "type": "array",
                        "title": "ListSharedrecordTxtResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/SharedrecordTxt"
                        }
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordTxt__ objects.",
                        "type": "object",
                        "title": "ListSharedrecordTxtResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SharedrecordTxt"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateSharedrecordTxtResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __SharedrecordTxt__ in object format.",
                        "type": "object",
                        "title": "CreateSharedrecordTxtResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordTxt"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __SharedrecordTxt__.",
                        "type": "string",
                        "title": "CreateSharedrecordTxtResponse"
                    }
                ]
            },
            "GetSharedrecordTxtResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SharedrecordTxt"
                    },
                    {
                        "description": "The response format to retrieve __SharedrecordTxt__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetSharedrecordTxtResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordTxt"
                            }
                        }
                    }
                ]
            },
            "UpdateSharedrecordTxtResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __SharedrecordTxt__ in object format.",
                        "type": "object",
                        "title": "UpdateSharedrecordTxtResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/SharedrecordTxt"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __SharedrecordTxt__ .",
                        "type": "string",
                        "title": "UpdateSharedrecordTxtResponse"
                    }
                ]
            },
            "Sharedrecordgroup": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "comment": {
                        "type": "string",
                        "description": "The descriptive comment of this shared record group.",
                        "example": "Example comment"
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this shared record group.",
                        "example": "Example name"
                    },
                    "record_name_policy": {
                        "type": "string",
                        "description": "The record name policy of this shared record group.",
                        "example": "Example record_name_policy"
                    },
                    "use_record_name_policy": {
                        "type": "boolean",
                        "description": "Use flag for: record_name_policy",
                        "example": false
                    },
                    "zone_associations": {
                        "type": "array",
                        "description": "The list of zones associated with this shared record group. Starting from NIOS-9.0.6, this field has been updated to a structure that includes FQDN and DNS view details.",
                        "enum": [
                            "zoneassociations"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/SharedrecordgroupZoneAssociations"
                        }
                    }
                }
            },
            "SharedrecordgroupZoneAssociations": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN of the authoritative forward zone.",
                        "example": "Example fqdn"
                    },
                    "view": {
                        "type": "string",
                        "description": "The view to which the zone belongs. If a view is not specified, the default view is used.",
                        "example": "Example view"
                    }
                }
            },
            "ListSharedrecordgroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __Sharedrecordgroup__ objects.",
                        "type": "array",
                        "title": "ListSharedrecordgroupResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/Sharedrecordgroup"
                        }
                    },
                    {
                        "description": "The response format to retrieve __Sharedrecordgroup__ objects.",
                        "type": "object",
                        "title": "ListSharedrecordgroupResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Sharedrecordgroup"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateSharedrecordgroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __Sharedrecordgroup__ in object format.",
                        "type": "object",
                        "title": "CreateSharedrecordgroupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Sharedrecordgroup"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __Sharedrecordgroup__.",
                        "type": "string",
                        "title": "CreateSharedrecordgroupResponse"
                    }
                ]
            },
            "GetSharedrecordgroupResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Sharedrecordgroup"
                    },
                    {
                        "description": "The response format to retrieve __Sharedrecordgroup__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetSharedrecordgroupResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Sharedrecordgroup"
                            }
                        }
                    }
                ]
            },
            "UpdateSharedrecordgroupResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __Sharedrecordgroup__ in object format.",
                        "type": "object",
                        "title": "UpdateSharedrecordgroupResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/Sharedrecordgroup"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __Sharedrecordgroup__ .",
                        "type": "string",
                        "title": "UpdateSharedrecordgroupResponse"
                    }
                ]
            },
            "View": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "_ref": {
                        "type": "string",
                        "description": "The reference to the object."
                    },
                    "blacklist_action": {
                        "type": "string",
                        "description": "The action to perform when a domain name matches the pattern defined in a rule that is specified by the blacklist_ruleset method. Valid values are \"REDIRECT\" or \"REFUSE\". The default value is \"REFUSE\".",
                        "enum": [
                            "REDIRECT",
                            "REFUSE"
                        ],
                        "example": "Example blacklist_action"
                    },
                    "blacklist_log_query": {
                        "type": "boolean",
                        "description": "The flag that indicates whether blacklist redirection queries are logged. Specify \"true\" to enable logging, or \"false\" to disable it. The default value is \"false\".",
                        "example": false
                    },
                    "blacklist_redirect_addresses": {
                        "type": "array",
                        "description": "The array of IP addresses the appliance includes in the response it sends in place of a blacklisted IP address.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "blacklist_redirect_ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value of the synthetic DNS responses resulted from blacklist redirection. The TTL value is a 32-bit unsigned integer that represents the TTL in seconds.",
                        "format": "int64",
                        "example": 1
                    },
                    "blacklist_rulesets": {
                        "type": "array",
                        "description": "The name of the Ruleset object assigned at the Grid level for blacklist redirection.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "cloud_info": {
                        "$ref": "#/components/schemas/ViewCloudInfo"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment for the DNS view; maximum 64 characters.",
                        "example": "Example comment"
                    },
                    "custom_root_name_servers": {
                        "type": "array",
                        "description": "The list of customized root name servers. You can either select and use Internet root name servers or specify custom root name servers by providing a host name and IP address to which the Infoblox appliance can send queries. Include the specified parameter to set the attribute value. Omit the parameter to retrieve the attribute value.",
                        "enum": [
                            "extserver"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewCustomRootNameServers"
                        }
                    },
                    "ddns_force_creation_timestamp_update": {
                        "type": "boolean",
                        "description": "Defines whether creation timestamp of RR should be updated ' when DDNS update happens even if there is no change to ' the RR.",
                        "example": false
                    },
                    "ddns_principal_group": {
                        "type": "string",
                        "description": "The DDNS Principal cluster group name.",
                        "example": "Example ddns_principal_group"
                    },
                    "ddns_principal_tracking": {
                        "type": "boolean",
                        "description": "The flag that indicates whether the DDNS principal track is enabled or disabled.",
                        "example": false
                    },
                    "ddns_restrict_patterns": {
                        "type": "boolean",
                        "description": "The flag that indicates whether an option to restrict DDNS update request based on FQDN patterns is enabled or disabled.",
                        "example": false
                    },
                    "ddns_restrict_patterns_list": {
                        "type": "array",
                        "description": "The unordered list of restriction patterns for an option of to restrict DDNS updates based on FQDN patterns.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "ddns_restrict_protected": {
                        "type": "boolean",
                        "description": "The flag that indicates whether an option to restrict DDNS update request to protected resource records is enabled or disabled.",
                        "example": false
                    },
                    "ddns_restrict_secure": {
                        "type": "boolean",
                        "description": "The flag that indicates whether DDNS update request for principal other than target resource record's principal is restricted.",
                        "example": false
                    },
                    "ddns_restrict_static": {
                        "type": "boolean",
                        "description": "The flag that indicates whether an option to restrict DDNS update request to resource records which are marked as 'STATIC' is enabled or disabled.",
                        "example": false
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "Determines if the DNS view is disabled or not. When this is set to False, the DNS view is enabled.",
                        "example": false
                    },
                    "dns64_enabled": {
                        "type": "boolean",
                        "description": "Determines if the DNS64 s enabled or not.",
                        "example": false
                    },
                    "dns64_groups": {
                        "type": "array",
                        "description": "The list of DNS64 synthesis groups associated with this DNS view.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "dnssec_enabled": {
                        "type": "boolean",
                        "description": "Determines if the DNS security extension is enabled or not.",
                        "example": false
                    },
                    "dnssec_expired_signatures_enabled": {
                        "type": "boolean",
                        "description": "Determines if the DNS security extension accepts expired signatures or not.",
                        "example": false
                    },
                    "dnssec_negative_trust_anchors": {
                        "type": "array",
                        "description": "A list of zones for which the server does not perform DNSSEC validation.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "dnssec_trusted_keys": {
                        "type": "array",
                        "description": "The list of trusted keys for the DNS security extension.",
                        "enum": [
                            "dnssectrustedkey"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewDnssecTrustedKeys"
                        }
                    },
                    "dnssec_validation_enabled": {
                        "type": "boolean",
                        "description": "Determines if the DNS security validation is enabled or not.",
                        "example": false
                    },
                    "edns_udp_size": {
                        "type": "integer",
                        "description": "Advertises the EDNS0 buffer size to the upstream server. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.",
                        "format": "int64",
                        "example": 1
                    },
                    "enable_blacklist": {
                        "type": "boolean",
                        "description": "Determines if the blacklist in a DNS view is enabled or not.",
                        "example": false
                    },
                    "enable_fixed_rrset_order_fqdns": {
                        "type": "boolean",
                        "description": "Determines if the fixed RRset order FQDN is enabled or not.",
                        "example": false
                    },
                    "enable_match_recursive_only": {
                        "type": "boolean",
                        "description": "Determines if the 'match-recursive-only' option in a DNS view is enabled or not.",
                        "example": false
                    },
                    "extattrs": {
                        "type": "object",
                        "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ExtAttrs"
                        }
                    },
                    "filter_aaaa": {
                        "type": "string",
                        "description": "The type of AAAA filtering for this DNS view object.",
                        "enum": [
                            "YES",
                            "NO",
                            "BREAK_DNSSEC"
                        ],
                        "example": "Example filter_aaaa"
                    },
                    "filter_aaaa_list": {
                        "type": "array",
                        "description": "Applies AAAA filtering to a named ACL, or to a list of IPv4/IPv6 addresses and networks from which queries are received. This field does not allow TSIG keys.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewFilterAaaaList"
                        }
                    },
                    "fixed_rrset_order_fqdns": {
                        "type": "array",
                        "description": "The fixed RRset order FQDN. If this field does not contain an empty value, the appliance will automatically set the enable_fixed_rrset_order_fqdns field to 'true', unless the same request sets the enable field to 'false'.",
                        "enum": [
                            "grid:dns:fixedrrsetorderfqdn"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewFixedRrsetOrderFqdns"
                        }
                    },
                    "forward_only": {
                        "type": "boolean",
                        "description": "Determines if this DNS view sends queries to forwarders only or not. When the value is True, queries are sent to forwarders only, and not to other internal or Internet root servers.",
                        "example": false
                    },
                    "forwarders": {
                        "type": "array",
                        "description": "The list of forwarders for the DNS view. A forwarder is a name server to which other name servers first send their off-site queries. The forwarder builds up a cache of information, avoiding the need for other name servers to send queries off-site.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "is_default": {
                        "type": "boolean",
                        "description": "The NIOS appliance provides one default DNS view. You can rename the default view and change its settings, but you cannot delete it. There must always be at least one DNS view in the appliance.",
                        "readOnly": true,
                        "example": false
                    },
                    "last_queried_acl": {
                        "type": "array",
                        "description": "Determines last queried ACL for the specified IPv4 or IPv6 addresses and networks in scavenging settings.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewLastQueriedAcl"
                        }
                    },
                    "match_clients": {
                        "type": "array",
                        "description": "A list of forwarders for the match clients. This list specifies a named ACL, or a list of IPv4/IPv6 addresses, networks, TSIG keys of clients that are allowed or denied access to the DNS view.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewMatchClients"
                        }
                    },
                    "match_destinations": {
                        "type": "array",
                        "description": "A list of forwarders for the match destinations. This list specifies a name ACL, or a list of IPv4/IPv6 addresses, networks, TSIG keys of clients that are allowed or denied access to the DNS view.",
                        "enum": [
                            "addressac"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewMatchDestinations"
                        }
                    },
                    "max_cache_ttl": {
                        "type": "integer",
                        "description": "The maximum number of seconds to cache ordinary (positive) answers.",
                        "format": "int64",
                        "example": 1
                    },
                    "max_ncache_ttl": {
                        "type": "integer",
                        "description": "The maximum number of seconds to cache negative (NXDOMAIN) answers.",
                        "format": "int64",
                        "example": 1
                    },
                    "max_udp_size": {
                        "type": "integer",
                        "description": "The value is used by authoritative DNS servers to never send DNS responses larger than the configured value. The value should be between 512 and 4096 bytes. The recommended value is between 512 and 1220 bytes.",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the DNS view.",
                        "example": "Example name"
                    },
                    "network_view": {
                        "type": "string",
                        "description": "The name of the network view object associated with this DNS view.",
                        "example": "Example network_view"
                    },
                    "notify_delay": {
                        "type": "integer",
                        "description": "The number of seconds of delay the notify messages are sent to secondaries.",
                        "format": "int64",
                        "example": 1
                    },
                    "nxdomain_log_query": {
                        "type": "boolean",
                        "description": "The flag that indicates whether NXDOMAIN redirection queries are logged. Specify \"true\" to enable logging, or \"false\" to disable it. The default value is \"false\".",
                        "example": false
                    },
                    "nxdomain_redirect": {
                        "type": "boolean",
                        "description": "Determines if NXDOMAIN redirection in a DNS view is enabled or not.",
                        "example": false
                    },
                    "nxdomain_redirect_addresses": {
                        "type": "array",
                        "description": "The array with IPv4 addresses the appliance includes in the response it sends in place of an NXDOMAIN response.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "nxdomain_redirect_addresses_v6": {
                        "type": "array",
                        "description": "The array with IPv6 addresses the appliance includes in the response it sends in place of an NXDOMAIN response.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "nxdomain_redirect_ttl": {
                        "type": "integer",
                        "description": "The Time To Live (TTL) value of the synthetic DNS responses resulted from NXDOMAIN redirection. The TTL value is a 32-bit unsigned integer that represents the TTL in seconds.",
                        "format": "int64",
                        "example": 1
                    },
                    "nxdomain_rulesets": {
                        "type": "array",
                        "description": "The names of the Ruleset objects assigned at the grid level for NXDOMAIN redirection.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "recursion": {
                        "type": "boolean",
                        "description": "Determines if recursion is enabled or not.",
                        "example": false
                    },
                    "response_rate_limiting": {
                        "$ref": "#/components/schemas/ViewResponseRateLimiting"
                    },
                    "root_name_server_type": {
                        "type": "string",
                        "description": "Determines the type of root name servers.",
                        "enum": [
                            "CUSTOM",
                            "INTERNET"
                        ],
                        "example": "Example root_name_server_type"
                    },
                    "rpz_drop_ip_rule_enabled": {
                        "type": "boolean",
                        "description": "Enables the appliance to ignore RPZ-IP triggers with prefix lengths less than the specified minimum prefix length.",
                        "example": false
                    },
                    "rpz_drop_ip_rule_min_prefix_length_ipv4": {
                        "type": "integer",
                        "description": "The minimum prefix length for IPv4 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv4 prefix length.",
                        "format": "int64",
                        "example": 1
                    },
                    "rpz_drop_ip_rule_min_prefix_length_ipv6": {
                        "type": "integer",
                        "description": "The minimum prefix length for IPv6 RPZ-IP triggers. The appliance ignores RPZ-IP triggers with prefix lengths less than the specified minimum IPv6 prefix length.",
                        "format": "int64",
                        "example": 1
                    },
                    "rpz_qname_wait_recurse": {
                        "type": "boolean",
                        "description": "The flag that indicates whether recursive RPZ lookups are enabled.",
                        "example": false
                    },
                    "scavenging_settings": {
                        "$ref": "#/components/schemas/ViewScavengingSettings"
                    },
                    "sortlist": {
                        "type": "array",
                        "description": "A sort list that determines the order of IP addresses in responses sent to DNS queries.",
                        "enum": [
                            "sortlist"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ViewSortlist"
                        }
                    },
                    "use_blacklist": {
                        "type": "boolean",
                        "description": "Use flag for: blacklist_action , blacklist_log_query, blacklist_redirect_addresses, blacklist_redirect_ttl, blacklist_rulesets, enable_blacklist",
                        "example": false
                    },
                    "use_ddns_force_creation_timestamp_update": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_force_creation_timestamp_update",
                        "example": false
                    },
                    "use_ddns_patterns_restriction": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_patterns_list , ddns_restrict_patterns",
                        "example": false
                    },
                    "use_ddns_principal_security": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_secure , ddns_principal_tracking, ddns_principal_group",
                        "example": false
                    },
                    "use_ddns_restrict_protected": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_protected",
                        "example": false
                    },
                    "use_ddns_restrict_static": {
                        "type": "boolean",
                        "description": "Use flag for: ddns_restrict_static",
                        "example": false
                    },
                    "use_dns64": {
                        "type": "boolean",
                        "description": "Use flag for: dns64_enabled , dns64_groups",
                        "example": false
                    },
                    "use_dnssec": {
                        "type": "boolean",
                        "description": "Use flag for: dnssec_enabled , dnssec_expired_signatures_enabled, dnssec_validation_enabled, dnssec_trusted_keys",
                        "example": false
                    },
                    "use_edns_udp_size": {
                        "type": "boolean",
                        "description": "Use flag for: edns_udp_size",
                        "example": false
                    },
                    "use_filter_aaaa": {
                        "type": "boolean",
                        "description": "Use flag for: filter_aaaa , filter_aaaa_list",
                        "example": false
                    },
                    "use_fixed_rrset_order_fqdns": {
                        "type": "boolean",
                        "description": "Use flag for: fixed_rrset_order_fqdns , enable_fixed_rrset_order_fqdns",
                        "example": false
                    },
                    "use_forwarders": {
                        "type": "boolean",
                        "description": "Use flag for: forwarders , forward_only",
                        "example": false
                    },
                    "use_max_cache_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: max_cache_ttl",
                        "example": false
                    },
                    "use_max_ncache_ttl": {
                        "type": "boolean",
                        "description": "Use flag for: max_ncache_ttl",
                        "example": false
                    },
                    "use_max_udp_size": {
                        "type": "boolean",
                        "description": "Use flag for: max_udp_size",
                        "example": false
                    },
                    "use_nxdomain_redirect": {
                        "type": "boolean",
                        "description": "Use flag for: nxdomain_redirect , nxdomain_redirect_addresses, nxdomain_redirect_addresses_v6, nxdomain_redirect_ttl, nxdomain_log_query, nxdomain_rulesets",
                        "example": false
                    },
                    "use_recursion": {
                        "type": "boolean",
                        "description": "Use flag for: recursion",
                        "example": false
                    },
                    "use_response_rate_limiting": {
                        "type": "boolean",
                        "description": "Use flag for: response_rate_limiting",
                        "example": false
                    },
                    "use_root_name_server": {
                        "type": "boolean",
                        "description": "Use flag for: custom_root_name_servers , root_name_server_type",
                        "example": false
                    },
                    "use_rpz_drop_ip_rule": {
                        "type": "boolean",
                        "description": "Use flag for: rpz_drop_ip_rule_enabled , rpz_drop_ip_rule_min_prefix_length_ipv4, rpz_drop_ip_rule_min_prefix_length_ipv6",
                        "example": false
                    },
                    "use_rpz_qname_wait_recurse": {
                        "type": "boolean",
                        "description": "Use flag for: rpz_qname_wait_recurse",
                        "example": false
                    },
                    "use_scavenging_settings": {
                        "type": "boolean",
                        "description": "Use flag for: scavenging_settings , last_queried_acl",
                        "example": false
                    },
                    "use_sortlist": {
                        "type": "boolean",
                        "description": "Use flag for: sortlist",
                        "example": false
                    }
                }
            },
            "ViewCloudInfo": {
                "type": "object",
                "properties": {
                    "delegated_member": {
                        "description": "The Cloud Platform Appliance to which authority of the object is delegated.",
                        "enum": [
                            "dhcpmember"
                        ],
                        "$ref": "#/components/schemas/ViewcloudinfoDelegatedMember"
                    },
                    "delegated_scope": {
                        "type": "string",
                        "description": "Indicates the scope of delegation for the object. This can be one of the following: NONE (outside any delegation), ROOT (the delegation point), SUBTREE (within the scope of a delegation), RECLAIMING (within the scope of a delegation being reclaimed, either as the delegation point or in the subtree).",
                        "enum": [
                            "NONE",
                            "ROOT",
                            "SUBTREE",
                            "RECLAIMING"
                        ],
                        "readOnly": true,
                        "example": "Example delegated_scope"
                    },
                    "delegated_root": {
                        "type": "string",
                        "description": "Indicates the root of the delegation if delegated_scope is SUBTREE or RECLAIMING. This is not set otherwise.",
                        "readOnly": true,
                        "example": "Example delegated_root"
                    },
                    "owned_by_adaptor": {
                        "type": "boolean",
                        "description": "Determines whether the object was created by the cloud adapter or not.",
                        "readOnly": true,
                        "example": false
                    },
                    "usage": {
                        "type": "string",
                        "description": "Indicates the cloud origin of the object.",
                        "enum": [
                            "NONE",
                            "ADAPTER",
                            "USED_BY",
                            "DELEGATED"
                        ],
                        "readOnly": true,
                        "example": "Example usage"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "Reference to the tenant object associated with the object, if any.",
                        "readOnly": true,
                        "example": "Example tenant"
                    },
                    "mgmt_platform": {
                        "type": "string",
                        "description": "Indicates the specified cloud management platform.",
                        "readOnly": true,
                        "example": "Example mgmt_platform"
                    },
                    "authority_type": {
                        "type": "string",
                        "description": "Type of authority over the object.",
                        "enum": [
                            "NONE",
                            "GM",
                            "CP"
                        ],
                        "readOnly": true,
                        "example": "Example authority_type"
                    }
                }
            },
            "ViewcloudinfoDelegatedMember": {
                "type": "object",
                "properties": {
                    "ipv4addr": {
                        "type": "string",
                        "description": "The IPv4 Address of the Grid Member.",
                        "example": "Example ipv4addr"
                    },
                    "ipv6addr": {
                        "type": "string",
                        "description": "The IPv6 Address of the Grid Member.",
                        "example": "Example ipv6addr"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Grid member name",
                        "example": "Example name"
                    }
                }
            },
            "ViewCustomRootNameServers": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 Address or IPv6 Address of the server.",
                        "example": "Example address"
                    },
                    "name": {
                        "type": "string",
                        "description": "A resolvable domain name for the external DNS server.",
                        "example": "Example name"
                    },
                    "shared_with_ms_parent_delegation": {
                        "type": "boolean",
                        "description": "This flag represents whether the name server is shared with the parent Microsoft primary zone's delegation server.",
                        "readOnly": true,
                        "example": false
                    },
                    "stealth": {
                        "type": "boolean",
                        "description": "Set this flag to hide the NS record for the primary name server from DNS queries.",
                        "example": false
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The TSIG key name.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ViewDnssecTrustedKeys": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN of the domain for which the member validates responses to recursive queries.",
                        "example": "Example fqdn"
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The DNSSEC algorithm used to generate the key.",
                        "example": "Example algorithm"
                    },
                    "key": {
                        "type": "string",
                        "description": "The DNSSEC key.",
                        "example": "Example key"
                    },
                    "secure_entry_point": {
                        "type": "boolean",
                        "description": "The secure entry point flag, if set it means this is a KSK configuration.",
                        "example": false
                    },
                    "dnssec_must_be_secure": {
                        "type": "boolean",
                        "description": "Responses must be DNSSEC secure for this hierarchy/domain.",
                        "example": false
                    }
                }
            },
            "ViewFilterAaaaList": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "ViewFixedRrsetOrderFqdns": {
                "type": "object",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN of the fixed RRset configuration item.",
                        "example": "Example fqdn"
                    },
                    "record_type": {
                        "type": "string",
                        "description": "The record type for the specified FQDN in the fixed RRset configuration.",
                        "enum": [
                            "A",
                            "AAAA",
                            "BOTH"
                        ],
                        "example": "Example record_type"
                    }
                }
            },
            "ViewLastQueriedAcl": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    }
                }
            },
            "ViewMatchClients": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key. If the external primary server is a NIOS appliance running DNS One 2.x code, this can be set to :2xCOMPAT.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The name of the TSIG key. If 2.x TSIG compatibility is used, this is set to 'tsig_xfer' on retrieval, and ignored on insert or update.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ViewMatchDestinations": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address this rule applies to or \"Any\".",
                        "example": "Example address"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission to use for this address.",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ],
                        "example": "Example permission"
                    },
                    "tsig_key": {
                        "type": "string",
                        "description": "A generated TSIG key. If the external primary server is a NIOS appliance running DNS One 2.x code, this can be set to :2xCOMPAT.",
                        "example": "Example tsig_key"
                    },
                    "tsig_key_alg": {
                        "type": "string",
                        "description": "The TSIG key algorithm.",
                        "enum": [
                            "HMAC-MD5",
                            "HMAC-SHA256"
                        ],
                        "example": "Example tsig_key_alg"
                    },
                    "tsig_key_name": {
                        "type": "string",
                        "description": "The name of the TSIG key. If 2.x TSIG compatibility is used, this is set to 'tsig_xfer' on retrieval, and ignored on insert or update.",
                        "example": "Example tsig_key_name"
                    },
                    "use_tsig_key_name": {
                        "type": "boolean",
                        "description": "Use flag for: tsig_key_name",
                        "example": false
                    }
                }
            },
            "ViewResponseRateLimiting": {
                "type": "object",
                "properties": {
                    "enable_rrl": {
                        "type": "boolean",
                        "description": "Determines if the response rate limiting is enabled or not.",
                        "example": false
                    },
                    "log_only": {
                        "type": "boolean",
                        "description": "Determines if logging for response rate limiting without dropping any requests is enabled or not.",
                        "example": false
                    },
                    "responses_per_second": {
                        "type": "integer",
                        "description": "The number of responses per client per second.",
                        "format": "int64",
                        "example": 1
                    },
                    "window": {
                        "type": "integer",
                        "description": "The time interval in seconds over which responses are tracked.",
                        "format": "int64",
                        "example": 1
                    },
                    "slip": {
                        "type": "integer",
                        "description": "The response rate limiting slip. Note that if slip is not equal to 0 every n-th rate-limited UDP request is sent a truncated response instead of being dropped.",
                        "format": "int64",
                        "example": 1
                    }
                }
            },
            "ViewScavengingSettings": {
                "type": "object",
                "properties": {
                    "enable_scavenging": {
                        "type": "boolean",
                        "description": "This flag indicates if the resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "enable_recurrent_scavenging": {
                        "type": "boolean",
                        "description": "This flag indicates if the recurrent resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "enable_auto_reclamation": {
                        "type": "boolean",
                        "description": "This flag indicates if the automatic resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "enable_rr_last_queried": {
                        "type": "boolean",
                        "description": "This flag indicates if the resource record last queried monitoring in affected zones is enabled or not.",
                        "example": false
                    },
                    "enable_zone_last_queried": {
                        "type": "boolean",
                        "description": "This flag indicates if the last queried monitoring for affected zones is enabled or not.",
                        "example": false
                    },
                    "reclaim_associated_records": {
                        "type": "boolean",
                        "description": "This flag indicates if the associated resource record scavenging is enabled or not.",
                        "example": false
                    },
                    "scavenging_schedule": {
                        "description": "Schedule setting for cloud discovery task.",
                        "enum": [
                            "setting:schedule"
                        ],
                        "$ref": "#/components/schemas/ViewscavengingsettingsScavengingSchedule"
                    },
                    "expression_list": {
                        "description": "The expression list. The particular record is treated as reclaimable if expression condition evaluates to 'true' for given record if scavenging hasn't been manually disabled on a given resource record.",
                        "enum": [
                            "expressionop"
                        ],
                        "$ref": "#/components/schemas/ViewscavengingsettingsExpressionList"
                    },
                    "ea_expression_list": {
                        "description": "The extensible attributes expression list. The particular record is treated as reclaimable if extensible attributes expression condition evaluates to 'true' for given record if scavenging hasn't been manually disabled on a given resource record.",
                        "enum": [
                            "eaexpressionop"
                        ],
                        "$ref": "#/components/schemas/ViewscavengingsettingsEaExpressionList"
                    }
                }
            },
            "ViewscavengingsettingsScavengingSchedule": {
                "type": "object",
                "properties": {
                    "weekdays": {
                        "type": "array",
                        "description": "Days of the week when scheduling is triggered.",
                        "enum": [
                            "SATURDAY",
                            "SUNDAY",
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "time_zone": {
                        "type": "string",
                        "description": "The time zone for the schedule.",
                        "example": "Example time_zone"
                    },
                    "recurring_time": {
                        "type": "integer",
                        "description": "The recurring time for the schedule in Epoch seconds format. This field is obsolete and is preserved only for backward compatibility purposes. Please use other applicable fields to define the recurring schedule. DO NOT use recurring_time together with these fields. If you use recurring_time with other fields to define the recurring schedule, recurring_time has priority over year, hour_of_day, and minutes_past_hour and will override the values of these fields, although it does not override month and day_of_month. In this case, the recurring time value might be different than the intended value that you define.",
                        "format": "int64",
                        "example": 1
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency for the scheduled task.",
                        "enum": [
                            "DAILY",
                            "HOURLY",
                            "MONTHLY",
                            "WEEKLY"
                        ],
                        "example": "Example frequency"
                    },
                    "every": {
                        "type": "integer",
                        "description": "The number of frequency to wait before repeating the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "minutes_past_hour": {
                        "type": "integer",
                        "description": "The minutes past the hour for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "hour_of_day": {
                        "type": "integer",
                        "description": "The hour of day for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "year": {
                        "type": "integer",
                        "description": "The year for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "month": {
                        "type": "integer",
                        "description": "The month for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "day_of_month": {
                        "type": "integer",
                        "description": "The day of the month for the scheduled task.",
                        "format": "int64",
                        "example": 1
                    },
                    "repeat": {
                        "type": "string",
                        "description": "Indicates if the scheduled task will be repeated or run only once.",
                        "enum": [
                            "ONCE",
                            "RECUR"
                        ],
                        "example": "Example repeat"
                    },
                    "disable": {
                        "type": "boolean",
                        "description": "If set to True, the scheduled task is disabled.",
                        "example": false
                    }
                }
            },
            "ViewscavengingsettingsExpressionList": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation name.",
                        "enum": [
                            "AND",
                            "ENDLIST",
                            "GT",
                            "LT",
                            "LE",
                            "GE",
                            "MATCH_IP",
                            "MATCH_RANGE",
                            "MATCH_CIDR",
                            "EQ",
                            "EXISTS",
                            "NOT_EQ",
                            "NOT_EXISTS",
                            "OR"
                        ],
                        "example": "Example op"
                    },
                    "op1": {
                        "type": "string",
                        "description": "The first operand value.",
                        "example": "Example op1"
                    },
                    "op1_type": {
                        "type": "string",
                        "description": "The first operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op1_type"
                    },
                    "op2": {
                        "type": "string",
                        "description": "The second operand value.",
                        "example": "Example op2"
                    },
                    "op2_type": {
                        "type": "string",
                        "description": "The second operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op2_type"
                    }
                }
            },
            "ViewscavengingsettingsEaExpressionList": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation name.",
                        "enum": [
                            "AND",
                            "ENDLIST",
                            "GT",
                            "LT",
                            "LE",
                            "GE",
                            "MATCH_IP",
                            "MATCH_RANGE",
                            "MATCH_CIDR",
                            "EQ",
                            "EXISTS",
                            "NOT_EQ",
                            "NOT_EXISTS",
                            "OR"
                        ],
                        "example": "Example op"
                    },
                    "op1": {
                        "type": "string",
                        "description": "The name of the Extensible Attribute Definition object which is used as the first operand value.",
                        "example": "Example op1"
                    },
                    "op1_type": {
                        "type": "string",
                        "description": "The first operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op1_type"
                    },
                    "op2": {
                        "type": "string",
                        "description": "The second operand value.",
                        "example": "Example op2"
                    },
                    "op2_type": {
                        "type": "string",
                        "description": "The second operand type.",
                        "enum": [
                            "FIELD",
                            "LIST",
                            "STRING"
                        ],
                        "example": "Example op2_type"
                    }
                }
            },
            "ViewSortlist": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The source address of a sortlist object.",
                        "example": "Example address"
                    },
                    "match_list": {
                        "type": "array",
                        "description": "The match list of a sortlist.",
                        "enum": [
                            "string"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ListViewResponse": {
                "oneOf": [
                    {
                        "description": "The response format to retrieve __View__ objects.",
                        "type": "array",
                        "title": "ListViewResponseArray",
                        "items": {
                            "$ref": "#/components/schemas/View"
                        }
                    },
                    {
                        "description": "The response format to retrieve __View__ objects.",
                        "type": "object",
                        "title": "ListViewResponseObject",
                        "properties": {
                            "result": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/View"
                                }
                            }
                        }
                    }
                ]
            },
            "CreateViewResponse": {
                "oneOf": [
                    {
                        "description": "The response format to create __View__ in object format.",
                        "type": "object",
                        "title": "CreateViewResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/View"
                            }
                        }
                    },
                    {
                        "description": "The response format to create __View__.",
                        "type": "string",
                        "title": "CreateViewResponse"
                    }
                ]
            },
            "GetViewResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/View"
                    },
                    {
                        "description": "The response format to retrieve __View__ objects.",
                        "type": "object",
                        "additionalProperties": false,
                        "title": "GetViewResponseObjectAsResult",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/View"
                            }
                        }
                    }
                ]
            },
            "UpdateViewResponse": {
                "oneOf": [
                    {
                        "description": "The response format to update __View__ in object format.",
                        "type": "object",
                        "title": "UpdateViewResponseAsObject",
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/View"
                            }
                        }
                    },
                    {
                        "description": "The response format to update __View__ .",
                        "type": "string",
                        "title": "UpdateViewResponse"
                    }
                ]
            }
        }
    }
}